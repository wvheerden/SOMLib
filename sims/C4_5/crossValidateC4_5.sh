# ===================================================================================================
# Script        : crossValidateC4_5.sh
# Usage         : ./crossValidateC4_5.sh [simDirectory]
# Purpose       : Performs a cross-validated paired test on parameter data set using C4.5 algorithm
#
# Preconditions : - All required simulation-related programs are present
#                 - Data set as directory name in dataset directory must exist and be in correct form
#                   (i.e. no header, one record per line, comma delimited, last value is class label)
# ===================================================================================================

#!/bin/bash

# ===================================================================================================
# Function : validateSystem(simDirectory)
# Purpose  : Validates components required for cross validation run (based on simDirectory)
# Return   : None
# ===================================================================================================

validateSystem() {
	
	# check for correct number of parameters
	if [ -z ${1} ]; then
		echo "Usage: ./crossValidate.sh [simDirectory]"
		exit
	fi
	
	echo "Status: Validating system..."
	echo "=============================================="
	
	# check for data directory
	echo -n "Simulation directory \"${1}\"...  "
	if [ ! -d ../../datasets/${1} ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for original data file in simulation directory
	echo -n "Data file \"${1}/original/${1}.data\"...  "
	if [ ! -f ../../datasets/${1}/original/${1}.data ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for cross validation set building script
	echo -n "Cross validation set building script...  "
	if [ ! -f ../../algorithms/BuildSets/BuildSets.class ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for C4.5 data conversion script
	echo -n "Data conversion script \"${1}/convert_c4_5.awk\"...  "
	if [ ! -f ./../../datasets/${1}/convert_c4_5.awk ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for C4.5 program
	echo -n "C4.5 program...  "
	if [ ! -f ../../algorithms/C4_5/Src/c4.5 ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for rule set condition counting program
	echo -n "Rule set condition counting program...  "
	if [ ! -f ../../algorithms/GetRuleSetConditionCountC4_5/GetRuleSetConditionCountC4_5.class ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	#check for results averaging program
	echo -n "Results averaging program...  "
	if [ ! -f ../../algorithms/AverageRunResults/AverageRuleSetResults.class ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	echo "=============================================="
	echo "Status: System OK..."
	
}

# ===================================================================================================
# Function : buildSets(simDirectory)
# Purpose  : Builds data sets required for cross validation simulations (based on simDirectory)
# Return   : None
# ===================================================================================================

buildSets() {
	
	echo "Status: Performing cross validation set builds"
	
	# build raw training and test sets (must still be converted to C4.5 format)
	if [ ${1} == "ionosphere" ]; then
		echo "Status: Building set for IONOSPHERE database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	elif [ ${1} == "iris" ]; then
		echo "Status: Building set for IRIS database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	elif [ ${1} == "monks1" ]; then
		echo "Status: Building set for MONKS1 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	elif [ ${1} == "monks2" ]; then
		echo "Status: Building set for MONKS2 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	elif [ ${1} == "monks3" ]; then
		echo "Status: Building set for MONKS3 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 5
	elif [ ${1} == "pima" ]; then
		echo "Status: Building set for PIMA database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	else
		echo "Status: Unrecognised set"
		echo "Status: Building default"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	fi
	
	echo "=============================================="
	echo "Status: Cross validation sets built"
	
	echo -n "Status: Performing data set conversions...  "
	
	# perform conversion of data set from raw form to C4.5 format, creating [simulation].data
	for ((dataset = 0; dataset < 30; ++dataset))
	do
		gawk -f ./../../datasets/${1}/convert_c4_5.awk ${1}.data.raw.${dataset}.train > ${1}.${dataset}.data
		rm -f ${1}.data.raw.${dataset}.train
		gawk -f ./../../datasets/${1}/convert_c4_5.awk ${1}.data.raw.${dataset}.test > ${1}.${dataset}.test
		rm -f ${1}.data.raw.${dataset}.test
		
		# create names file
		./../../datasets/${1}/names_c4_5.sh > ${1}.${dataset}.names
	done
	
	echo "DONE"
	
}

# ===================================================================================================
# Function : runCrossValidation(simDirectory, minOutcomes, heuristic, pruningConfidence,
#                               FisherConfidence, redundancy)
# Purpose  : Performs a single cross validation using provided parameters
# Return   : None
# ===================================================================================================

runCrossValidation () {
	
	# get description string for tree test heuristic (0 = gain ratio; 1 = gain)
	if [ ${3} -eq 0 ]; then
		heuristicDescription="gratio"
	elif [ ${3} -eq 1 ]; then
		heuristicDescription="gain"
	fi
	
	if [ ${compareResult} -eq 1 ]; then
		FisherDescription="na"
	else
		FisherDescription=${5}
	fi
	
	if [ -f c4-5_${1}_minOut_${2}_heur_${heuristicDescription}_prunConf_${4}_fisher_${FisherDescription}_redun_${6}.accuracy ]; then
		rm -f c4-5_${1}_minOut_${2}_heur_${heuristicDescription}_prunConf_${4}_fisher_${FisherDescription}_redun_${6}.accuracy
	fi
	
	if [ -f c4-5_${1}_minOut_${2}_heur_${heuristicDescription}_prunConf_${4}_fisher_${FisherDescription}_redun_${6}.error ]; then
		rm -f c4-5_${1}_minOut_${2}_heur_${heuristicDescription}_prunConf_${4}_fisher_${FisherDescription}_redun_${6}.error
	fi
	
	for ((simNum = 0; simNum < 30; ++simNum))
	do
		echo -n "${simNum} "
		
		# execute C4.5 to build tree
		sleep 1
		
		if [ ${3} -eq 0 ]; then
			# gain ratio criterion
			./../../algorithms/C4_5/Src/c4.5 -f ${1}.${simNum} -m ${2} > /dev/null
		else
			# gain criterion
			./../../algorithms/C4_5/Src/c4.5 -f ${1}.${simNum} -m ${2} -g > /dev/null
		fi
		
		# check for error in tree build
		if [ $? -ne 0 ]; then
			echo -n "[error_tree] "
		else
			# execute C4.5 rule inducer, output results to out.tmp
			sleep 1
			
			if [ ${compareResult} = 1 ]; then
				# don't use Fisher's exact pruning if the pruning confidence is negative
				./../../algorithms/C4_5/Src/c4.5rules -f ${1}.${simNum} -u -c ${4} -r ${6} > out.tmp
			else
				# use Fisher's exact pruning
				./../../algorithms/C4_5/Src/c4.5rules -f ${1}.${simNum} -u -c ${4} -r ${6} -F ${5} > out.tmp
			fi
			
			# check for error in rule extraction
			if [ $? -ne 0 ]; then
				echo -n "[error_rules] "
			else
				# extract training and generalization accuracy, misclassification accuracy (which is simply 0, because it isn't defined), and unclassified accuracy (which is simply 0, because it isn't defined)
				grep "<<" out.tmp | gawk '{ printf "%s\t0.0\t0.0\t", 100.0-$6 }' >> c4-5_${1}_minOut_${2}_heur_${heuristicDescription}_prunConf_${4}_fisher_${FisherDescription}_redun_${6}.accuracy
				
				# extract training and generalization error, misclassification error (same as overall error), and unclassified error (which is simply 0, because C4.5 classifies every example)
				grep "<<" out.tmp | gawk '{ printf "%s\t%s\t0.0\t", $6, $6 }' >> c4-5_${1}_minOut_${2}_heur_${heuristicDescription}_prunConf_${4}_fisher_${FisherDescription}_redun_${6}.error
				
				# get total condition count (+1 for default rule), number of rules (+1 for default rule), and average conditions per rule (considering default rule to be a single rule with 1 condition)
				java GetRuleSetConditionCountC4_5 out.tmp >> c4-5_${1}_minOut_${2}_heur_${heuristicDescription}_prunConf_${4}_fisher_${FisherDescription}_redun_${6}.accuracy
				java GetRuleSetConditionCountC4_5 out.tmp >> c4-5_${1}_minOut_${2}_heur_${heuristicDescription}_prunConf_${4}_fisher_${FisherDescription}_redun_${6}.error
			fi
			
		fi
		
		if [ ${simNum} -ne 29 ]; then
			echo "" >> c4-5_${1}_minOut_${2}_heur_${heuristicDescription}_prunConf_${4}_fisher_${FisherDescription}_redun_${6}.accuracy
			echo "" >> c4-5_${1}_minOut_${2}_heur_${heuristicDescription}_prunConf_${4}_fisher_${FisherDescription}_redun_${6}.error
		fi
		
		# clean up
		rm -f *.rules *.tree *.unpruned out.tmp
		
	done
	
	# calculate confidence intervals
	java AverageRuleSetResults -accuracy c4-5_${1}_minOut_${2}_heur_${heuristicDescription}_prunConf_${4}_fisher_${FisherDescription}_redun_${6}.accuracy c4-5.accuracy.summary
	java AverageRuleSetResults -error c4-5_${1}_minOut_${2}_heur_${heuristicDescription}_prunConf_${4}_fisher_${FisherDescription}_redun_${6}.error c4-5.error.summary
	
	echo ""
	
}

# ===================================================================================================
# Function : runSims(simDirectory)
# Purpose  : Runs simulations for specified simDirectory [assumes built data sets]
# Return   : None
# ===================================================================================================

runSims () {
	
	echo "Status: Running simulations"
	echo "=============================================="
	
	# number of current simulation
	currentSimulation=1
	
	# minimum examples per tree test outcome: (integer) [1:inf] (Default: 2)
	minOutcomes=()
	
	# tree test heuristic: 0 = gain ratio; 1 = gain (Default: 0)
	heuristics=(0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1)
	
	# pessimistic rule pruning confidence level: (float) [0:100] (default: 25)
	pruningConfidences=(0 50 25 75 62.5 12.5 87.5 37.5 93.75 43.75 68.75 18.75 31.25 81.25 6.25 56.25 46.875 96.875 21.875 71.875 84.375 34.375 59.375 9.375 53.125 3.125 78.125 28.125 15.625 65.625 40.625 90.625 70.3125 20.3125 95.3125 45.3125 7.8125 57.8125 32.8125 82.8125 26.5625 76.5625 1.5625 51.5625 89.0625 39.0625 64.0625 14.0625 79.6875 29.6875 54.6875 4.6875 42.1875 92.1875 17.1875 67.1875 23.4375 73.4375 48.4375 98.4375 60.9375 10.9375 85.9375 35.9375 82.03125 32.03125 57.03125 7.03125 44.53125 94.53125 19.53125 69.53125 13.28125 63.28125 38.28125 88.28125 50.78125 0.78125 75.78125 25.78125 66.40625 16.40625 91.40625 41.40625 3.90625 53.90625 28.90625 78.90625 35.15625 85.15625 10.15625 60.15625 97.65625 47.65625 72.65625 22.65625 39.84375 89.84375 14.84375 64.84375 77.34375 27.34375 52.34375 2.34375 58.59375 8.59375 83.59375 33.59375 21.09375 71.09375 46.09375 96.09375 11.71875 61.71875 36.71875 86.71875 74.21875 24.21875 99.21875 49.21875 92.96875 42.96875 67.96875 17.96875 30.46875 80.46875 5.46875 55.46875 29.296875 79.296875 4.296875 54.296875 91.796875 41.796875 66.796875 16.796875 73.046875 23.046875 98.046875 48.046875 10.546875 60.546875 35.546875 85.546875 19.921875 69.921875 44.921875 94.921875 57.421875 7.421875 82.421875 32.421875 76.171875 26.171875 51.171875 1.171875 38.671875 88.671875 13.671875 63.671875 99.609375 49.609375 74.609375 24.609375 37.109375 87.109375 12.109375 62.109375 5.859375 55.859375 30.859375 80.859375 68.359375 18.359375 93.359375 43.359375 52.734375 2.734375 77.734375 27.734375 15.234375 65.234375 40.234375 90.234375 46.484375 96.484375 21.484375 71.484375 83.984375 33.984375 58.984375 8.984375 59.765625 9.765625 84.765625 34.765625 22.265625 72.265625 47.265625 97.265625 41.015625 91.015625 16.015625 66.015625 78.515625 28.515625 53.515625 3.515625 87.890625 37.890625 62.890625 12.890625 25.390625 75.390625 0.390625 50.390625 6.640625 56.640625 31.640625 81.640625 69.140625 19.140625 94.140625 44.140625 17.578125 67.578125 42.578125 92.578125 55.078125 5.078125 80.078125 30.078125 86.328125 36.328125 61.328125 11.328125 48.828125 98.828125 23.828125 73.828125 33.203125 83.203125 8.203125 58.203125 95.703125 45.703125 70.703125 20.703125 64.453125 14.453125 89.453125 39.453125 1.953125 51.953125 26.953125 76.953125 67.7734375 17.7734375 92.7734375 42.7734375 5.2734375 55.2734375 30.2734375 80.2734375 36.5234375 86.5234375 11.5234375 61.5234375 99.0234375 49.0234375 74.0234375 24.0234375 83.3984375 33.3984375 58.3984375 8.3984375 45.8984375 95.8984375 20.8984375 70.8984375 14.6484375 64.6484375 39.6484375 89.6484375 52.1484375 2.1484375 77.1484375 27.1484375 9.9609375 59.9609375 34.9609375 84.9609375 72.4609375 22.4609375 97.4609375 47.4609375 91.2109375 41.2109375 66.2109375 16.2109375 28.7109375 78.7109375 3.7109375 53.7109375 38.0859375 88.0859375 13.0859375 63.0859375 75.5859375 25.5859375 50.5859375 0.5859375 56.8359375 6.8359375 81.8359375 31.8359375 19.3359375 69.3359375 44.3359375 94.3359375 49.8046875 99.8046875 24.8046875 74.8046875 87.3046875 37.3046875 62.3046875 12.3046875 56.0546875 6.0546875 81.0546875 31.0546875 18.5546875 68.5546875 43.5546875 93.5546875 2.9296875 52.9296875 27.9296875 77.9296875 65.4296875 15.4296875 90.4296875 40.4296875 96.6796875 46.6796875 71.6796875 21.6796875 34.1796875 84.1796875 9.1796875 59.1796875 79.4921875 29.4921875 54.4921875 4.4921875 41.9921875 91.9921875 16.9921875 66.9921875 23.2421875 73.2421875 48.2421875 98.2421875 60.7421875 10.7421875 85.7421875 35.7421875 70.1171875 20.1171875 95.1171875 45.1171875 7.6171875 57.6171875 32.6171875 82.6171875 26.3671875 76.3671875 1.3671875 51.3671875 88.8671875 38.8671875 63.8671875 13.8671875 90.0390625 40.0390625 65.0390625 15.0390625 27.5390625 77.5390625 2.5390625 52.5390625 8.7890625 58.7890625 33.7890625 83.7890625 71.2890625 21.2890625 96.2890625 46.2890625 61.9140625 11.9140625 86.9140625 36.9140625 24.4140625 74.4140625 49.4140625 99.4140625 43.1640625 93.1640625 18.1640625 68.1640625 80.6640625 30.6640625 55.6640625 5.6640625 32.2265625 82.2265625 7.2265625 57.2265625 94.7265625 44.7265625 69.7265625 19.7265625 63.4765625 13.4765625 88.4765625 38.4765625 0.9765625 50.9765625 25.9765625 75.9765625 16.6015625 66.6015625 41.6015625 91.6015625 54.1015625 4.1015625 79.1015625 29.1015625 85.3515625 35.3515625 60.3515625 10.3515625 47.8515625 97.8515625 22.8515625 72.8515625 20.5078125 70.5078125 45.5078125 95.5078125 58.0078125 8.0078125 83.0078125 33.0078125 76.7578125 26.7578125 51.7578125 1.7578125 39.2578125 89.2578125 14.2578125 64.2578125 29.8828125 79.8828125 4.8828125 54.8828125 92.3828125 42.3828125 67.3828125 17.3828125 73.6328125 23.6328125 98.6328125 48.6328125 11.1328125 61.1328125 36.1328125 86.1328125 50.1953125 0.1953125 75.1953125 25.1953125 12.6953125 62.6953125 37.6953125 87.6953125 43.9453125 93.9453125 18.9453125 68.9453125 81.4453125 31.4453125 56.4453125 6.4453125 97.0703125 47.0703125 72.0703125 22.0703125 34.5703125 84.5703125 9.5703125 59.5703125 3.3203125 53.3203125 28.3203125 78.3203125 65.8203125 15.8203125 90.8203125 40.8203125)
	
	# Fisher's exact rule pruning confidence level: (float) [0:100] (default: off [negative], otherwise 25)
	fisherConfidences=(-100 0 -50 50 75 -25 25 -75 -12.5 87.5 -62.5 37.5 12.5 -87.5 62.5 -37.5 31.25 -68.75 81.25 -18.75 -43.75 56.25 -93.75 6.25 68.75 -31.25 18.75 -81.25 -56.25 43.75 -6.24999999999999 93.75 9.375 -90.625 59.375 -40.625 -15.625 84.375 -65.625 34.375 96.875 -3.125 46.875 -53.125 -78.125 21.875 -28.125 71.875 -71.875 28.125 -21.875 78.125 53.125 -46.875 3.125 -96.875 -34.375 65.625 -84.375 15.625 40.625 -59.375 90.625 -9.375 67.1875 -32.8125 17.1875 -82.8125 -57.8125 42.1875 -7.8125 92.1875 29.6875 -70.3125 79.6875 -20.3125 -45.3125 54.6875 -95.3125 4.6875 -1.5625 98.4375 -51.5625 48.4375 23.4375 -76.5625 73.4375 -26.5625 -89.0625 10.9375 -39.0625 60.9375 85.9375 -14.0625 35.9375 -64.0625 -29.6875 70.3125 -79.6875 20.3125 45.3125 -54.6875 95.3125 -4.6875 -67.1875 32.8125 -17.1875 82.8125 57.8125 -42.1875 7.8125 -92.1875 89.0625 -10.9375 39.0625 -60.9375 -85.9375 14.0625 -35.9375 64.0625 1.5625 -98.4375 51.5625 -48.4375 -23.4375 76.5625 -73.4375 26.5625 -61.71875 38.28125 -11.71875 88.28125 63.28125 -36.71875 13.28125 -86.71875 -49.21875 50.78125 -99.21875 0.78125 25.78125 -74.21875 75.78125 -24.21875 19.53125 -80.46875 69.53125 -30.46875 -5.46875 94.53125 -55.46875 44.53125 82.03125 -17.96875 32.03125 -67.96875 -92.96875 7.03125 -42.96875 57.03125 47.65625 -52.34375 97.65625 -2.34375 -27.34375 72.65625 -77.34375 22.65625 60.15625 -39.84375 10.15625 -89.84375 -64.84375 35.15625 -14.84375 85.15625 -83.59375 16.40625 -33.59375 66.40625 91.40625 -8.59375 41.40625 -58.59375 -21.09375 78.90625 -71.09375 28.90625 3.90625 -96.09375 53.90625 -46.09375 80.46875 -19.53125 30.46875 -69.53125 -94.53125 5.46875 -44.53125 55.46875 17.96875 -82.03125 67.96875 -32.03125 -7.03125 92.96875 -57.03125 42.96875 -38.28125 61.71875 -88.28125 11.71875 36.71875 -63.28125 86.71875 -13.28125 -50.78125 49.21875 -0.78125 99.21875 74.21875 -25.78125 24.21875 -75.78125 -16.40625 83.59375 -66.40625 33.59375 8.59375 -91.40625 58.59375 -41.40625 -78.90625 21.09375 -28.90625 71.09375 96.09375 -3.90625 46.09375 -53.90625 52.34375 -47.65625 2.34375 -97.65625 -72.65625 27.34375 -22.65625 77.34375 39.84375 -60.15625 89.84375 -10.15625 -35.15625 64.84375 -85.15625 14.84375 -41.015625 58.984375 -91.015625 8.984375 33.984375 -66.015625 83.984375 -16.015625 -53.515625 46.484375 -3.51562499999999 96.484375 71.484375 -28.515625 21.484375 -78.515625 77.734375 -22.265625 27.734375 -72.265625 -97.265625 2.734375 -47.265625 52.734375 15.234375 -84.765625 65.234375 -34.765625 -9.76562499999999 90.234375 -59.765625 40.234375 55.859375 -44.140625 5.859375 -94.140625 -69.140625 30.859375 -19.140625 80.859375 43.359375 -56.640625 93.359375 -6.64062499999999 -31.640625 68.359375 -81.640625 18.359375 -12.890625 87.109375 -62.890625 37.109375 12.109375 -87.890625 62.109375 -37.890625 -75.390625 24.609375 -25.390625 74.609375 99.609375 -0.390624999999986 49.609375 -50.390625 23.046875 -76.953125 73.046875 -26.953125 -1.95312499999999 98.046875 -51.953125 48.046875 85.546875 -14.453125 35.546875 -64.453125 -89.453125 10.546875 -39.453125 60.546875 -58.203125 41.796875 -8.20312499999999 91.796875 66.796875 -33.203125 16.796875 -83.203125 -45.703125 54.296875 -95.703125 4.296875 29.296875 -70.703125 79.296875 -20.703125 -86.328125 13.671875 -36.328125 63.671875 88.671875 -11.328125 38.671875 -61.328125 -23.828125 76.171875 -73.828125 26.171875 1.171875 -98.828125 51.171875 -48.828125 44.921875 -55.078125 94.921875 -5.07812499999999 -30.078125 69.921875 -80.078125 19.921875 57.421875 -42.578125 7.421875 -92.578125 -67.578125 32.421875 -17.578125 82.421875 -4.29687499999999 95.703125 -54.296875 45.703125 20.703125 -79.296875 70.703125 -29.296875 -91.796875 8.203125 -41.796875 58.203125 83.203125 -16.796875 33.203125 -66.796875 64.453125 -35.546875 14.453125 -85.546875 -60.546875 39.453125 -10.546875 89.453125 26.953125 -73.046875 76.953125 -23.046875 -48.046875 51.953125 -98.046875 1.953125 92.578125 -7.42187499999999 42.578125 -57.421875 -82.421875 17.578125 -32.421875 67.578125 5.078125 -94.921875 55.078125 -44.921875 -19.921875 80.078125 -69.921875 30.078125 -26.171875 73.828125 -76.171875 23.828125 48.828125 -51.171875 98.828125 -1.17187499999999 -63.671875 36.328125 -13.671875 86.328125 61.328125 -38.671875 11.328125 -88.671875 34.765625 -65.234375 84.765625 -15.234375 -40.234375 59.765625 -90.234375 9.765625 72.265625 -27.734375 22.265625 -77.734375 -52.734375 47.265625 -2.73437499999999 97.265625 -96.484375 3.515625 -46.484375 53.515625 78.515625 -21.484375 28.515625 -71.484375 -8.98437499999999 91.015625 -58.984375 41.015625 16.015625 -83.984375 66.015625 -33.984375 -74.609375 25.390625 -24.609375 75.390625 50.390625 -49.609375 0.390625 -99.609375 -37.109375 62.890625 -87.109375 12.890625 37.890625 -62.109375 87.890625 -12.109375 6.640625 -93.359375 56.640625 -43.359375 -18.359375 81.640625 -68.359375 31.640625 94.140625 -5.85937499999999 44.140625 -55.859375 -80.859375 19.140625 -30.859375 69.140625)
	
	# rule pruning redundancy factor: (float) [0:10000] (default 1.0)
	redundancies=(0 5000 7500 2500 3750 8750 6250 1250 5625 625 3125 8125 9375 4375 1875 6875 2812.5 7812.5 5312.5 312.5 1562.5 6562.5 9062.5 4062.5 8437.5 3437.5 937.5 5937.5 7187.5 2187.5 4687.5 9687.5 1406.25 6406.25 8906.25 3906.25 2656.25 7656.25 5156.25 156.25 7031.25 2031.25 4531.25 9531.25 8281.25 3281.25 781.25 5781.25 4218.75 9218.75 6718.75 1718.75 468.75 5468.75 7968.75 2968.75 9843.75 4843.75 2343.75 7343.75 6093.75 1093.75 3593.75 8593.75 6484.375 1484.375 3984.375 8984.375 7734.375 2734.375 234.375 5234.375 2109.375 7109.375 9609.375 4609.375 3359.375 8359.375 5859.375 859.375 9296.875 4296.875 1796.875 6796.875 5546.875 546.875 3046.875 8046.875 4921.875 9921.875 7421.875 2421.875 1171.875 6171.875 8671.875 3671.875 5078.125 78.125 2578.125 7578.125 8828.125 3828.125 1328.125 6328.125 703.125 5703.125 8203.125 3203.125 4453.125 9453.125 6953.125 1953.125 7890.625 2890.625 390.625 5390.625 6640.625 1640.625 4140.625 9140.625 3515.625 8515.625 6015.625 1015.625 2265.625 7265.625 9765.625 4765.625 9023.4375 4023.4375 1523.4375 6523.4375 5273.4375 273.4375 2773.4375 7773.4375 4648.4375 9648.4375 7148.4375 2148.4375 898.4375 5898.4375 8398.4375 3398.4375 6835.9375 1835.9375 4335.9375 9335.9375 8085.9375 3085.9375 585.9375 5585.9375 2460.9375 7460.9375 9960.9375 4960.9375 3710.9375 8710.9375 6210.9375 1210.9375 7617.1875 2617.1875 117.1875 5117.1875 6367.1875 1367.1875 3867.1875 8867.1875 3242.1875 8242.1875 5742.1875 742.1875 1992.1875 6992.1875 9492.1875 4492.1875 5429.6875 429.6875 2929.6875 7929.6875 9179.6875 4179.6875 1679.6875 6679.6875 1054.6875 6054.6875 8554.6875 3554.6875 4804.6875 9804.6875 7304.6875 2304.6875 2539.0625 7539.0625 5039.0625 39.0625 1289.0625 6289.0625 8789.0625 3789.0625 8164.0625 3164.0625 664.0625 5664.0625 6914.0625 1914.0625 4414.0625 9414.0625 351.5625 5351.5625 7851.5625 2851.5625 4101.5625 9101.5625 6601.5625 1601.5625 5976.5625 976.5625 3476.5625 8476.5625 9726.5625 4726.5625 2226.5625 7226.5625 3945.3125 8945.3125 6445.3125 1445.3125 195.3125 5195.3125 7695.3125 2695.3125 9570.3125 4570.3125 2070.3125 7070.3125 5820.3125 820.3125 3320.3125 8320.3125 1757.8125 6757.8125 9257.8125 4257.8125 3007.8125 8007.8125 5507.8125 507.8125 7382.8125 2382.8125 4882.8125 9882.8125 8632.8125 3632.8125 1132.8125 6132.8125 7792.96875 2792.96875 292.96875 5292.96875 6542.96875 1542.96875 4042.96875 9042.96875 3417.96875 8417.96875 5917.96875 917.96875 2167.96875 7167.96875 9667.96875 4667.96875 5605.46875 605.46875 3105.46875 8105.46875 9355.46875 4355.46875 1855.46875 6855.46875 1230.46875 6230.46875 8730.46875 3730.46875 4980.46875 9980.46875 7480.46875 2480.46875 8886.71875 3886.71875 1386.71875 6386.71875 5136.71875 136.71875 2636.71875 7636.71875 4511.71875 9511.71875 7011.71875 2011.71875 761.71875 5761.71875 8261.71875 3261.71875 6699.21875 1699.21875 4199.21875 9199.21875 7949.21875 2949.21875 449.21875 5449.21875 2324.21875 7324.21875 9824.21875 4824.21875 3574.21875 8574.21875 6074.21875 1074.21875 3808.59375 8808.59375 6308.59375 1308.59375 58.59375 5058.59375 7558.59375 2558.59375 9433.59375 4433.59375 1933.59375 6933.59375 5683.59375 683.59375 3183.59375 8183.59375 1621.09375 6621.09375 9121.09375 4121.09375 2871.09375 7871.09375 5371.09375 371.09375 7246.09375 2246.09375 4746.09375 9746.09375 8496.09375 3496.09375 996.09375 5996.09375 2714.84375 7714.84375 5214.84375 214.84375 1464.84375 6464.84375 8964.84375 3964.84375 8339.84375 3339.84375 839.84375 5839.84375 7089.84375 2089.84375 4589.84375 9589.84375 527.34375 5527.34375 8027.34375 3027.34375 4277.34375 9277.34375 6777.34375 1777.34375 6152.34375 1152.34375 3652.34375 8652.34375 9902.34375 4902.34375 2402.34375 7402.34375 1269.53125 6269.53125 8769.53125 3769.53125 2519.53125 7519.53125 5019.53125 19.53125 6894.53125 1894.53125 4394.53125 9394.53125 8144.53125 3144.53125 644.53125 5644.53125 4082.03125 9082.03125 6582.03125 1582.03125 332.03125 5332.03125 7832.03125 2832.03125 9707.03125 4707.03125 2207.03125 7207.03125 5957.03125 957.03125 3457.03125 8457.03125 175.78125 5175.78125 7675.78125 2675.78125 3925.78125 8925.78125 6425.78125 1425.78125 5800.78125 800.78125 3300.78125 8300.78125 9550.78125 4550.78125 2050.78125 7050.78125 2988.28125 7988.28125 5488.28125 488.28125 1738.28125 6738.28125 9238.28125 4238.28125 8613.28125 3613.28125 1113.28125 6113.28125 7363.28125 2363.28125 4863.28125 9863.28125 5253.90625 253.90625 2753.90625 7753.90625 9003.90625 4003.90625 1503.90625 6503.90625 878.90625 5878.90625 8378.90625 3378.90625 4628.90625 9628.90625 7128.90625 2128.90625 8066.40625 3066.40625 566.40625 5566.40625 6816.40625 1816.40625 4316.40625 9316.40625 3691.40625 8691.40625 6191.40625 1191.40625 2441.40625 7441.40625 9941.40625 4941.40625 6347.65625 1347.65625 3847.65625 8847.65625 7597.65625 2597.65625 97.65625 5097.65625 1972.65625 6972.65625 9472.65625 4472.65625 3222.65625 8222.65625 5722.65625 722.65625 9160.15625 4160.15625 1660.15625 6660.15625 5410.15625 410.15625 2910.15625 7910.15625 4785.15625 9785.15625 7285.15625 2285.15625 1035.15625 6035.15625 8535.15625 3535.15625)
	
	# check that all arrays are the same length (otherwise we can't run through all parameter settings)
	if [ ${#minOutcomes[*]} -ne ${#heuristics[*]} ] || [ ${#minOutcomes[*]} -ne ${#pruningConfidences[*]} ] || [ ${#minOutcomes[*]} -ne ${#redundancies[*]} ] || [ ${#minOutcomes[*]} -ne ${#fisherConfidences[*]} ]; then
		echo "Error: parameter array sizes do not match"
		rm -f *.names *.data *.test
		exit
	fi
	
	for ((position = 0; position < ${#minOutcomes[*]}; ++position))
	do
		echo "Simulation ${currentSimulation}"
		echo "=============================================="
		echo "Minimum examples per outcome: ${minOutcomes[position]}"
		
		if [ ${heuristics[position]} -eq 0 ]; then
			echo "Tree test heuristic: Gain ratio"
		else
			echo "Tree test heuristic: Gain"
		fi
		
		echo "Rule pruning confidence: ${pruningConfidences[position]}%"
		
		compareResult=$(echo "${fisherConfidences[position]} < 0.0" | bc)
		
		if [ $compareResult = 1 ]; then
			echo "Fisher pruning confidence: Not used"
		else
			echo "Fisher pruning confidence: ${fisherConfidences[position]}%"
		fi
		
		echo "Rule pruning redundancy: ${redundancies[position]}"
		
		# run 30 cross validated simulations
		runCrossValidation ${1} ${minOutcomes[position]} ${heuristics[position]} ${pruningConfidences[position]} ${fisherConfidences[position]} ${redundancies[position]}
		
		echo "=============================================="
		let currentSimulation++
	done
	
	echo "Status: Simulations completed"
	
}

# ===================================================================================================
# Function : cleanUp()
# Purpose  : Cleans up files created during simulation run
# Return   : None
# ===================================================================================================

cleanUp() {
	
	echo -n "Status: Cleaning up...  "
	
	# clean up created files
	rm -f *.names *.data *.test
	
	echo "DONE"
	
}

# ===================================================================================================
# Main script
# ===================================================================================================

export CLASSPATH=/home/wvheerden/Dropbox/Documents/Simulations/algorithms/BuildSets:/home/wvheerden/Dropbox/Documents/Simulations/algorithms/AverageRunResults:/home/wvheerden/Dropbox/Documents/Simulations/algorithms/GetRuleSetConditionCountC4_5:.

validateSystem ${1}
buildSets ${1}
runSims ${1}
cleanUp ${1}
