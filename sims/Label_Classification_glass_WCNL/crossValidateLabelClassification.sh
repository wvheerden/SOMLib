# ===================================================================================================
# Script        : crossValidateLabelClassification.sh
# Usage         : ./crossValidateLabelClassification.sh [simDirectory]
# Purpose       : Performs a cross-validated paired test on parameter data set using a neuron
#                 labeling scheme
#
# Preconditions : - All required simulation-related programs are present
#                 - Data set as directory name in dataset directory must exist and be in correct form
#                   (i.e. no header, one record per line, comma delimited, last value is class label)
# ===================================================================================================

#!/bin/bash

# ===================================================================================================
# Function : validateSystem(simDirectory)
# Purpose  : Validates components required for cross validation run (based on simDirectory)
# Return   : None
# ===================================================================================================

validateSystem() {
	
	# check for correct number of parameters
	if [ -z ${1} ]; then
		echo "Usage: ./crossValidate.sh [simDirectory]"
		exit
	fi
	
	echo "Status: Validating system..."
	echo "=============================================="
	
	# check for data directory
	echo -n "Simulation directory \"${1}\"...  "
	if [ ! -d ../../datasets/${1} ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for original data file in simulation directory
	echo -n "Data file \"${1}/original/${1}.data\"...  "
	if [ ! -f ../../datasets/${1}/original/${1}.data ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for cross validation set building script
	echo -n "Cross validation set building script...  "
	if [ ! -f ../../algorithms/BuildSets/BuildSets.class ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK data conversion script
	echo -n "Conversion script \"${1}/convert_som.awk\"...  "
	if [ ! -f ./../../datasets/${1}/convert_som.awk ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK names script
	echo -n "Names script \"${1}/names_som.sh\"...  "
	if [ ! -f ./../../datasets/${1}/names_som.sh ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK initialisation program
	echo -n "SOM initialisation program...  "
	if [ ! -f ../../algorithms/SOM_PAK/lininit ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK training program
	echo -n "SOM training program...  "
	if [ ! -f ../../algorithms/SOM_PAK/vsom ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for example-centric neuron labeling program
	echo -n "Example-centric neuron labeling program...  "
	if [ ! -f ./../../algorithms/ExampleCentricNeuron/classify ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for example-centric K-means cluster labeling program
	echo -n "Example-centric K-means cluster labeling program...  "
	if [ ! -f ./../../algorithms/ExampleCentricClusterKMeans/classify ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for example-centric Ward cluster labeling program
	echo -n "Example-centric Ward cluster labeling program...  "
	if [ ! -f ./../../algorithms/ExampleCentricClusterWard/classify ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for weight-centric neuron labeling program
	echo -n "Weight-centric neuron labeling program...  "
	if [ ! -f ./../../algorithms/WeightCentricNeuron/classify ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
   # check for hybrid example-centric weight-centric neuron labeling program
	echo -n "Hybrid example-centric weight-centric neuron labeling program...  "
	if [ ! -f ./../../algorithms/HybridExampleCentricWeightCentricNeuron/classify ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
   
	#check for results averaging program
	echo -n "Results averaging program...  "
	if [ ! -f ./../../algorithms/AverageRunResults/AverageLabelClassificationResults.class ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	echo "=============================================="
	echo "Status: System OK..."
	
}

# ===================================================================================================
# Function : buildSets(simDirectory)
# Purpose  : Builds data sets required for cross validation simulations (based on simDirectory)
# Return   : None
# ===================================================================================================

buildSets() {
	
	echo "Status: Performing cross validation set builds"
	
	# build raw training and test sets (must still be converted to SOM_PAK format)
	if [ ${1} == "ionosphere" ]; then
		echo "Status: Building set for IONOSPHERE database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	elif [ ${1} == "iris" ]; then
		echo "Status: Building set for IRIS database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	elif [ ${1} == "monks1" ]; then
		echo "Status: Building set for MONKS1 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	elif [ ${1} == "monks2" ]; then
		echo "Status: Building set for MONKS2 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	elif [ ${1} == "monks3" ]; then
		echo "Status: Building set for MONKS3 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 5
	elif [ ${1} == "pima" ]; then
		echo "Status: Building set for PIMA database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
   elif [ ${1} == "glass" ]; then
		echo "Status: Building set for GLASS database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	else
		echo "Status: Unrecognised set"
		echo "Status: Building default"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	fi
	
	echo "=============================================="
	echo "Status: Cross validation sets built"
	
	echo -n "Status: Performing data set conversions...  "
	
	# create SOM names file
	./../../datasets/${1}/names_som.sh > ${1}.names
	
	# perform conversion of data set from raw form to SOM_PAK format, creating [simulation].data
	for ((dataset = 0; dataset < 30; ++dataset))
	do
		gawk -f ./../../datasets/${1}/convert_som.awk ${1}.data.raw.${dataset}.train > ${1}.data.${dataset}.som.train
		rm -f ${1}.data.raw.${dataset}.train
		gawk -f ./../../datasets/${1}/convert_som.awk ${1}.data.raw.${dataset}.test > ${1}.data.${dataset}.som.test
		rm -f ${1}.data.raw.${dataset}.test
	done
	
	echo "DONE"
	
}

# ===================================================================================================
# Function : runCrossValidation(simDirectory, neuronLabelingMethod, mapDim, learningRate,
#            learningRateDecay, kernelWidth, radiusDecay)
# Purpose  : Performs a single cross validation using provided parameters
# Return   : None
# ===================================================================================================

runCrossValidation () {
	
	# get description string for neuron labeling method (0 = neuron; 1 = K-means cluster; 2 = Ward cluster; 3 = weight-centric; 4 = hybridnwc)
	if [ ${2} -eq 0 ]; then
		neuronLabelingMethodDescription="neuron"
	elif [ ${2} -eq 1 ]; then
		neuronLabelingMethodDescription="k-means"
	elif [ ${2} -eq 2 ]; then
		neuronLabelingMethodDescription="ward"
	elif [ ${2} -eq 3 ]; then
		neuronLabelingMethodDescription="weight-centric"
	fi
	
	if [ -f label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy ]; then
		rm -f label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy
	fi
	
	if [ -f label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error ]; then
		rm -f label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error
	fi
	
	for ((simNum = 0; simNum < 30; ++simNum))
	do
		echo -n "${simNum} "
		
		# execute SOM_PAK
		sleep 1
		./../../algorithms/SOM_PAK/vsom -din ${1}.data.${simNum}.som.train -vin ${1}.data.${simNum}.som.train -cin ${1}.${3}.${simNum}.map -cout ${1}.${3}.${simNum}.map.out -lrate ${4} -lratedecay ${5} -radius ${6} -radiusdecay ${7} -rand 0 >> /dev/null 2> /dev/null
		
		# execute appropriate neuron labeling algorithm on SOM_PAK output, and generate classification accuracy and error output
		sleep 1
		if [ ${2} -eq 0 ]; then
			./../../algorithms/ExampleCentricNeuron/classify ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.data.${simNum}.som.test ${1}.names label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error > /dev/null
		elif [ ${2} -eq 1 ]; then
			./../../algorithms/ExampleCentricClusterKMeans/classify ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.data.${simNum}.som.test ${1}.names label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error > /dev/null
		elif [ ${2} -eq 2 ]; then
			./../../algorithms/ExampleCentricClusterWard/classify ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.data.${simNum}.som.test ${1}.names label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error > /dev/null
		elif [ ${2} -eq 3 ]; then
			./../../algorithms/WeightCentricNeuron/classify ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.data.${simNum}.som.test ${1}.names label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error > /dev/null
      elif [ ${2} -eq 4 ]; then
			./../../algorithms/HybridExampleCentricWeightCentricNeuron/classify ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.data.${simNum}.som.test ${1}.names label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error > /dev/null
		fi
		
		# clean up
		rm -f *.map.out
	done
	
	# calculate confidence intervals
	java AverageLabelClassificationResults -error label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error label-classification_${1}_${neuronLabelingMethodDescription}.error.summary
	
	echo ""
	
}

# ===================================================================================================
# Function : runSims(simDirectory)
# Purpose  : Runs simulations for specified simDirectory [assumes built data sets]
# Return   : None
# ===================================================================================================

runSims () {
	
	echo "Status: Running simulations"
	echo "=============================================="
	
	# number of current simulation
	currentSimulation=1
	
	# neuron labeling method (0 = neuron; 1 = K-means cluster; 2 = Ward cluster; 3 = weight-centric; 4 = hybrid neuron-centric weight-centric)
	neuronLabelingMethod=3
	
   # SOM map dimension: (integer) [2:inf] (No default)
	mapDimensions=(2 8 11 5 7 13 10 4 4 10 13 7 6 12 9 3 3 9 12 6 8 14 11 5 4 10 13 7 5 11 8 2 3 9 12 6 7 13 10 4 5 11 14 8 6 12 9 3 3 9 12 6 7 13 10 4 4 10 13 7 5 11 8 2 2 8 11 5 7 13 10 4 5 11 14 8 6 12 9 3 3 9 12 6 8 14 11 5 4 10 13 7 6 12 9 3 2 8 11 5 7 13 10 4 5 11 14 8 6 12 9 3 3 9 12 6 7 13 10 4 4 10 13 7 5 11 8 2 2 8 11 5 7 13 10 4 4 10 13 7 6 12 9 3 3 9 12 6 8 14 11 5 4 10 13 7 6 12 9 3 3 9 12 6 7 13 10 4 5 11 14 8 6 12 9 3 3 9 12 6 8 14 11 5 4 10 13 7 5 11 8 2 2 8 11 5 7 13 10 4 4 10 13 7 6 12 9 3 3 9 12 6 8 14 11 5 4 10 13 7 6 12 9 3 2 8 11 5 7 13 10 4 5 11 14 8 6 12 9 3 3 9 12 6 7 13 10 4 4 10 13 7 5 11 8 2 2 8 11 5 7 13 10 4 4 10 13 7 6 12 9 3 3 9 12 6 8 14 11 5 4 10 13 7 5 11 8 2 3 9 12 6 7 13 10 4 5 11 14 8 6 12 9 3 3 9 12 6 8 14 11 5 4 10 13 7 5 11 8 2 2 8 11 5 7 13 10 4 5 11 14 8 6 12 9 3 3 9 12 6 8 14 11 5 4 10 13 7 6 12 9 3 3 9 12 6 7 13 10 4 5 11 14 8 6 12 9 3 3 9 12 6 7 13 10 4 4 10 13 7 5 11 8 2 2 8 11 5 7 13 10 4 4 10 13 7 6 12 9 3 3 9 12 6 8 14 11 5 4 10 13 7 5 11 8 2 3 9 12 6 7 13 10 4 5 11 14 8 6 12 9 3 3 9 12 6 8 14 11 5 4 10 13 7 5 11 8 2 2 8 11 5 7 13 10 4 4 10 13 7 6 12 9 3 3 9 12 6 8 14 11 5 4 10 13 7 6 12 9 3 2 8 11 5 7 13 10 4 5 11 14 8 6 12 9 3 3 9 12 6 7 13 10 4 4 10 13 7 5 11 8 2)
	
	# SOM initial learning rate (floating point) [0.0:inf]
	learningRates=(0 5 2.5 7.5 3.75 8.75 1.25 6.25 3.125 8.125 0.625 5.625 1.875 6.875 4.375 9.375 4.6875 9.6875 2.1875 7.1875 0.9375 5.9375 3.4375 8.4375 1.5625 6.5625 4.0625 9.0625 2.8125 7.8125 0.3125 5.3125 2.65625 7.65625 0.15625 5.15625 1.40625 6.40625 3.90625 8.90625 0.78125 5.78125 3.28125 8.28125 4.53125 9.53125 2.03125 7.03125 2.34375 7.34375 4.84375 9.84375 3.59375 8.59375 1.09375 6.09375 4.21875 9.21875 1.71875 6.71875 0.46875 5.46875 2.96875 7.96875 3.984375 8.984375 1.484375 6.484375 0.234375 5.234375 2.734375 7.734375 2.109375 7.109375 4.609375 9.609375 3.359375 8.359375 0.859375 5.859375 1.171875 6.171875 3.671875 8.671875 4.921875 9.921875 2.421875 7.421875 3.046875 8.046875 0.546875 5.546875 1.796875 6.796875 4.296875 9.296875 1.328125 6.328125 3.828125 8.828125 2.578125 7.578125 0.078125 5.078125 4.453125 9.453125 1.953125 6.953125 0.703125 5.703125 3.203125 8.203125 3.515625 8.515625 1.015625 6.015625 2.265625 7.265625 4.765625 9.765625 0.390625 5.390625 2.890625 7.890625 4.140625 9.140625 1.640625 6.640625 3.3203125 8.3203125 0.8203125 5.8203125 2.0703125 7.0703125 4.5703125 9.5703125 0.1953125 5.1953125 2.6953125 7.6953125 3.9453125 8.9453125 1.4453125 6.4453125 1.7578125 6.7578125 4.2578125 9.2578125 3.0078125 8.0078125 0.5078125 5.5078125 4.8828125 9.8828125 2.3828125 7.3828125 1.1328125 6.1328125 3.6328125 8.6328125 0.6640625 5.6640625 3.1640625 8.1640625 4.4140625 9.4140625 1.9140625 6.9140625 2.5390625 7.5390625 0.0390625 5.0390625 1.2890625 6.2890625 3.7890625 8.7890625 4.1015625 9.1015625 1.6015625 6.6015625 0.3515625 5.3515625 2.8515625 7.8515625 2.2265625 7.2265625 4.7265625 9.7265625 3.4765625 8.4765625 0.9765625 5.9765625 1.9921875 6.9921875 4.4921875 9.4921875 3.2421875 8.2421875 0.7421875 5.7421875 3.8671875 8.8671875 1.3671875 6.3671875 0.1171875 5.1171875 2.6171875 7.6171875 2.9296875 7.9296875 0.4296875 5.4296875 1.6796875 6.6796875 4.1796875 9.1796875 1.0546875 6.0546875 3.5546875 8.5546875 4.8046875 9.8046875 2.3046875 7.3046875 4.6484375 9.6484375 2.1484375 7.1484375 0.8984375 5.8984375 3.3984375 8.3984375 1.5234375 6.5234375 4.0234375 9.0234375 2.7734375 7.7734375 0.2734375 5.2734375 0.5859375 5.5859375 3.0859375 8.0859375 4.3359375 9.3359375 1.8359375 6.8359375 3.7109375 8.7109375 1.2109375 6.2109375 2.4609375 7.4609375 4.9609375 9.9609375 4.98046875 9.98046875 2.48046875 7.48046875 1.23046875 6.23046875 3.73046875 8.73046875 1.85546875 6.85546875 4.35546875 9.35546875 3.10546875 8.10546875 0.60546875 5.60546875 0.29296875 5.29296875 2.79296875 7.79296875 4.04296875 9.04296875 1.54296875 6.54296875 3.41796875 8.41796875 0.91796875 5.91796875 2.16796875 7.16796875 4.66796875 9.66796875 2.32421875 7.32421875 4.82421875 9.82421875 3.57421875 8.57421875 1.07421875 6.07421875 4.19921875 9.19921875 1.69921875 6.69921875 0.44921875 5.44921875 2.94921875 7.94921875 2.63671875 7.63671875 0.13671875 5.13671875 1.38671875 6.38671875 3.88671875 8.88671875 0.76171875 5.76171875 3.26171875 8.26171875 4.51171875 9.51171875 2.01171875 7.01171875 0.99609375 5.99609375 3.49609375 8.49609375 4.74609375 9.74609375 2.24609375 7.24609375 2.87109375 7.87109375 0.37109375 5.37109375 1.62109375 6.62109375 4.12109375 9.12109375 3.80859375 8.80859375 1.30859375 6.30859375 0.05859375 5.05859375 2.55859375 7.55859375 1.93359375 6.93359375 4.43359375 9.43359375 3.18359375 8.18359375 0.68359375 5.68359375 3.65234375 8.65234375 1.15234375 6.15234375 2.40234375 7.40234375 4.90234375 9.90234375 0.52734375 5.52734375 3.02734375 8.02734375 4.27734375 9.27734375 1.77734375 6.77734375 1.46484375 6.46484375 3.96484375 8.96484375 2.71484375 7.71484375 0.21484375 5.21484375 4.58984375 9.58984375 2.08984375 7.08984375 0.83984375 5.83984375 3.33984375 8.33984375 1.66015625 6.66015625 4.16015625 9.16015625 2.91015625 7.91015625 0.41015625 5.41015625 4.78515625 9.78515625 2.28515625 7.28515625 1.03515625 6.03515625 3.53515625 8.53515625 3.22265625 8.22265625 0.72265625 5.72265625 1.97265625 6.97265625 4.47265625 9.47265625 0.09765625 5.09765625 2.59765625 7.59765625 3.84765625 8.84765625 1.34765625 6.34765625 4.31640625 9.31640625 1.81640625 6.81640625 0.56640625 5.56640625 3.06640625 8.06640625 2.44140625 7.44140625 4.94140625 9.94140625 3.69140625 8.69140625 1.19140625 6.19140625 0.87890625 5.87890625 3.37890625 8.37890625 4.62890625 9.62890625 2.12890625 7.12890625 2.75390625 7.75390625 0.25390625 5.25390625 1.50390625 6.50390625 4.00390625 9.00390625 2.98828125 7.98828125 0.48828125 5.48828125 1.73828125 6.73828125 4.23828125 9.23828125 1.11328125 6.11328125 3.61328125 8.61328125 4.86328125 9.86328125 2.36328125 7.36328125 2.05078125 7.05078125 4.55078125 9.55078125 3.30078125 8.30078125 0.80078125 5.80078125 3.92578125 8.92578125 1.42578125 6.42578125 0.17578125 5.17578125 2.67578125 7.67578125 0.33203125 5.33203125 2.83203125 7.83203125 4.08203125 9.08203125 1.58203125 6.58203125 3.45703125 8.45703125 0.95703125 5.95703125 2.20703125 7.20703125 4.70703125 9.70703125 4.39453125 9.39453125 1.89453125 6.89453125 0.64453125 5.64453125 3.14453125 8.14453125 1.26953125 6.26953125 3.76953125 8.76953125 2.51953125 7.51953125 0.01953125 5.01953125)
	
	# SOM learning rate decay constant (floating point) (0.0:inf]
	learningRateDecays=(0.000000001 750.0000000005 375.00000000075 1125.00000000025 937.500000000375 187.500000000875 1312.50000000013 562.500000000625 1406.25000000006 656.250000000563 1031.25000000031 281.250000000813 468.750000000687 1218.75000000019 93.7500000009375 843.750000000438 703.125000000531 1453.12500000003 328.125000000781 1078.12500000028 1265.62500000016 515.625000000656 890.625000000406 140.625000000906 796.875000000469 46.8750000009687 1171.87500000022 421.875000000719 234.375000000844 984.375000000344 609.375000000594 1359.37500000009 1054.6875000003 304.687500000797 1429.68750000005 679.687500000547 117.187500000922 867.187500000422 492.187500000672 1242.18750000017 398.437500000734 1148.43750000023 23.4375000009844 773.437500000484 1335.93750000011 585.937500000609 960.937500000359 210.937500000859 1195.3125000002 445.312500000703 820.312500000453 70.3125000009531 632.812500000578 1382.81250000008 257.812500000828 1007.81250000033 351.562500000766 1101.56250000027 726.562500000516 1476.56250000002 914.062500000391 164.062500000891 1289.06250000014 539.062500000641 1230.46875000018 480.46875000068 855.46875000043 105.46875000093 667.968750000555 1417.96875000005 292.968750000805 1042.9687500003 199.218750000867 949.218750000367 574.218750000617 1324.21875000012 761.718750000492 11.7187500009922 1136.71875000024 386.718750000742 996.093750000336 246.093750000836 1371.09375000009 621.093750000586 58.5937500009609 808.593750000461 433.593750000711 1183.59375000021 527.343750000648 1277.34375000015 152.343750000898 902.343750000398 1464.84375000002 714.843750000523 1089.84375000027 339.843750000773 597.656250000602 1347.6562500001 222.656250000852 972.656250000352 1160.15625000023 410.156250000727 785.156250000477 35.1562500009766 878.906250000414 128.906250000914 1253.90625000016 503.906250000664 316.406250000789 1066.40625000029 691.406250000539 1441.40625000004 175.781250000883 925.781250000383 550.781250000633 1300.78125000013 1113.28125000026 363.281250000758 1488.28125000001 738.281250000508 1394.53125000007 644.53125000057 1019.53125000032 269.53125000082 457.031250000695 1207.0312500002 82.0312500009453 832.031250000445 439.453125000707 1189.45312500021 64.453125000957 814.453125000457 1376.95312500008 626.953125000582 1001.95312500033 251.953125000832 1095.70312500027 345.70312500077 1470.70312500002 720.70312500052 158.203125000895 908.203125000395 533.203125000644 1283.20312500014 298.828125000801 1048.8281250003 673.828125000551 1423.82812500005 861.328125000426 111.328125000926 1236.32812500018 486.328125000676 1142.57812500024 392.578125000738 767.578125000488 17.5781250009883 580.078125000613 1330.07812500011 205.078125000863 955.078125000363 1494.140625 744.140625000504 1119.14062500025 369.140625000754 556.640625000629 1306.64062500013 181.640625000879 931.640625000379 87.8906250009414 837.890625000441 462.890625000691 1212.89062500019 1025.39062500032 275.390625000816 1400.39062500007 650.390625000566 791.015625000473 41.0156250009727 1166.01562500022 416.015625000723 228.515625000848 978.515625000348 603.515625000598 1353.5156250001 697.265625000535 1447.26562500004 322.265625000785 1072.26562500029 1259.76562500016 509.76562500066 884.76562500041 134.76562500091 896.484375000402 146.484375000902 1271.48437500015 521.484375000652 333.984375000777 1083.98437500028 708.984375000527 1458.98437500003 615.23437500059 1365.23437500009 240.23437500084 990.23437500034 1177.73437500022 427.734375000715 802.734375000465 52.7343750009648 1318.35937500012 568.359375000621 943.359375000371 193.359375000871 380.859375000746 1130.85937500025 5.85937500099609 755.859375000496 99.6093750009336 849.609375000434 474.609375000684 1224.60937500018 1037.10937500031 287.109375000809 1412.10937500006 662.109375000559 263.671875000824 1013.67187500032 638.671875000574 1388.67187500007 826.171875000449 76.1718750009492 1201.1718750002 451.171875000699 1294.92187500014 544.921875000637 919.921875000387 169.921875000887 732.421875000512 1482.42187500001 357.421875000762 1107.42187500026 498.046875000668 1248.04687500017 123.046875000918 873.046875000418 1435.54687500004 685.546875000543 1060.54687500029 310.546875000793 966.796875000355 216.796875000855 1341.79687500011 591.796875000606 29.2968750009805 779.29687500048 404.29687500073 1154.29687500023 1016.60156250032 266.601562500822 1391.60156250007 641.601562500572 79.1015625009473 829.101562500447 454.101562500697 1204.1015625002 547.851562500635 1297.85156250013 172.851562500885 922.851562500385 1485.35156250001 735.35156250051 1110.35156250026 360.35156250076 1250.97656250017 500.976562500666 875.976562500416 125.976562500916 688.476562500541 1438.47656250004 313.476562500791 1063.47656250029 219.726562500853 969.726562500354 594.726562500604 1344.7265625001 782.226562500479 32.2265625009785 1157.22656250023 407.226562500729 149.4140625009 899.4140625004 524.41406250065 1274.41406250015 1086.91406250028 336.914062500775 1461.91406250003 711.914062500525 1368.16406250009 618.164062500588 993.164062500338 243.164062500838 430.664062500713 1180.66406250021 55.6640625009629 805.664062500463 571.289062500619 1321.28906250012 196.289062500869 946.289062500369 1133.78906250024 383.789062500744 758.789062500494 8.78906250099414 852.539062500432 102.539062500932 1227.53906250018 477.539062500682 290.039062500807 1040.03906250031 665.039062500557 1415.03906250006 747.070312500502 1497.0703125 372.070312500752 1122.07031250025 1309.57031250013 559.570312500627 934.570312500377 184.570312500877 840.82031250044 90.8203125009395 1215.82031250019 465.82031250069 278.320312500814 1028.32031250031 653.320312500564 1403.32031250006 43.9453125009707 793.945312500471 418.945312500721 1168.94531250022 981.445312500346 231.445312500846 1356.4453125001 606.445312500596 1450.19531250003 700.195312500533 1075.19531250028 325.195312500783 512.695312500658 1262.69531250016 137.695312500908 887.695312500408 1192.38281250021 442.382812500705 817.382812500455 67.3828125009551 629.88281250058 1379.88281250008 254.88281250083 1004.88281250033 348.632812500768 1098.63281250027 723.632812500518 1473.63281250002 911.132812500393 161.132812500893 1286.13281250014 536.132812500643 1051.7578125003 301.757812500799 1426.75781250005 676.757812500549 114.257812500924 864.257812500424 489.257812500674 1239.25781250017 395.507812500736 1145.50781250024 20.5078125009863 770.507812500486 1333.00781250011 583.007812500611 958.007812500361 208.007812500861 1350.5859375001 600.5859375006 975.58593750035 225.58593750085 413.085937500725 1163.08593750022 38.0859375009746 788.085937500475 131.835937500912 881.835937500412 506.835937500662 1256.83593750016 1069.33593750029 319.335937500787 1444.33593750004 694.335937500537 928.710937500381 178.710937500881 1303.71093750013 553.710937500631 366.210937500756 1116.21093750026 741.210937500506 1491.21093750001 647.460937500568 1397.46093750007 272.460937500818 1022.46093750032 1209.96093750019 459.960937500693 834.960937500443 84.9609375009434 483.398437500678 1233.39843750018 108.398437500928 858.398437500428 1420.89843750005 670.898437500553 1045.8984375003 295.898437500803 952.148437500365 202.148437500865 1327.14843750012 577.148437500615 14.6484375009902 764.64843750049 389.64843750074 1139.64843750024 249.023437500834 999.023437500334 624.023437500584 1374.02343750008 811.523437500459 61.523437500959 1186.52343750021 436.523437500709 1280.27343750015 530.273437500646 905.273437500397 155.273437500896 717.773437500522 1467.77343750002 342.773437500772 1092.77343750027 307.617187500795 1057.61718750029 682.617187500545 1432.61718750005 870.11718750042 120.11718750092 1245.11718750017 495.11718750067 1151.36718750023 401.367187500732 776.367187500482 26.3671875009824 588.867187500607 1338.86718750011 213.867187500857 963.867187500357 448.242187500701 1198.2421875002 73.2421875009512 823.242187500451 1385.74218750008 635.742187500576 1010.74218750033 260.742187500826 1104.49218750026 354.492187500764 1479.49218750001 729.492187500514 166.992187500889 916.992187500389 541.992187500639 1291.99218750014 752.929687500498 2.92968750099805 1127.92968750025 377.929687500748 190.429687500873 940.429687500373 565.429687500623 1315.42968750012 659.179687500561 1409.17968750006 284.179687500811 1034.17968750031 1221.67968750019 471.679687500686 846.679687500436 96.6796875009356 1456.05468750003 706.054687500529 1081.05468750028 331.054687500779 518.554687500654 1268.55468750015 143.554687500904 893.554687500404 49.8046875009668 799.804687500467 424.804687500717 1174.80468750022 987.304687500342 237.304687500842 1362.30468750009 612.304687500592)
	
	# SOM initial kernel width (floating point) (0.0:inf]
	kernelWidths=(0.000000002 3.3250000035 2.3750000075 3.56250000125 4.98750000075 3.918750006875 4.750000003 0.356250002625 1.66250000225 8.0156250005625 1.9593750089375 3.918750001875 2.6718750021875 0.593750009375 6.1750000015 0.8906250020625 1.87031250103125 1.18750000675 8.6093750009375 1.92968750296875 1.87031250503125 8.906250002625 0.26718750871875 2.018750001875 3.206250000625 2.93906250590625 6.20468750446875 0.5343750054375 1.03906250390625 6.8281250028125 3.11718750371875 1.8406250000625 1.03906250090625 0.311718756671875 7.57031250203125 1.41015625351563 2.40468750346875 9.63359375085938 1.46953125745313 2.5531250013125 3.7406250000625 4.14140625464063 8.3718750031875 1.55859375535938 0.62343750534375 6.36796875429688 2.731250005125 2.44921875042187 0.400781252578125 4.868750002875 3.71093750609375 4.23046875054688 5.09140625164063 3.0281250088125 4.40859375435938 0.0593750039375 0.935156252015625 6.293750001375 0.816406260140625 3.29531250253125 3.33984375148438 1.92968750796875 6.33828125032813 0.86093750109375 1.58828125032813 2.23398437964844 5.56640625414063 0.408203129570313 1.20234375473438 7.42929687817969 3.5031250043125 2.73867187511719 2.46406250140625 1.26914063266406 10.2421875012188 2.64960937921094 1.29882812863281 7.34765625226563 0.1781250078125 1.49179687642969 1.40273437652344 7.5406250000625 2.53085938333594 4.23046875154688 4.10429687767969 1.33593751059375 7.41445312619531 1.39531250253125 0.20781250378125 4.74257812900781 3.18398438264844 4.58671875117188 4.41601562535156 4.08203125570313 5.1656250025625 0.512109377460938 0.667968751296875 5.66289062603906 0.964843758984375 2.85742187699219 4.14140625164063 2.36757813350781 8.34960937521094 1.81093750209375 0.62343750334375 5.67773437802344 4.72031250703125 6.07851562560156 4.49765625126563 3.02070313282031 4.0968750036875 0.111328127882813 2.69414062516406 3.3843750044375 6.60546875304688 0.927734379023438 0.400781255578125 5.95976562972656 2.73867188111719 3.11718750071875 1.44726562647656 0.0593750079375 7.91914062766406 1.46953125445313 1.81835937808594 8.38671875117188 0.883203131070312 1.20234375073438 0.363671876617187 4.59785156466016 4.19335938058594 4.47167968779297 4.65351562610156 3.30644532001953 4.30468750346875 0.189257815300781 0.964843752984375 6.44589843971484 0.0408203234570313 2.87226562797656 2.98730468935547 1.22460938371094 6.67968750096875 1.07988281436328 1.70332031370703 0.74218750721875 8.85800781417578 1.98164062891406 3.14316406619141 11.0882812503281 1.90371094449609 2.74609375110938 3.45859375035937 3.50683594280859 6.89863281623828 0.912890630039063 0.166992192324219 5.08398437964844 1.89628906750391 1.49179687542969 2.10410156328516 1.81093750609375 9.38867187511719 2.31933594005859 2.07070312882031 9.02128906400391 0.968554695480469 2.33046875154688 3.04296875079687 2.57167969379297 6.27890625539063 0.337695319144531 1.00195312994531 7.06191406606641 3.23593750459375 2.63847656272266 0.233789065253906 4.42343750334375 3.15429688167969 3.95214843833984 6.36425781280078 5.21015625651563 6.04511719013672 0.786718753171875 1.49921875242188 7.64824218844922 1.51035157191016 3.67382812713281 2.46777343990234 0.185546884804688 5.11738281411328 0.512109376460938 1.71445312519531 2.67558594168359 6.19726562847656 0.723632816738281 0.155859380835937 5.51074219269922 2.10781250578125 2.21542968816797 2.24140625164063 0.768164070691406 9.57421875192188 2.25996094212109 2.20800781517578 9.16601562535156 1.63281250628125 2.03730468835547 0.879492189574219 6.14531250153125 0.612304697855469 3.18398437764844 4.54589843971484 2.09296875979688 7.98222656309766 1.64765625226563 0.935156253015625 6.37910156478516 5.18417969304297 5.67773437502344 4.13769531314453 3.52539063128906 4.72031250303125 0.345117190136719 0.794140626164063 6.10449218807422 1.59570313332031 3.17285156416016 3.09492187774219 0.449023448027344 6.77988281436328 1.11328125282813 0.400781253578125 5.17675781605078 4.05234375773438 5.68886718851172 4.65722656259766 4.56445313019531 5.55156250215625 0.656835939808594 2.17089843821484 1.98906250590625 4.86132812988281 0.0556640674414063 0.779296880179688 6.65371094149609 3.30644531801953 3.36953125045313 1.99277343840234 1.51406250640625 9.91933593805859 2.56054687830469 1.54003906587891 7.83007812675781 0.493554693980469 1.09101562585156 0.560351563910156 5.28623047018555 0.426757822050781 2.58837890852539 3.81855468948047 1.77568360288086 6.99140625064063 1.19677734549023 0.883203128070313 6.2622070336582 5.04130859944336 5.59980468760547 4.07275390696289 3.39550781892578 4.61640625314063 0.306152346427734 2.53271484408398 2.95390625489063 6.06738281611328 0.658691410556641 0.0909179756542969 5.85585938083594 2.25439453787695 2.90195312594531 2.18945312669531 0.651269539564453 8.63349609566211 1.85917969154297 2.14306640899414 9.03613281298828 1.3377929743418 1.33222656309766 2.22099609441211 2.12265625576563 5.02832031720703 0.139160161103516 0.879492192574219 6.83740234755273 3.45673828661133 3.43632812538281 2.72382812613281 1.85361328829883 11.0214843753984 3.10419922248242 1.94824219144922 8.79677734549024 0.697656257265625 1.68662109497461 1.24130859544336 7.11015625051563 1.76269532064453 3.25634765782227 3.72763672182617 0.690234386273438 6.93017578295508 1.18007812775781 0.350683596380859 4.73515625301563 3.89833985064649 4.97636718826172 4.74072265625977 4.73144531751953 4.97451172051367 0.471289064003906 1.16894531326953 0.76630859994336 8.21972656384766 1.73486328442383 2.79433594055859 10.3479492188574 2.05400391308789 2.81289062603906 3.52539062528906 3.65712891140039 7.72617187886719 1.18193359950586 0.250488285986328 5.25097656697266 2.30078125557813 2.2877929693418 0.595605471123047 5.38828125232813 4.79638672470117 5.4662109377461 5.54599609491211 3.80742188299219 4.99306640999414 0.319140628664062 1.03164062791406 6.59619140830664 0.224511729513672 2.97246094037109 3.07080078301758 1.39160157103516 6.81328125082813 1.12998047056055 0.129882814363281 3.77958984677148 3.02441406931641 3.8872070321582 5.37714843783984 4.63310547487305 5.92822265900977 0.734765628226563 1.44726562747656 7.53134765732227 1.49179688542969 4.19521484633398 2.88339844046484 0.0612304796855469 5.74453125195313 0.729199220982422 2.06513671957617 1.70703125620313 9.25878906275391 2.25439453387695 2.32490234830273 9.68554687680469 0.851660164353516 2.27851562660156 2.24326171938867 2.18203125570313 5.6127929738418 0.211523443277344 0.770019535439453 6.29003906587891 2.74052734786523 1.73300781267578 0.909179688542969 6.50712890640039 2.17089844521484 3.46044922010742 3.44003906487891 1.08173829111133 6.48671875117188 1.00751953318945 0.155859378835938 4.62568359788086 3.04111328904883 4.50878906375391 4.35107421916992 3.95214844333984 5.06171875267188 0.473144533751953 2.3434570317832 2.44921875542188 5.98017578595508 0.411914068066406 1.31181641186914 7.94882812863281 3.82412109872461 3.59960937521094 2.41210937646094 1.15224610153711 9.24580078251758 2.19316406619141 1.23388672245117 7.21777343990234 0.0649414131816406 0.968554688480469 2.74423828136133 3.51796875429688 6.77246094037109 1.01123047268555 0.500976567972656 6.1434570357832 2.88896484970898 3.18398437564844 1.99648437689844 0.217089852521484 8.83945312769531 1.83134766132227 2.28222656609766 9.4090820323457 1.14296875679688 1.85361328229883 1.05205078314258 6.60546875104688 1.13183594630859 2.9409179706543 4.94853515804102 2.78320313407031 8.49990234380274 1.87773437702344 0.690234378273438 5.82802734661523 4.51064453750195 5.31035156291016 3.8315429697168 2.91308594443359 3.70166015935352 0.107617189386719 1.28027343815234 1.1559570370332 8.77636718826172 2.01318359663086 1.70332031670703 8.34775390846289 0.371093757609375 1.56416015760352 3.27304687555469 3.08935547449805 6.96914062966406 0.740332037470703 1.12255859756836 6.99511719013672 3.69609375410938 2.81103515629102 0.0500976591972656 3.93359375385938 2.79619141430664 4.37519531389453 5.93564453200195 4.47539063228906 5.4940429719668 0.541796878429688 1.72929687717969 8.1659179691543 2.14306641499414 4.01894531426953 2.75537109584961 0.760742196699219 5.52001953243945 0.627148438839844 0.241210939246094 4.16923828386133 3.58105469373047 4.16552734436524 4.28613281398828 2.63291016447852 4.29169922323242 0.0074218789921875 1.19492187774219 6.96357422041992 0.734765636226563 3.75361328429883 3.27490234530273 1.79980469560547 7.13984375048438 1.25244140793164 1.51962890765039 0.252343757734375 7.44042968966797 1.34521484733398 2.32675781605078 9.49072265725977 1.35263672632617 2.50117187636719 2.76650390633789 3.57734375423438 7.53134765932227 1.25800781717578 0.454589848271484 5.65917969154297 2.29892578583008 1.60683593780859)
	
	# SOM radius decay constant (floating point) (0.0:inf]
	kernelWidthDecays=(0.000000001 50.0000000005 75.00000000025 25.00000000075 37.500000000625 87.500000000125 62.500000000375 12.500000000875 56.2500000004375 6.2500000009375 31.2500000006875 81.2500000001875 93.7500000000625 43.7500000005625 18.7500000008125 68.7500000003125 28.1250000007187 78.1250000002188 53.1250000004687 3.12500000096875 15.6250000008438 65.6250000003437 90.6250000000938 40.6250000005938 84.3750000001563 34.3750000006562 9.37500000090625 59.3750000004062 71.8750000002813 21.8750000007812 46.8750000005313 96.8750000000313 14.0625000008594 64.0625000003594 89.0625000001094 39.0625000006094 26.5625000007344 76.5625000002344 51.5625000004844 1.56250000098438 70.3125000002969 20.3125000007969 45.3125000005469 95.3125000000469 82.8125000001719 32.8125000006719 7.81250000092188 57.8125000004219 42.1875000005781 92.1875000000781 67.1875000003281 17.1875000008281 4.68750000095313 54.6875000004531 79.6875000002031 29.6875000007031 98.4375000000156 48.4375000005156 23.4375000007656 73.4375000002656 60.9375000003906 10.9375000008906 35.9375000006406 85.9375000001406 64.8437500003516 14.8437500008516 39.8437500006016 89.8437500001016 77.3437500002266 27.3437500007266 2.34375000097656 52.3437500004766 21.0937500007891 71.0937500002891 96.0937500000391 46.0937500005391 33.5937500006641 83.5937500001641 58.5937500004141 8.59375000091406 92.9687500000703 42.9687500005703 17.9687500008203 67.9687500003203 55.4687500004453 5.46875000094531 30.4687500006953 80.4687500001953 49.2187500005078 99.2187500000078 74.2187500002578 24.2187500007578 11.7187500008828 61.7187500003828 86.7187500001328 36.7187500006328 50.7812500004922 0.781250000992187 25.7812500007422 75.7812500002422 88.2812500001172 38.2812500006172 13.2812500008672 63.2812500003672 7.03125000092969 57.0312500004297 82.0312500001797 32.0312500006797 44.5312500005547 94.5312500000547 69.5312500003047 19.5312500008047 78.9062500002109 28.9062500007109 3.90625000096094 53.9062500004609 66.4062500003359 16.4062500008359 41.4062500005859 91.4062500000859 35.1562500006484 85.1562500001484 60.1562500003984 10.1562500008984 22.6562500007734 72.6562500002734 97.6562500000234 47.6562500005234 90.2343750000977 40.2343750005977 15.2343750008477 65.2343750003477 52.7343750004727 2.73437500097266 27.7343750007227 77.7343750002227 46.4843750005352 96.4843750000352 71.4843750002852 21.4843750007852 8.98437500091016 58.9843750004102 83.9843750001602 33.9843750006602 68.3593750003164 18.3593750008164 43.3593750005664 93.3593750000664 80.8593750001914 30.8593750006914 5.85937500094141 55.8593750004414 24.6093750007539 74.6093750002539 99.6093750000039 49.6093750005039 37.1093750006289 87.1093750001289 62.1093750003789 12.1093750008789 76.1718750002383 26.1718750007383 1.17187500098828 51.1718750004883 63.6718750003633 13.6718750008633 38.6718750006133 88.6718750001133 32.4218750006758 82.4218750001758 57.4218750004258 7.42187500092578 19.9218750008008 69.9218750003008 94.9218750000508 44.9218750005508 54.296875000457 4.29687500095703 29.296875000707 79.296875000207 91.796875000082 41.796875000582 16.796875000832 66.796875000332 10.5468750008945 60.5468750003945 85.5468750001445 35.5468750006445 48.0468750005195 98.0468750000195 73.0468750002695 23.0468750007695 25.3906250007461 75.3906250002461 50.3906250004961 0.390625000996094 12.8906250008711 62.8906250003711 87.8906250001211 37.8906250006211 81.6406250001836 31.6406250006836 6.64062500093359 56.6406250004336 69.1406250003086 19.1406250008086 44.1406250005586 94.1406250000586 3.51562500096484 53.5156250004648 78.5156250002148 28.5156250007148 41.0156250005898 91.0156250000899 66.0156250003398 16.0156250008398 59.7656250004023 9.76562500090234 34.7656250006523 84.7656250001523 97.2656250000273 47.2656250005273 22.2656250007773 72.2656250002773 39.4531250006055 89.4531250001055 64.4531250003555 14.4531250008555 1.95312500098047 51.9531250004805 76.9531250002305 26.9531250007305 95.703125000043 45.703125000543 20.703125000793 70.703125000293 58.203125000418 8.20312500091797 33.203125000668 83.203125000168 17.5781250008242 67.5781250003242 92.5781250000742 42.5781250005742 30.0781250006992 80.0781250001992 55.0781250004492 5.07812500094922 73.8281250002617 23.8281250007617 48.8281250005117 98.8281250000117 86.3281250001367 36.3281250006367 11.3281250008867 61.3281250003867 77.9296875002207 27.9296875007207 2.9296875009707 52.9296875004707 65.4296875003457 15.4296875008457 40.4296875005957 90.4296875000957 34.1796875006582 84.1796875001582 59.1796875004082 9.1796875009082 21.6796875007832 71.6796875002832 96.6796875000332 46.6796875005332 56.0546875004395 6.05468750093945 31.0546875006895 81.0546875001895 93.5546875000645 43.5546875005644 18.5546875008145 68.5546875003145 12.304687500877 62.304687500377 87.304687500127 37.3046875006269 49.804687500502 99.804687500002 74.804687500252 24.804687500752 88.8671875001113 38.8671875006113 13.8671875008613 63.8671875003613 51.3671875004863 1.36718750098633 26.3671875007363 76.3671875002363 45.1171875005488 95.1171875000489 70.1171875002988 20.1171875007988 7.61718750092383 57.6171875004238 82.6171875001738 32.6171875006738 66.9921875003301 16.9921875008301 41.9921875005801 91.9921875000801 79.4921875002051 29.4921875007051 4.49218750095508 54.4921875004551 23.2421875007676 73.2421875002676 98.2421875000176 48.2421875005176 35.7421875006426 85.7421875001426 60.7421875003926 10.7421875008926 38.0859375006191 88.0859375001191 63.0859375003691 13.0859375008691 0.585937500994141 50.5859375004941 75.5859375002441 25.5859375007441 94.3359375000567 44.3359375005566 19.3359375008066 69.3359375003066 56.8359375004316 6.83593750093164 31.8359375006816 81.8359375001817 16.2109375008379 66.2109375003379 91.2109375000879 41.2109375005879 28.7109375007129 78.7109375002129 53.7109375004629 3.71093750096289 72.4609375002754 22.4609375007754 47.4609375005254 97.4609375000254 84.9609375001504 34.9609375006504 9.96093750090039 59.9609375004004 27.1484375007285 77.1484375002285 52.1484375004785 2.14843750097852 14.6484375008535 64.6484375003535 89.6484375001035 39.6484375006035 83.398437500166 33.398437500666 8.39843750091602 58.398437500416 70.898437500291 20.898437500791 45.898437500541 95.898437500041 5.27343750094727 55.2734375004473 80.2734375001973 30.2734375006973 42.7734375005723 92.7734375000723 67.7734375003223 17.7734375008223 61.5234375003848 11.5234375008848 36.5234375006348 86.5234375001348 99.0234375000098 49.0234375005098 24.0234375007598 74.0234375002598 12.695312500873 62.695312500373 87.6953125001231 37.695312500623 25.195312500748 75.1953125002481 50.195312500498 0.195312500998047 68.9453125003106 18.9453125008105 43.9453125005605 93.9453125000606 81.4453125001856 31.4453125006855 6.44531250093555 56.4453125004355 40.8203125005918 90.8203125000918 65.8203125003418 15.8203125008418 3.3203125009668 53.3203125004668 78.3203125002168 28.3203125007168 97.0703125000293 47.0703125005293 22.0703125007793 72.0703125002793 59.5703125004043 9.5703125009043 34.5703125006543 84.5703125001543 1.75781250098242 51.7578125004824 76.7578125002324 26.7578125007324 39.2578125006074 89.2578125001074 64.2578125003574 14.2578125008574 58.0078125004199 8.00781250091992 33.0078125006699 83.0078125001699 95.5078125000449 45.5078125005449 20.5078125007949 70.5078125002949 29.8828125007012 79.8828125002012 54.8828125004512 4.88281250095117 17.3828125008262 67.3828125003262 92.3828125000762 42.3828125005762 86.1328125001387 36.1328125006387 11.1328125008887 61.1328125003887 73.6328125002637 23.6328125007637 48.6328125005137 98.6328125000137 52.5390625004746 2.53906250097461 27.5390625007246 77.5390625002246 90.0390625000996 40.0390625005996 15.0390625008496 65.0390625003496 8.78906250091211 58.7890625004121 83.7890625001621 33.7890625006621 46.2890625005371 96.2890625000371 71.2890625002871 21.2890625007871 80.6640625001934 30.6640625006934 5.66406250094336 55.6640625004434 68.1640625003184 18.1640625008184 43.1640625005684 93.1640625000684 36.9140625006309 86.9140625001308 61.9140625003809 11.9140625008809 24.4140625007559 74.4140625002559 99.4140625000059 49.4140625005059 63.4765625003652 13.4765625008652 38.4765625006152 88.4765625001152 75.9765625002402 25.9765625007402 0.976562500990234 50.9765625004902 19.7265625008027 69.7265625003027 94.7265625000528 44.7265625005527 32.2265625006777 82.2265625001777 57.2265625004277 7.22656250092773 91.601562500084 41.601562500584 16.601562500834 66.601562500334 54.101562500459 4.10156250095898 29.101562500709 79.101562500209 47.8515625005215 97.8515625000215 72.8515625002715 22.8515625007715 10.3515625008965 60.3515625003965 85.3515625001465 35.3515625006465)
	
	# check that all arrays are the same length (otherwise we can't run through all parameter settings)
	if [ ${#mapDimensions[*]} -ne ${#learningRates[*]} ] || [ ${#mapDimensions[*]} -ne ${#learningRateDecays[*]} ] || [ ${#mapDimensions[*]} -ne ${#kernelWidths[*]} ] || [ ${#mapDimensions[*]} -ne ${#kernelWidthDecays[*]} ]; then
		echo "Error: parameter array sizes do not match"
		rm -f *.train *.test *.names
		exit
	fi
	
	# check for valid labeling method
	if [ ${neuronLabelingMethod} -ne 0 ] && [ ${neuronLabelingMethod} -ne 1 ] && [ ${neuronLabelingMethod} -ne 2 ] && [ ${neuronLabelingMethod} -ne 3 ] && [ ${neuronLabelingMethod} -ne 4 ]; then
		echo "Error: Invalid neuron labeling method"
		rm -f *.train *.test *.names
		exit
	fi
	
	# pre-generate initialized maps for each of the specified map dimensions (since this is a time-consuming task)
	echo "Generating maps..."
	
	for ((position = 0; position < ${#mapDimensions[*]}; ++position))
	do
		
		if [ ! -f ${1}.${mapDimensions[position]}.0.map ]; then
			echo -n "Map dimension ${mapDimensions[position]} x ${mapDimensions[position]}: "
			
			for ((simNum = 0; simNum < 30; ++simNum))
			do
				echo -n "$simNum "
				sleep 1
				./../../algorithms/SOM_PAK/lininit -din ${1}.data.${simNum}.som.train -cout ${1}.${mapDimensions[position]}.${simNum}.map -topol hexa -neigh gaussian -xdim ${mapDimensions[position]} -ydim ${mapDimensions[position]} > /dev/null
			done
			
			echo
		fi
		
	done
	
	echo "=============================================="
	
	for ((position = 0; position < ${#mapDimensions[*]}; ++position))
	do
		echo "Simulation ${currentSimulation}"
		echo "=============================================="
		
		echo "Map dimensions: ${mapDimensions[position]} x ${mapDimensions[position]}"
		echo "Initial learning rate: ${learningRates[position]}"
		echo "Learning rate decay constant: ${learningRateDecays[position]}"
		echo "Kernel width: ${kernelWidths[position]}"
		echo "Radius decay constant: ${kernelWidthDecays[position]}"
		
		if [ ${neuronLabelingMethod} -eq 0 ]; then
			echo "Labeling method: example-centric neuron labeling"
		elif [ ${neuronLabelingMethod} -eq 1 ]; then
			echo "Labeling method: example-centric cluster labeling (K-Means)"
		elif [ ${neuronLabelingMethod} -eq 2 ]; then
			echo "Labeling method: example-centric cluster labeling (Ward)"
		elif [ ${neuronLabelingMethod} -eq 3 ]; then
			echo "Labeling method: weight-centric neuron labeling"
      elif [ ${neuronLabelingMethod} -eq 4 ]; then
			echo "Labeling method: hybrid neuron-centric weight-centric neuron labeling"
		fi
		
		# run 30 cross validated simulations
		runCrossValidation ${1} ${neuronLabelingMethod} ${mapDimensions[position]} ${learningRates[position]} ${learningRateDecays[position]} ${kernelWidths[position]} ${kernelWidthDecays[position]}
		
		echo "=============================================="
		let currentSimulation++
	done
	
	rm -f *.map
	
	echo "Status: Simulations completed"
	
}

# ===================================================================================================
# Function : cleanUp()
# Purpose  : Cleans up files created during simulation run
# Return   : None
# ===================================================================================================

cleanUp() {
	
	echo -n "Status: Cleaning up...  "
	
	# clean up created files
	rm *.names *.train *.test
	
	echo "DONE"
	
}

# ===================================================================================================
# Main script
# ===================================================================================================

export CLASSPATH="/home/wvheerden/Simulations/algorithms/BuildSets:/home/wvheerden/Simulations/algorithms/AverageRunResults:."

validateSystem ${1}
buildSets ${1}
runSims ${1}
cleanUp ${1}
