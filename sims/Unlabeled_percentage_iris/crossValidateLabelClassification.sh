# ===================================================================================================
# Script        : crossValidateLabelClassification.sh
# Usage         : ./crossValidateLabelClassification.sh [simDirectory]
# Purpose       : Performs a cross-validated paired test on parameter data set using a neuron
#                 labeling scheme
#
# Preconditions : - All required simulation-related programs are present
#                 - Data set as directory name in dataset directory must exist and be in correct form
#                   (i.e. no header, one record per line, comma delimited, last value is class label)
# ===================================================================================================

#!/bin/bash

# ===================================================================================================
# Function : validateSystem(simDirectory)
# Purpose  : Validates components required for cross validation run (based on simDirectory)
# Return   : None
# ===================================================================================================

validateSystem() {
	
	# check for correct number of parameters
	if [ -z ${1} ]; then
		echo "Usage: ./crossValidate.sh [simDirectory]"
		exit
	fi
	
	echo "Status: Validating system..."
	echo "=============================================="
	
	# check for data directory
	echo -n "Simulation directory \"${1}\"...  "
	if [ ! -d ../../datasets/${1} ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for original data file in simulation directory
	echo -n "Data file \"${1}/original/${1}.data\"...  "
	if [ ! -f ../../datasets/${1}/original/${1}.data ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for cross validation set building script
	echo -n "Cross validation set building script...  "
	if [ ! -f ../../algorithms/BuildSets/BuildSets.class ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK data conversion script
	echo -n "Conversion script \"${1}/convert_som.awk\"...  "
	if [ ! -f ./../../datasets/${1}/convert_som.awk ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK names script
	echo -n "Names script \"${1}/names_som.sh\"...  "
	if [ ! -f ./../../datasets/${1}/names_som.sh ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK initialisation program
	echo -n "SOM initialisation program...  "
	if [ ! -f ../../algorithms/SOM_PAK/lininit ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK training program
	echo -n "SOM training program...  "
	if [ ! -f ../../algorithms/SOM_PAK/vsom ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for example-centric neuron labeling program
	echo -n "Example-centric neuron labeling program...  "
	if [ ! -f./../../algorithms/ExampleCentricNeuron/classify ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for example-centric K-means cluster labeling program
	echo -n "Example-centric K-means cluster labeling program...  "
	if [ ! -f./../../algorithms/ExampleCentricClusterKMeans/classify ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for example-centric Ward cluster labeling program
	echo -n "Example-centric Ward cluster labeling program...  "
	if [ ! -f./../../algorithms/ExampleCentricClusterWard/classify ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for weight-centric neuron labeling program
	echo -n "Weight-centric neuron labeling program...  "
	if [ ! -f./../../algorithms/WeightCentricNeuron/classify ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	#check for results averaging program
	echo -n "Results averaging program...  "
	if [ ! -f ../../algorithms/AverageRunResults/AverageLabelClassificationResults.class ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	echo "=============================================="
	echo "Status: System OK..."
	
}

# ===================================================================================================
# Function : buildSets(simDirectory)
# Purpose  : Builds data sets required for cross validation simulations (based on simDirectory)
# Return   : None
# ===================================================================================================

buildSets() {
	
	echo "Status: Performing cross validation set builds"
	
	# build raw training and test sets (must still be converted to SOM_PAK format)
	if [ ${1} == "ionosphere" ]; then
		echo "Status: Building set for IONOSPHERE database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	elif [ ${1} == "iris" ]; then
		echo "Status: Building set for IRIS database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	elif [ ${1} == "monks1" ]; then
		echo "Status: Building set for MONKS1 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	elif [ ${1} == "monks2" ]; then
		echo "Status: Building set for MONKS2 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	elif [ ${1} == "monks3" ]; then
		echo "Status: Building set for MONKS3 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 5
	elif [ ${1} == "pima" ]; then
		echo "Status: Building set for PIMA database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	else
		echo "Status: Unrecognised set"
		echo "Status: Building default"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	fi
	
	echo "=============================================="
	echo "Status: Cross validation sets built"
	
	echo -n "Status: Performing data set conversions...  "
	
	# create SOM names file
	./../../datasets/${1}/names_som.sh > ${1}.names
	
	# perform conversion of data set from raw form to SOM_PAK format, creating [simulation].data
	for ((dataset = 0; dataset < 30; ++dataset))
	do
		gawk -f ./../../datasets/${1}/convert_som.awk ${1}.data.raw.${dataset}.train > ${1}.data.${dataset}.som.train
		rm -f ${1}.data.raw.${dataset}.train
		gawk -f ./../../datasets/${1}/convert_som.awk ${1}.data.raw.${dataset}.test > ${1}.data.${dataset}.som.test
		rm -f ${1}.data.raw.${dataset}.test
	done
	
	echo "DONE"
	
}

# ===================================================================================================
# Function : runCrossValidation(simDirectory, neuronLabelingMethod, mapDim, learningRate,
#            learningRateDecay, kernelWidth, radiusDecay)
# Purpose  : Performs a single cross validation using provided parameters
# Return   : None
# ===================================================================================================

runCrossValidation () {
	
	# get description string for neuron labeling method (0 = neuron; 1 = K-means cluster; 2 = Ward cluster; 3 = weight-centric)
	if [ ${2} -eq 0 ]; then
		neuronLabelingMethodDescription="neuron"
	elif [ ${2} -eq 1 ]; then
		neuronLabelingMethodDescription="k-means"
	elif [ ${2} -eq 2 ]; then
		neuronLabelingMethodDescription="ward"
	elif [ ${2} -eq 3 ]; then
		neuronLabelingMethodDescription="weight-centric"
	fi
	
	if [ -f label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy ]; then
		rm -f label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy
	fi
	
	if [ -f label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error ]; then
		rm -f label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error
	fi
	
	for ((simNum = 0; simNum < 30; ++simNum))
	do
		echo -n "${simNum} "
		
		# execute SOM_PAK
		sleep 1
		./../../algorithms/SOM_PAK/vsom -din ${1}.data.${simNum}.som.train -vin ${1}.data.${simNum}.som.train -cin ${1}.${3}.${simNum}.map -cout ${1}.${3}.${simNum}.map.out -lrate ${4} -lratedecay ${5} -radius ${6} -radiusdecay ${7} -rand 0 >> /dev/null 2> /dev/null
		
		# execute appropriate neuron labeling algorithm on SOM_PAK output, and generate classification accuracy and error output
		sleep 1
		if [ ${2} -eq 0 ]; then
			./../../algorithms/ExampleCentricNeuron/classify ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.data.${simNum}.som.test ${1}.names label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error > /dev/null
		elif [ ${2} -eq 1 ]; then
			./../../algorithms/ExampleCentricClusterKMeans/classify ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.data.${simNum}.som.test ${1}.names label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error > /dev/null
		elif [ ${2} -eq 2 ]; then
			./../../algorithms/ExampleCentricClusterWard/classify ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.data.${simNum}.som.test ${1}.names label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error > /dev/null
		elif [ ${2} -eq 3 ]; then
			./../../algorithms/WeightCentricNeuron/classify ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.data.${simNum}.som.test ${1}.names label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error > /dev/null
		fi
		
		# clean up
		rm -f *.map.out
	done
	
	# calculate confidence intervals
	java AverageLabelClassificationResults -accuracy label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.accuracy label-classification_${1}_${neuronLabelingMethodDescription}.accuracy.summary
	java AverageLabelClassificationResults -error label-classification_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}.error label-classification_${1}_${neuronLabelingMethodDescription}.error.summary
	
	echo ""
	
}

# ===================================================================================================
# Function : runSims(simDirectory)
# Purpose  : Runs simulations for specified simDirectory [assumes built data sets]
# Return   : None
# ===================================================================================================

runSims () {
	
	echo "Status: Running simulations"
	echo "=============================================="
	
	# number of current simulation
	currentSimulation=1
	
	# neuron labeling method (0 = neuron; 1 = K-means cluster; 2 = Ward cluster; 3 = weight-centric)
	neuronLabelingMethod=0
	
	# SOM map dimension: (integer) [2:inf] (No default)
	mapDimensions
	
	# SOM initial learning rate (floating point) [0.0:inf]
	learningRates=(0.000000000 5.000000000 7.500000000 2.500000000 3.750000000 8.750000000 6.250000000 1.250000000 1.875000000 6.875000000 9.375000000 4.375000000 3.125000000 8.125000000 5.625000000 0.625000000 0.937500000 5.937500000 8.437500000 3.437500000 4.687500000 9.687500000 7.187500000 2.187500000 1.562500000 6.562500000 9.062500000 4.062500000 2.812500000 7.812500000 5.312500000 0.312500000 0.468750000 5.468750000 7.968750000 2.968750000 4.218750000 9.218750000 6.718750000 1.718750000 2.343750000 7.343750000 9.843750000 4.843750000 3.593750000 8.593750000 6.093750000 1.093750000 0.781250000 5.781250000 8.281250000 3.281250000 4.531250000 9.531250000 7.031250000 2.031250000 1.406250000 6.406250000 8.906250000 3.906250000 2.656250000 7.656250000 5.156250000 0.156250000 0.234375000 5.234375000 7.734375000 2.734375000 3.984375000 8.984375000 6.484375000 1.484375000 2.109375000 7.109375000 9.609375000 4.609375000 3.359375000 8.359375000 5.859375000 0.859375000 1.171875000 6.171875000 8.671875000 3.671875000 4.921875000 9.921875000 7.421875000 2.421875000 1.796875000 6.796875000 9.296875000 4.296875000 3.046875000 8.046875000 5.546875000 0.546875000 0.390625000 5.390625000 7.890625000 2.890625000 4.140625000 9.140625000 6.640625000 1.640625000 2.265625000 7.265625000 9.765625000 4.765625000 3.515625000 8.515625000 6.015625000 1.015625000 0.703125000 5.703125000 8.203125000 3.203125000 4.453125000 9.453125000 6.953125000 1.953125000 1.328125000 6.328125000 8.828125000 3.828125000 2.578125000 7.578125000 5.078125000 0.078125000 0.117187500 5.117187500 7.617187500 2.617187500 3.867187500 8.867187500 6.367187500 1.367187500 1.992187500 6.992187500 9.492187500 4.492187500 3.242187500 8.242187500 5.742187500 0.742187500 1.054687500 6.054687500 8.554687500 3.554687500 4.804687500 9.804687500 7.304687500 2.304687500 1.679687500 6.679687500 9.179687500 4.179687500 2.929687500 7.929687500 5.429687500 0.429687500 0.585937500 5.585937500 8.085937500 3.085937500 4.335937500 9.335937500 6.835937500 1.835937500 2.460937500 7.460937500 9.960937500 4.960937500 3.710937500 8.710937500 6.210937500 1.210937500 0.898437500 5.898437500 8.398437500 3.398437500 4.648437500 9.648437500 7.148437500 2.148437500 1.523437500 6.523437500 9.023437500 4.023437500 2.773437500 7.773437500 5.273437500 0.273437500 0.195312500 5.195312500 7.695312500 2.695312500 3.945312500 8.945312500 6.445312500 1.445312500 2.070312500 7.070312500 9.570312500 4.570312500 3.320312500 8.320312500 5.820312500 0.820312500 1.132812500 6.132812500 8.632812500 3.632812500 4.882812500 9.882812500 7.382812500 2.382812500 1.757812500 6.757812500 9.257812500 4.257812500 3.007812500 8.007812500 5.507812500 0.507812500 0.351562500 5.351562500 7.851562500 2.851562500 4.101562500 9.101562500 6.601562500 1.601562500 2.226562500 7.226562500 9.726562500 4.726562500 3.476562500 8.476562500 5.976562500 0.976562500 0.664062500 5.664062500 8.164062500 3.164062500 4.414062500 9.414062500 6.914062500 1.914062500 1.289062500 6.289062500 8.789062500 3.789062500 2.539062500 7.539062500 5.039062500 0.039062500 0.058593750 5.058593750 7.558593750 2.558593750 3.808593750 8.808593750 6.308593750 1.308593750 1.933593750 6.933593750 9.433593750 4.433593750 3.183593750 8.183593750 5.683593750 0.683593750 0.996093750 5.996093750 8.496093750 3.496093750 4.746093750 9.746093750 7.246093750 2.246093750 1.621093750 6.621093750 9.121093750 4.121093750 2.871093750 7.871093750 5.371093750 0.371093750 0.527343750 5.527343750 8.027343750 3.027343750 4.277343750 9.277343750 6.777343750 1.777343750 2.402343750 7.402343750 9.902343750 4.902343750 3.652343750 8.652343750 6.152343750 1.152343750 0.839843750 5.839843750 8.339843750 3.339843750 4.589843750 9.589843750 7.089843750 2.089843750 1.464843750 6.464843750 8.964843750 3.964843750 2.714843750 7.714843750 5.214843750 0.214843750 0.292968750 5.292968750 7.792968750 2.792968750 4.042968750 9.042968750 6.542968750 1.542968750 2.167968750 7.167968750 9.667968750 4.667968750 3.417968750 8.417968750 5.917968750 0.917968750 1.230468750 6.230468750 8.730468750 3.730468750 4.980468750 9.980468750 7.480468750 2.480468750 1.855468750 6.855468750 9.355468750 4.355468750 3.105468750 8.105468750 5.605468750 0.605468750 0.449218750 5.449218750 7.949218750 2.949218750 4.199218750 9.199218750 6.699218750 1.699218750 2.324218750 7.324218750 9.824218750 4.824218750 3.574218750 8.574218750 6.074218750 1.074218750 0.761718750 5.761718750 8.261718750 3.261718750 4.511718750 9.511718750 7.011718750 2.011718750 1.386718750 6.386718750 8.886718750 3.886718750 2.636718750 7.636718750 5.136718750 0.136718750 0.097656250 5.097656250 7.597656250 2.597656250 3.847656250 8.847656250 6.347656250 1.347656250 1.972656250 6.972656250 9.472656250 4.472656250 3.222656250 8.222656250 5.722656250 0.722656250 1.035156250 6.035156250 8.535156250 3.535156250 4.785156250 9.785156250 7.285156250 2.285156250 1.660156250 6.660156250 9.160156250 4.160156250 2.910156250 7.910156250 5.410156250 0.410156250 0.566406250 5.566406250 8.066406250 3.066406250 4.316406250 9.316406250 6.816406250 1.816406250 2.441406250 7.441406250 9.941406250 4.941406250 3.691406250 8.691406250 6.191406250 1.191406250 0.878906250 5.878906250 8.378906250 3.378906250 4.628906250 9.628906250 7.128906250 2.128906250 1.503906250 6.503906250 9.003906250 4.003906250 2.753906250 7.753906250 5.253906250 0.253906250 0.175781250 5.175781250 7.675781250 2.675781250 3.925781250 8.925781250 6.425781250 1.425781250 2.050781250 7.050781250 9.550781250 4.550781250 3.300781250 8.300781250 5.800781250 0.800781250 1.113281250 6.113281250 8.613281250 3.613281250 4.863281250 9.863281250 7.363281250 2.363281250 1.738281250 6.738281250 9.238281250 4.238281250 2.988281250 7.988281250 5.488281250 0.488281250 0.332031250 5.332031250 7.832031250 2.832031250 4.082031250 9.082031250 6.582031250 1.582031250 2.207031250 7.207031250 9.707031250 4.707031250 3.457031250 8.457031250 5.957031250 0.957031250 0.644531250 5.644531250 8.144531250 3.144531250 4.394531250 9.394531250 6.894531250 1.894531250 1.269531250 6.269531250 8.769531250 3.769531250 2.519531250 7.519531250 5.019531250 0.019531250)
	
	# SOM learning rate decay constant (floating point) (0.0:inf]
	learningRateDecays=(0.000000001 750.000000001 375.000000001 1125.000000000 562.500000001 1312.500000000 187.500000001 937.500000000 468.750000001 1218.750000000 93.750000001 843.750000000 281.250000001 1031.250000000 656.250000001 1406.250000000 703.125000001 1453.125000000 328.125000001 1078.125000000 140.625000001 890.625000000 515.625000001 1265.625000000 234.375000001 984.375000000 609.375000001 1359.375000000 421.875000001 1171.875000000 46.875000001 796.875000000 398.437500001 1148.437500000 23.437500001 773.437500000 210.937500001 960.937500000 585.937500001 1335.937500000 117.187500001 867.187500000 492.187500001 1242.187500000 679.687500001 1429.687500000 304.687500001 1054.687500000 351.562500001 1101.562500000 726.562500001 1476.562500000 539.062500001 1289.062500000 164.062500001 914.062500000 632.812500001 1382.812500000 257.812500001 1007.812500000 70.312500001 820.312500000 445.312500001 1195.312500000 597.656250001 1347.656250000 222.656250001 972.656250000 35.156250001 785.156250000 410.156250001 1160.156250000 316.406250001 1066.406250000 691.406250001 1441.406250000 503.906250001 1253.906250000 128.906250001 878.906250000 175.781250001 925.781250000 550.781250001 1300.781250000 738.281250001 1488.281250000 363.281250001 1113.281250000 457.031250001 1207.031250000 82.031250001 832.031250000 269.531250001 1019.531250000 644.531250001 1394.531250000 199.218750001 949.218750000 574.218750001 1324.218750000 386.718750001 1136.718750000 11.718750001 761.718750000 667.968750001 1417.968750000 292.968750001 1042.968750000 105.468750001 855.468750000 480.468750001 1230.468750000 527.343750001 1277.343750000 152.343750001 902.343750000 339.843750001 1089.843750000 714.843750001 1464.843750000 58.593750001 808.593750000 433.593750001 1183.593750000 621.093750001 1371.093750000 246.093750001 996.093750000 498.046875001 1248.046875000 123.046875001 873.046875000 310.546875001 1060.546875000 685.546875001 1435.546875000 29.296875001 779.296875000 404.296875001 1154.296875000 591.796875001 1341.796875000 216.796875001 966.796875000 263.671875001 1013.671875000 638.671875001 1388.671875000 451.171875001 1201.171875000 76.171875001 826.171875000 732.421875001 1482.421875000 357.421875001 1107.421875000 169.921875001 919.921875000 544.921875001 1294.921875000 99.609375001 849.609375000 474.609375001 1224.609375000 662.109375001 1412.109375000 287.109375001 1037.109375000 380.859375001 1130.859375000 5.859375001 755.859375000 193.359375001 943.359375000 568.359375001 1318.359375000 615.234375001 1365.234375000 240.234375001 990.234375000 52.734375001 802.734375000 427.734375001 1177.734375000 333.984375001 1083.984375000 708.984375001 1458.984375000 521.484375001 1271.484375000 146.484375001 896.484375000 298.828125001 1048.828125000 673.828125001 1423.828125000 486.328125001 1236.328125000 111.328125001 861.328125000 580.078125001 1330.078125000 205.078125001 955.078125000 17.578125001 767.578125000 392.578125001 1142.578125000 439.453125001 1189.453125000 64.453125001 814.453125000 251.953125001 1001.953125000 626.953125001 1376.953125000 158.203125001 908.203125000 533.203125001 1283.203125000 720.703125001 1470.703125000 345.703125001 1095.703125000 697.265625001 1447.265625000 322.265625001 1072.265625000 134.765625001 884.765625000 509.765625001 1259.765625000 228.515625001 978.515625000 603.515625001 1353.515625000 416.015625001 1166.015625000 41.015625001 791.015625000 87.890625001 837.890625000 462.890625001 1212.890625000 650.390625001 1400.390625000 275.390625001 1025.390625000 556.640625001 1306.640625000 181.640625001 931.640625000 369.140625001 1119.140625000 744.140625001 1494.140625000 747.070312501 1497.070312500 372.070312501 1122.070312500 184.570312501 934.570312500 559.570312501 1309.570312500 278.320312501 1028.320312500 653.320312501 1403.320312500 465.820312501 1215.820312500 90.820312501 840.820312500 43.945312501 793.945312500 418.945312501 1168.945312500 606.445312501 1356.445312500 231.445312501 981.445312500 512.695312501 1262.695312500 137.695312501 887.695312500 325.195312501 1075.195312500 700.195312501 1450.195312500 348.632812501 1098.632812500 723.632812501 1473.632812500 536.132812501 1286.132812500 161.132812501 911.132812500 629.882812501 1379.882812500 254.882812501 1004.882812500 67.382812501 817.382812500 442.382812501 1192.382812500 395.507812501 1145.507812500 20.507812501 770.507812500 208.007812501 958.007812500 583.007812501 1333.007812500 114.257812501 864.257812500 489.257812501 1239.257812500 676.757812501 1426.757812500 301.757812501 1051.757812500 149.414062501 899.414062500 524.414062501 1274.414062500 711.914062501 1461.914062500 336.914062501 1086.914062500 430.664062501 1180.664062500 55.664062501 805.664062500 243.164062501 993.164062500 618.164062501 1368.164062500 571.289062501 1321.289062500 196.289062501 946.289062500 8.789062501 758.789062500 383.789062501 1133.789062500 290.039062501 1040.039062500 665.039062501 1415.039062500 477.539062501 1227.539062500 102.539062501 852.539062500 547.851562501 1297.851562500 172.851562501 922.851562500 360.351562501 1110.351562500 735.351562501 1485.351562500 79.101562501 829.101562500 454.101562501 1204.101562500 641.601562501 1391.601562500 266.601562501 1016.601562500 219.726562501 969.726562500 594.726562501 1344.726562500 407.226562501 1157.226562500 32.226562501 782.226562500 688.476562501 1438.476562500 313.476562501 1063.476562500 125.976562501 875.976562500 500.976562501 1250.976562500 249.023437501 999.023437500 624.023437501 1374.023437500 436.523437501 1186.523437500 61.523437501 811.523437500 717.773437501 1467.773437500 342.773437501 1092.773437500 155.273437501 905.273437500 530.273437501 1280.273437500 483.398437501 1233.398437500 108.398437501 858.398437500 295.898437501 1045.898437500 670.898437501 1420.898437500 14.648437501 764.648437500 389.648437501 1139.648437500 577.148437501 1327.148437500 202.148437501 952.148437500 647.460937501 1397.460937500 272.460937501 1022.460937500 84.960937501 834.960937500 459.960937501 1209.960937500 366.210937501 1116.210937500 741.210937501 1491.210937500 553.710937501 1303.710937500 178.710937501 928.710937500 131.835937501 881.835937500 506.835937501 1256.835937500 694.335937501 1444.335937500 319.335937501 1069.335937500 413.085937501 1163.085937500 38.085937501 788.085937500 225.585937501 975.585937500 600.585937501 1350.585937500 448.242187501 1198.242187500 73.242187501 823.242187500 260.742187501 1010.742187500 635.742187501 1385.742187500 166.992187501 916.992187500 541.992187501 1291.992187500 729.492187501 1479.492187500 354.492187501 1104.492187500 307.617187501 1057.617187500 682.617187501 1432.617187500 495.117187501 1245.117187500 120.117187501 870.117187500 588.867187501 1338.867187500 213.867187501 963.867187500 26.367187501 776.367187500 401.367187501 1151.367187500 49.804687501 799.804687500 424.804687501 1174.804687500 612.304687501 1362.304687500 237.304687501 987.304687500 518.554687501 1268.554687500 143.554687501 893.554687500 331.054687501 1081.054687500 706.054687501 1456.054687500 659.179687501 1409.179687500 284.179687501 1034.179687500 96.679687501 846.679687500 471.679687501 1221.679687500 190.429687501 940.429687500 565.429687501 1315.429687500 377.929687501 1127.929687500 2.929687501 752.929687500)
	
	# SOM initial kernel width (floating point) (0.0:inf]
	kernelWidths=(0.000000012 6.000000006 3.000000009 9.000000003 7.500000005 1.500000011 10.500000002 4.500000008 11.250000001 5.250000007 8.250000004 2.250000010 3.750000008 9.750000002 0.750000011 6.750000005 5.625000006 11.625000000 2.625000009 8.625000003 10.125000002 4.125000008 7.125000005 1.125000011 6.375000006 0.375000012 9.375000003 3.375000009 1.875000010 7.875000004 4.875000007 10.875000001 8.437500004 2.437500010 11.437500001 5.437500007 0.937500011 6.937500005 3.937500008 9.937500002 3.187500009 9.187500003 0.187500012 6.187500006 10.687500001 4.687500007 7.687500004 1.687500010 9.562500002 3.562500008 6.562500005 0.562500011 5.062500007 11.062500001 2.062500010 8.062500004 2.812500009 8.812500003 5.812500006 11.812500000 7.312500005 1.312500011 10.312500002 4.312500008 9.843750002 3.843750008 6.843750005 0.843750011 5.343750007 11.343750001 2.343750010 8.343750004 1.593750010 7.593750004 4.593750007 10.593750001 6.093750006 0.093750012 9.093750003 3.093750009 7.968750004 1.968750010 10.968750001 4.968750007 0.468750012 6.468750006 3.468750009 9.468750003 4.218750008 10.218750002 1.218750011 7.218750005 11.718750000 5.718750006 8.718750003 2.718750009 4.781250007 10.781250001 1.781250010 7.781250004 9.281250003 3.281250009 6.281250006 0.281250012 7.031250005 1.031250011 10.031250002 4.031250008 2.531250009 8.531250003 5.531250006 11.531250000 1.406250011 7.406250005 4.406250008 10.406250002 8.906250003 2.906250009 11.906250000 5.906250006 11.156250001 5.156250007 8.156250004 2.156250010 3.656250008 9.656250002 0.656250011 6.656250005 3.515625008 9.515625002 0.515625011 6.515625005 11.015625001 5.015625007 8.015625004 2.015625010 8.765625003 2.765625009 11.765625000 5.765625006 1.265625011 7.265625005 4.265625008 10.265625002 2.390625010 8.390625004 5.390625007 11.390625001 6.890625005 0.890625011 9.890625002 3.890625008 9.140625003 3.140625009 6.140625006 0.140625012 4.640625007 10.640625001 1.640625010 7.640625004 11.953125000 5.953125006 8.953125003 2.953125009 4.453125008 10.453125002 1.453125011 7.453125005 0.703125011 6.703125005 3.703125008 9.703125002 8.203125004 2.203125010 11.203125001 5.203125007 6.328125006 0.328125012 9.328125003 3.328125009 1.828125010 7.828125004 4.828125007 10.828125001 5.578125006 11.578125000 2.578125009 8.578125003 10.078125002 4.078125008 7.078125005 1.078125011 7.171875005 1.171875011 10.171875002 4.171875008 2.671875009 8.671875003 5.671875006 11.671875000 4.921875007 10.921875001 1.921875010 7.921875004 9.421875003 3.421875009 6.421875006 0.421875012 10.546875001 4.546875007 7.546875004 1.546875010 3.046875009 9.046875003 0.046875012 6.046875006 0.796875011 6.796875005 3.796875008 9.796875002 8.296875004 2.296875010 11.296875001 5.296875007 2.109375010 8.109375004 5.109375007 11.109375001 6.609375005 0.609375011 9.609375002 3.609375008 10.359375002 4.359375008 7.359375005 1.359375011 5.859375006 11.859375000 2.859375009 8.859375003 3.984375008 9.984375002 0.984375011 6.984375005 11.484375001 5.484375007 8.484375004 2.484375010 7.734375004 1.734375010 10.734375001 4.734375007 0.234375012 6.234375006 3.234375009 9.234375003 8.132812504 2.132812510 11.132812501 5.132812507 0.632812511 6.632812505 3.632812508 9.632812502 4.382812508 10.382812502 1.382812511 7.382812505 11.882812500 5.882812506 8.882812503 2.882812509 10.007812502 4.007812508 7.007812505 1.007812511 5.507812506 11.507812500 2.507812509 8.507812503 1.757812510 7.757812504 4.757812507 10.757812501 6.257812506 0.257812512 9.257812503 3.257812509 1.195312511 7.195312505 4.195312508 10.195312502 8.695312503 2.695312509 11.695312500 5.695312506 10.945312501 4.945312507 7.945312504 1.945312510 3.445312509 9.445312503 0.445312512 6.445312506 4.570312507 10.570312501 1.570312510 7.570312504 9.070312503 3.070312509 6.070312506 0.070312512 6.820312505 0.820312511 9.820312502 3.820312508 2.320312510 8.320312504 5.320312507 11.320312501 5.976562506 11.976562500 2.976562509 8.976562503 10.476562502 4.476562508 7.476562505 1.476562511 6.726562505 0.726562511 9.726562502 3.726562508 2.226562510 8.226562504 5.226562507 11.226562501 0.351562512 6.351562506 3.351562509 9.351562503 7.851562504 1.851562510 10.851562501 4.851562507 11.601562500 5.601562506 8.601562503 2.601562509 4.101562508 10.101562502 1.101562511 7.101562505 9.539062502 3.539062508 6.539062505 0.539062511 5.039062507 11.039062501 2.039062510 8.039062504 2.789062509 8.789062503 5.789062506 11.789062500 7.289062505 1.289062511 10.289062502 4.289062508 8.414062504 2.414062510 11.414062501 5.414062507 0.914062511 6.914062505 3.914062508 9.914062502 3.164062509 9.164062503 0.164062512 6.164062506 10.664062501 4.664062507 7.664062504 1.664062510 10.804687501 4.804687507 7.804687504 1.804687510 3.304687509 9.304687503 0.304687512 6.304687506 1.054687511 7.054687505 4.054687508 10.054687502 8.554687503 2.554687509 11.554687500 5.554687506 7.429687505 1.429687511 10.429687502 4.429687508 2.929687509 8.929687503 5.929687506 11.929687500 5.179687507 11.179687501 2.179687510 8.179687504 9.679687502 3.679687508 6.679687505 0.679687511 3.867187508 9.867187502 0.867187511 6.867187505 11.367187501 5.367187507 8.367187504 2.367187510 7.617187504 1.617187510 10.617187501 4.617187507 0.117187512 6.117187506 3.117187509 9.117187503 1.992187510 7.992187504 4.992187507 10.992187501 6.492187506 0.492187512 9.492187503 3.492187509 10.242187502 4.242187508 7.242187505 1.242187511 5.742187506 11.742187500 2.742187509 8.742187503 2.460937510 8.460937504 5.460937507 11.460937501 6.960937505 0.960937511 9.960937502 3.960937508 9.210937503 3.210937509 6.210937506 0.210937512 4.710937507 10.710937501 1.710937510 7.710937504 3.585937508 9.585937502 0.585937511 6.585937505 11.085937501 5.085937507 8.085937504 2.085937510 8.835937503 2.835937509 11.835937500 5.835937506 1.335937511 7.335937505 4.335937508 10.335937502 6.023437506 0.023437512 9.023437503 3.023437509 1.523437510 7.523437504 4.523437507 10.523437501 5.273437507 11.273437501 2.273437510 8.273437504 9.773437502 3.773437508 6.773437505 0.773437511 11.648437500 5.648437506 8.648437503 2.648437509 4.148437508 10.148437502 1.148437511 7.148437505 0.398437512 6.398437506 3.398437509 9.398437503 7.898437504 1.898437510 10.898437501 4.898437507)
	
	# SOM radius decay constant (floating point) (0.0:inf]
	kernelWidthDecays=(0.000000001 50.000000001 25.000000001 75.000000000 87.500000000 37.500000001 62.500000000 12.500000001 43.750000001 93.750000000 18.750000001 68.750000000 56.250000000 6.250000001 81.250000000 31.250000001 65.625000000 15.625000001 90.625000000 40.625000001 28.125000001 78.125000000 3.125000001 53.125000000 84.375000000 34.375000001 59.375000000 9.375000001 21.875000001 71.875000000 46.875000001 96.875000000 54.687500000 4.687500001 79.687500000 29.687500001 42.187500001 92.187500000 17.187500001 67.187500000 98.437500000 48.437500001 73.437500000 23.437500001 10.937500001 60.937500000 35.937500001 85.937500000 14.062500001 64.062500000 39.062500001 89.062500000 76.562500000 26.562500001 51.562500000 1.562500001 32.812500001 82.812500000 7.812500001 57.812500000 70.312500000 20.312500001 95.312500000 45.312500001 83.593750000 33.593750001 58.593750000 8.593750001 21.093750001 71.093750000 46.093750001 96.093750000 64.843750000 14.843750001 89.843750000 39.843750001 27.343750001 77.343750000 2.343750001 52.343750000 49.218750001 99.218750000 24.218750001 74.218750000 61.718750000 11.718750001 86.718750000 36.718750001 5.468750001 55.468750000 30.468750001 80.468750000 92.968750000 42.968750001 67.968750000 17.968750001 35.156250001 85.156250000 10.156250001 60.156250000 72.656250000 22.656250001 97.656250000 47.656250001 16.406250001 66.406250000 41.406250001 91.406250000 78.906250000 28.906250001 53.906250000 3.906250001 94.531250000 44.531250001 69.531250000 19.531250001 7.031250001 57.031250000 32.031250001 82.031250000 50.781250000 0.781250001 75.781250000 25.781250001 38.281250001 88.281250000 13.281250001 63.281250000 19.140625001 69.140625000 44.140625001 94.140625000 81.640625000 31.640625001 56.640625000 6.640625001 25.390625001 75.390625000 0.390625001 50.390625000 62.890625000 12.890625001 87.890625000 37.890625001 59.765625000 9.765625001 84.765625000 34.765625001 47.265625001 97.265625000 22.265625001 72.265625000 91.015625000 41.015625001 66.015625000 16.015625001 3.515625001 53.515625000 28.515625001 78.515625000 73.828125000 23.828125001 98.828125000 48.828125001 36.328125001 86.328125000 11.328125001 61.328125000 80.078125000 30.078125001 55.078125000 5.078125001 17.578125001 67.578125000 42.578125001 92.578125000 8.203125001 58.203125000 33.203125001 83.203125000 95.703125000 45.703125001 70.703125000 20.703125001 39.453125001 89.453125000 14.453125001 64.453125000 51.953125000 1.953125001 76.953125000 26.953125001 90.234375000 40.234375001 65.234375000 15.234375001 2.734375001 52.734375000 27.734375001 77.734375000 58.984375000 8.984375001 83.984375000 33.984375001 46.484375001 96.484375000 21.484375001 71.484375000 30.859375001 80.859375000 5.859375001 55.859375000 68.359375000 18.359375001 93.359375000 43.359375001 24.609375001 74.609375000 49.609375001 99.609375000 87.109375000 37.109375001 62.109375000 12.109375001 41.796875001 91.796875000 16.796875001 66.796875000 54.296875000 4.296875001 79.296875000 29.296875001 10.546875001 60.546875000 35.546875001 85.546875000 98.046875000 48.046875001 73.046875000 23.046875001 76.171875000 26.171875001 51.171875000 1.171875001 13.671875001 63.671875000 38.671875001 88.671875000 69.921875000 19.921875001 94.921875000 44.921875001 32.421875001 82.421875000 7.421875001 57.421875000 29.492187501 79.492187500 4.492187501 54.492187500 66.992187500 16.992187501 91.992187500 41.992187501 23.242187501 73.242187500 48.242187501 98.242187500 85.742187500 35.742187501 60.742187500 10.742187501 88.867187500 38.867187501 63.867187500 13.867187501 1.367187501 51.367187500 26.367187501 76.367187500 57.617187500 7.617187501 82.617187500 32.617187501 45.117187501 95.117187500 20.117187501 70.117187500 77.929687500 27.929687501 52.929687500 2.929687501 15.429687501 65.429687500 40.429687501 90.429687500 71.679687500 21.679687501 96.679687500 46.679687501 34.179687501 84.179687500 9.179687501 59.179687500 43.554687501 93.554687500 18.554687501 68.554687500 56.054687500 6.054687501 81.054687500 31.054687501 12.304687501 62.304687500 37.304687501 87.304687500 99.804687500 49.804687501 74.804687500 24.804687501 61.523437500 11.523437501 86.523437500 36.523437501 49.023437501 99.023437500 24.023437501 74.023437500 92.773437500 42.773437501 67.773437500 17.773437501 5.273437501 55.273437500 30.273437501 80.273437500 20.898437501 70.898437500 45.898437501 95.898437500 83.398437500 33.398437501 58.398437500 8.398437501 27.148437501 77.148437500 2.148437501 52.148437500 64.648437500 14.648437501 89.648437500 39.648437501 6.835937501 56.835937500 31.835937501 81.835937500 94.335937500 44.335937501 69.335937500 19.335937501 38.085937501 88.085937500 13.085937501 63.085937500 50.585937500 0.585937501 75.585937500 25.585937501 72.460937500 22.460937501 97.460937500 47.460937501 34.960937501 84.960937500 9.960937501 59.960937500 78.710937500 28.710937501 53.710937500 3.710937501 16.210937501 66.210937500 41.210937501 91.210937500 47.851562501 97.851562500 22.851562501 72.851562500 60.351562500 10.351562501 85.351562500 35.351562501 4.101562501 54.101562500 29.101562501 79.101562500 91.601562500 41.601562501 66.601562500 16.601562501 82.226562500 32.226562501 57.226562500 7.226562501 19.726562501 69.726562500 44.726562501 94.726562500 63.476562500 13.476562501 88.476562500 38.476562501 25.976562501 75.976562500 0.976562501 50.976562500 96.289062500 46.289062501 71.289062500 21.289062501 8.789062501 58.789062500 33.789062501 83.789062500 52.539062500 2.539062501 77.539062500 27.539062501 40.039062501 90.039062500 15.039062501 65.039062500 36.914062501 86.914062500 11.914062501 61.914062500 74.414062500 24.414062501 99.414062500 49.414062501 18.164062501 68.164062500 43.164062501 93.164062500 80.664062500 30.664062501 55.664062500 5.664062501 67.382812500 17.382812501 92.382812500 42.382812501 29.882812501 79.882812500 4.882812501 54.882812500 86.132812500 36.132812501 61.132812500 11.132812501 23.632812501 73.632812500 48.632812501 98.632812500 1.757812501 51.757812500 26.757812501 76.757812500 89.257812500 39.257812501 64.257812500 14.257812501 45.507812501 95.507812500 20.507812501 70.507812500 58.007812500 8.007812501 83.007812500 33.007812501 12.695312501 62.695312500 37.695312501 87.695312500 75.195312500 25.195312501 50.195312500 0.195312501 31.445312501 81.445312500 6.445312501 56.445312500 68.945312500 18.945312501 93.945312500 43.945312501 53.320312500 3.320312501 78.320312500 28.320312501 40.820312501 90.820312500 15.820312501 65.820312500 97.070312500 47.070312501 72.070312500 22.070312501 9.570312501 59.570312500 34.570312501 84.570312500)
	
	# check that all arrays are the same length (otherwise we can't run through all parameter settings)
	if [ ${#mapDimensions[*]} -ne ${#learningRates[*]} ] || [ ${#mapDimensions[*]} -ne ${#learningRateDecays[*]} ] || [ ${#mapDimensions[*]} -ne ${#kernelWidths[*]} ] || [ ${#mapDimensions[*]} -ne ${#kernelWidthDecays[*]} ]; then
		echo "Error: parameter array sizes do not match"
		rm -f *.train *.test *.names
		exit
	fi
	
	# check for valid labeling method
	if [ ${neuronLabelingMethod} -ne 0 ] && [ ${neuronLabelingMethod} -ne 1 ] && [ ${neuronLabelingMethod} -ne 2 ] && [ ${neuronLabelingMethod} -ne 3 ]; then
		echo "Error: Invalid neuron labeling method"
		rm -f *.train *.test *.names
		exit
	fi
	
	# pre-generate initialized maps for each of the specified map dimensions (since this is a time-consuming task)
	echo "Generating maps..."
	
	for ((position = 0; position < ${#mapDimensions[*]}; ++position))
	do
		
		if [ ! -f ${1}.${mapDimensions[position]}.0.map ]; then
			echo -n "Map dimension ${mapDimensions[position]} x ${mapDimensions[position]}: "
			
			for ((simNum = 0; simNum < 30; ++simNum))
			do
				echo -n "$simNum "
				sleep 1
				./../../algorithms/SOM_PAK/lininit -din ${1}.data.${simNum}.som.train -cout ${1}.${mapDimensions[position]}.${simNum}.map -topol hexa -neigh gaussian -xdim ${mapDimensions[position]} -ydim ${mapDimensions[position]} > /dev/null
			done
			
			echo
		fi
		
	done
	
	echo "=============================================="
	
	for ((position = 0; position < ${#mapDimensions[*]}; ++position))
	do
		echo "Simulation ${currentSimulation}"
		echo "=============================================="
		
		echo "Map dimensions: ${mapDimensions[position]} x ${mapDimensions[position]}"
		echo "Initial learning rate: ${learningRates[position]}"
		echo "Learning rate decay constant: ${learningRateDecays[position]}"
		echo "Kernel width: ${kernelWidths[position]}"
		echo "Radius decay constant: ${kernelWidthDecays[position]}"
		
		if [ ${neuronLabelingMethod} -eq 0 ]; then
			echo "Labeling method: example-centric neuron labeling"
		elif [ ${neuronLabelingMethod} -eq 1 ]; then
			echo "Labeling method: example-centric cluster labeling (K-Means)"
		elif [ ${neuronLabelingMethod} -eq 2 ]; then
			echo "Labeling method: example-centric cluster labeling (Ward)"
		elif [ ${neuronLabelingMethod} -eq 3 ]; then
			echo "Labeling method: weight-centric neuron labeling"
		fi
		
		# run 30 cross validated simulations
		runCrossValidation ${1} ${neuronLabelingMethod} ${mapDimensions[position]} ${learningRates[position]} ${learningRateDecays[position]} ${kernelWidths[position]} ${kernelWidthDecays[position]}
		
		echo "=============================================="
		let currentSimulation++
	done
	
	rm -f *.map
	
	echo "Status: Simulations completed"
	
}

# ===================================================================================================
# Function : cleanUp()
# Purpose  : Cleans up files created during simulation run
# Return   : None
# ===================================================================================================

cleanUp() {
	
	echo -n "Status: Cleaning up...  "
	
	# clean up created files
	rm *.names *.train *.test
	
	echo "DONE"
	
}

# ===================================================================================================
# Main script
# ===================================================================================================

export CLASSPATH=/home/wvheerden/Dropbox/Documents/Simulations/algorithms/BuildSets:/home/wvheerden/Dropbox/Documents/Simulations/algorithms/AverageRunResults:.

validateSystem ${1}
buildSets ${1}
runSims ${1}
cleanUp ${1}
