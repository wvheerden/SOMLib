# ===================================================================================================
# Script        : crossValidateHybridSOM_C4_5.sh
# Usage         : ./crossValidateHybridSOM_C4_5.sh [simDirectory]
# Purpose       : Performs a cross-validated paired test on parameter data set using HybridSOM
#                 framework configured with C4_5
#
# Preconditions : - All required simulation-related programs are present
#                 - Data set as directory name in dataset directory must exist and be in correct form
#                   (i.e. no header, one record per line, comma delimited, last value is class label)
# ===================================================================================================

#!/bin/bash

# ===================================================================================================
# Function : validateSystem(simDirectory)
# Purpose  : Validates components required for cross validation run (based on simDirectory)
# Return   : None
# ===================================================================================================

validateSystem() {
	
	# check for correct number of parameters
	if [ -z ${1} ]; then
		echo "Usage: ./crossValidate.sh [simDirectory]"
		exit
	fi
	
	echo "Status: Validating system..."
	echo "=============================================="
	
	# check for data directory
	echo -n "Simulation directory \"${1}\"...  "
	if [ ! -d ../../datasets/${1} ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for original data file in simulation directory
	echo -n "Data file \"${1}/original/${1}.data\"...  "
	if [ ! -f ../../datasets/${1}/original/${1}.data ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for cross validation set building script
	echo -n "Cross validation set building script...  "
	if [ ! -f ../../algorithms/BuildSets/BuildSets.class ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK data conversion script
	echo -n "Conversion script \"${1}/convert_som.awk\"...  "
	if [ ! -f ./../../datasets/${1}/convert_som.awk ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK names script
	echo -n "Names script \"${1}/names_som.sh\"...  "
	if [ ! -f ./../../datasets/${1}/names_som.sh ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK initialisation program
	echo -n "SOM initialisation program...  "
	if [ ! -f ../../algorithms/SOM_PAK/lininit ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK training program
	echo -n "SOM training program...  "
	if [ ! -f ../../algorithms/SOM_PAK/vsom ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for example-centric neuron labeling program
	echo -n "Example-centric neuron labeling program...  "
	if [ ! -f./../../algorithms/ExampleCentricNeuron/outputlabels ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for example-centric K-means cluster labeling program
	echo -n "Example-centric K-means cluster labeling program...  "
	if [ ! -f./../../algorithms/ExampleCentricClusterKMeans/outputLabels ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for example-centric Ward cluster labeling program
	echo -n "Example-centric Ward cluster labeling program...  "
	if [ ! -f./../../algorithms/ExampleCentricClusterWard/outputLabels ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for weight-centric neuron labeling program
	echo -n "Weight-centric neuron labeling program...  "
	if [ ! -f./../../algorithms/WeightCentricNeuron/outputLabels ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for C4.5 data conversion script
	echo -n "Data conversion script \"${1}/convert_c4_5.awk\"...  "
	if [ ! -f ./../../datasets/${1}/convert_c4_5.awk ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for C4.5 program
	echo -n "C4.5 program...  "
	if [ ! -f ../../algorithms/C4_5/Src/c4.5 ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	#check for results averaging program
	echo -n "Results averaging program...  "
	if [ ! -f ../../algorithms/AverageRunResults/AverageRuleSetResults.class ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	echo "=============================================="
	echo "Status: System OK..."
	
}

# ===================================================================================================
# Function : buildSets(simDirectory)
# Purpose  : Builds data sets required for cross validation simulations (based on simDirectory)
# Return   : None
# ===================================================================================================

buildSets() {
	
	echo "Status: Performing cross validation set builds"
	
	# build raw training and test sets (must still be converted to SOM_PAK and C4.5 formats)
	if [ ${1} == "ionosphere" ]; then
		echo "Status: Building set for IONOSPHERE database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	elif [ ${1} == "iris" ]; then
		echo "Status: Building set for IRIS database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	elif [ ${1} == "monks1" ]; then
		echo "Status: Building set for MONKS1 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	elif [ ${1} == "monks2" ]; then
		echo "Status: Building set for MONKS2 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	elif [ ${1} == "monks3" ]; then
		echo "Status: Building set for MONKS3 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 5
	elif [ ${1} == "pima" ]; then
		echo "Status: Building set for PIMA database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	else
		echo "Status: Unrecognised set"
		echo "Status: Building default"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	fi
	
	echo "=============================================="
	echo "Status: Cross validation sets built"
	
	echo -n "Status: Performing data set conversions...  "
	
	# create SOM names file
	./../../datasets/${1}/names_som.sh > ${1}.som.names
	
	# create C4.5 names file
	./../../datasets/${1}/names_c4_5_for_som.sh > ${1}.c4-5.names
	
	# perform conversion of data set from raw form to SOM_PAK and C4.5 format, creating [simulation].data
	for ((dataset = 0; dataset < 30; ++dataset))
	do
		gawk -f ./../../datasets/${1}/convert_som.awk ${1}.data.raw.${dataset}.train > ${1}.data.${dataset}.som.train
		gawk -f ./../../datasets/${1}/convert_c4_5.awk ${1}.data.raw.${dataset}.train > ${1}.data.${dataset}.c4-5.eval.train
		rm -f ${1}.data.raw.${dataset}.train
		gawk -f ./../../datasets/${1}/convert_c4_5.awk ${1}.data.raw.${dataset}.test > ${1}.data.${dataset}.c4-5.eval.test
		rm -f ${1}.data.raw.${dataset}.test
	done
	
	echo "DONE"
	
}

# ===================================================================================================
# Function : runCrossValidation(simDirectory, neuronLabelingMethod, mapDim, learningRate, learningRateDecay, kernelWidth,
#            radiusDecay, minOutcomes, heuristic, pruningConfidence, FisherConfidence, redundancy)
# Purpose  : Performs a single cross validation using provided parameters
# Return   : None
# ===================================================================================================

runCrossValidation () {
	
	# get description string for neuron labeling method (0 = neuron; 1 = K-means cluster; 2 = Ward cluster; 3 = weight-centric)
	if [ ${2} -eq 0 ]; then
		neuronLabelingMethodDescription="neuron"
	elif [ ${2} -eq 1 ]; then
		neuronLabelingMethodDescription="k-means"
	elif [ ${2} -eq 2 ]; then
		neuronLabelingMethodDescription="ward"
	elif [ ${2} -eq 3 ]; then
		neuronLabelingMethodDescription="weight-centric"
	fi
	
	# get description string for tree test heuristic (0 = gain ratio; 1 = gain)
	if [ ${9} -eq 0 ]; then
		heuristicDescription="gratio"
	elif [ ${9} -eq 1 ]; then
		heuristicDescription="gain"
	fi
	
	if [ ${compareResult} -eq 1 ]; then
		FisherDescription="na"
	else
		FisherDescription=${11}
	fi
	
	if [ -f hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_minOut_${8}_heur_${heuristicDescription}_prunConf_${10}_fisher_${FisherDescription}_redun_${12}.accuracy ]; then
		rm -f hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_minOut_${8}_heur_${heuristicDescription}_prunConf_${10}_fisher_${FisherDescription}_redun_${12}.accuracy
	fi
	
	if [ -f hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_minOut_${8}_heur_${heuristicDescription}_prunConf_${10}_fisher_${FisherDescription}_redun_${12}.error ]; then
		rm -f hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_minOut_${8}_heur_${heuristicDescription}_prunConf_${10}_fisher_${FisherDescription}_redun_${12}.error
	fi
	
	for ((simNum = 0; simNum < 30; ++simNum))
	do
		echo -n "${simNum} "
		
		# execute SOM_PAK
		./../../algorithms/SOM_PAK/vsom -din ${1}.data.${simNum}.som.train -vin ${1}.data.${simNum}.som.train -cin ${1}.${3}.${simNum}.map -cout ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.map.out -lrate ${4} -lratedecay ${5} -radius ${6} -radiusdecay ${7} -rand 0 >> /dev/null 2> /dev/null
		
		# execute appropriate neuron labeling algorithm on SOM_PAK output, producing training data file for C4.5 tree building
		if [ ${2} -eq 0 ]; then
			./../../algorithms/ExampleCentricNeuron/outputLabels ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.som.names -c4.5 ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.data > /dev/null
		elif [ ${2} -eq 1 ]; then
			./../../algorithms/ExampleCentricClusterKMeans/outputLabels ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.som.names -c4.5 ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.data > /dev/null
		elif [ ${2} -eq 2 ]; then
			./../../algorithms/ExampleCentricClusterWard/outputLabels ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.som.names -c4.5 ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.data > /dev/null
		elif [ ${2} -eq 3 ]; then
			./../../algorithms/WeightCentricNeuron/outputLabels ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.som.names -c4.5 ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.data > /dev/null
		fi
		
		# prepare names file, training data, and test data set for C4.5 run
		cp ${1}.c4-5.names ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.names
		cp ${1}.data.${simNum}.c4-5.eval.train ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.train
		cp ${1}.data.${simNum}.c4-5.eval.test ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.test
		
		# execute C4.5 to build tree
		if [ ${9} -eq 0 ]; then
			# gain ratio criterion
			./../../algorithms/C4_5/Src/c4.5 -f ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum} -m ${8} > /dev/null
		else
			# gain criterion
			./../../algorithms/C4_5/Src/c4.5 -f ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum} -m ${8} -g > /dev/null
		fi
		
		# check for error in tree build
		if [ $? -ne 0 ]; then
			echo -n "[error_tree] "
		else
			# execute C4.5 rule inducer, output results to tmp file
			if [ ${compareResult} = 1 ]; then
				# don't use Fisher's exact pruning if the pruning confidence is negative
				./../../algorithms/C4_5/Src/c4.5rules -f ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum} -u -t -c ${10} -r ${12} > ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.tmp
			else
				# use Fisher's exact pruning
				./../../algorithms/C4_5/Src/c4.5rules -f ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum} -u -t -c ${10} -r ${12} -F ${11} > ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.tmp
			fi
			
			# check for error in rule extraction
			if [ $? -ne 0 ]; then
				echo -n "[error_rules] "
			else
				# extract training and generalization accuracy, misclassification accuracy (which is simply 0, because it isn't defined), and unclassified accuracy (which is simply 0, because it isn't defined)
				grep "<<" ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.tmp | gawk '{ if (FNR != 1) printf "%s\t0.0\t0.0\t", 100.0-$6 }' >> hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_minOut_${8}_heur_${heuristicDescription}_prunConf_${10}_fisher_${FisherDescription}_redun_${12}.accuracy
				
				# extract training and generalization error, misclassification error (same as overall error), and unclassified error (which is simply 0, because C4.5 classifies every example)
				grep "<<" ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.tmp | gawk '{ if (FNR != 1) printf "%s\t%s\t0.0\t", $6, $6 }' >> hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_minOut_${8}_heur_${heuristicDescription}_prunConf_${10}_fisher_${FisherDescription}_redun_${12}.error
				
				# get total condition count (+1 for default rule), number of rules (+1 for default rule), and average conditions per rule (considering default rule to be a single rule with 1 condition)
				java GetRuleSetConditionCountC4_5 ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.tmp >> hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_minOut_${8}_heur_${heuristicDescription}_prunConf_${10}_fisher_${FisherDescription}_redun_${12}.accuracy
				java GetRuleSetConditionCountC4_5 ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.tmp >> hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_minOut_${8}_heur_${heuristicDescription}_prunConf_${10}_fisher_${FisherDescription}_redun_${12}.error
			fi
			
		fi
		
		if [ ${simNum} -ne 29 ]; then
			echo "" >> hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_minOut_${8}_heur_${heuristicDescription}_prunConf_${10}_fisher_${FisherDescription}_redun_${12}.accuracy
			echo "" >> hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_minOut_${8}_heur_${heuristicDescription}_prunConf_${10}_fisher_${FisherDescription}_redun_${12}.error
		fi
		
		# clean up
		rm -f *.map.out *.unpruned *.tree *.rules *.tmp
		
		rm -f ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.names
		rm -f ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.train
		rm -f ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.test
		rm -f ${1}_${neuronLabelingMethodDescription}_${3}_${4}_${5}_${6}_${7}_${8}_${heuristicDescription}_${10}_${FisherDescription}_${12}_${simNum}.data
	done
	
	# calculate confidence intervals
	java AverageRuleSetResults -accuracy hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_minOut_${8}_heur_${heuristicDescription}_prunConf_${10}_fisher_${FisherDescription}_redun_${12}.accuracy hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}.accuracy.summary
	java AverageRuleSetResults -error hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_minOut_${8}_heur_${heuristicDescription}_prunConf_${10}_fisher_${FisherDescription}_redun_${12}.error hybridsom-c4-5_${1}_${neuronLabelingMethodDescription}.error.summary
	
	echo ""
	
}

# ===================================================================================================
# Function : runSims(simDirectory)
# Purpose  : Runs simulations for specified simDirectory [assumes built data sets]
# Return   : None
# ===================================================================================================

runSims () {
	
	echo "Status: Running simulations"
	echo "=============================================="
	
	# number of current simulation
	currentSimulation=1
	
	# neuron labeling method (0 = neuron; 1 = K-means cluster; 2 = Ward cluster; 3 = weight-centric)
	neuronLabelingMethod=0
	
	# SOM map dimension: (integer) [2:inf] (No default)
	mapDimensions=(2 15 21 8 11 24 18 5 7 19 25 13 10 22 16 4 4 17 23 11 14 26 20 7 6 18 25 12 9 22 15 3 3 16 22 9 13 25 19 6 8 20 27 14 11 23 17 5 4 16 23 10 13 26 20 7 6 18 24 12 9 21 15 2 3 15 21 9 12 24 18 6 7 20 26 14 10 23 17 4 5 17 24 11 14 27 21 8 6 19 25 13 10 22 16 3 3 15 22 9 12 25 19 6 8 20 26 14 11 23 17 5 4 16 23 10 13 26 19 7 5 18 24 12 8 21 15 2 2 15 21 9 12 24 18 5 7 19 26 13 10 23 16 4 5 17 23 11 14 27 20 8 6 19 25 12 9 22 16 3 3 16 22 10 13 25 19 7 8 21 27 14 11 24 18 5 4 17 23 10 14 26 20 7 6 18 25 12 9 21 15 3 2 15 21 9 12 24 18 6 7 20 26 13 10 23 17 4 5 17 24 11 14 27 20 8 6 19 25 13 10 22 16 3 3 15 22 9 12 25 19 6 8 20 26 14 11 23 17 4 4 16 22 10 13 26 19 7 5 18 24 11 8 21 15 2 2 15 21 8 12 24 18 5 7 19 26 13 10 22 16 4 4 17 23 11 14 26 20 8 6 19 25 12 9 22 15 3 3 16 22 10 13 25 19 6 8 21 27 14 11 24 17 5 4 17 23 10 13 26 20 7 6 18 24 12 9 21 15 3 3 15 21 9 12 25 18 6 7 20 26 14 11 23 17 4 5 18 24 11 14 27 21 8 7 19 25 13 10 22 16 4 3 16 22 9 12 25 19 6 8 20 27 14 11 23 17 5 4 16 23 10 13 26 20 7 5 18 24 12 9 21 15 2 2 15 21 8 12 24 18 5 7 19 26 13 10 23 16 4 5 17 23 11 14 26 20 8 6 19 25 12 9 22 16 3 3 16 22 10 13 25 19 7 8 21 27 14 11 24 17 5 4 17 23 10 14 26 20 7 6 18 25 12 9 21 15 3 2 15 21 9 12 24 18 6 7 20 26 13 10 23 17 4 5 17 24 11 14 27 20 8 6 19 25 13 9 22 16 3 3 15 22 9 12 25 18 6 8 20 26 14 11 23 17 4 4 16 22 10 13 25 19 7 5 18 24 11 8 21 15 2)
	
	# SOM initial learning rate (floating point) [0.0:inf] (Default: 1)
	learningRates=(0 5 2.5 7.5 3.75 8.75 1.25 6.25 3.125 8.125 0.625 5.625 1.875 6.875 4.375 9.375 4.6875 9.6875 2.1875 7.1875 0.9375 5.9375 3.4375 8.4375 1.5625 6.5625 4.0625 9.0625 2.8125 7.8125 0.3125 5.3125 2.65625 7.65625 0.15625 5.15625 1.40625 6.40625 3.90625 8.90625 0.78125 5.78125 3.28125 8.28125 4.53125 9.53125 2.03125 7.03125 2.34375 7.34375 4.84375 9.84375 3.59375 8.59375 1.09375 6.09375 4.21875 9.21875 1.71875 6.71875 0.46875 5.46875 2.96875 7.96875 3.984375 8.984375 1.484375 6.484375 0.234375 5.234375 2.734375 7.734375 2.109375 7.109375 4.609375 9.609375 3.359375 8.359375 0.859375 5.859375 1.171875 6.171875 3.671875 8.671875 4.921875 9.921875 2.421875 7.421875 3.046875 8.046875 0.546875 5.546875 1.796875 6.796875 4.296875 9.296875 1.328125 6.328125 3.828125 8.828125 2.578125 7.578125 0.078125 5.078125 4.453125 9.453125 1.953125 6.953125 0.703125 5.703125 3.203125 8.203125 3.515625 8.515625 1.015625 6.015625 2.265625 7.265625 4.765625 9.765625 0.390625 5.390625 2.890625 7.890625 4.140625 9.140625 1.640625 6.640625 3.3203125 8.3203125 0.8203125 5.8203125 2.0703125 7.0703125 4.5703125 9.5703125 0.1953125 5.1953125 2.6953125 7.6953125 3.9453125 8.9453125 1.4453125 6.4453125 1.7578125 6.7578125 4.2578125 9.2578125 3.0078125 8.0078125 0.5078125 5.5078125 4.8828125 9.8828125 2.3828125 7.3828125 1.1328125 6.1328125 3.6328125 8.6328125 0.6640625 5.6640625 3.1640625 8.1640625 4.4140625 9.4140625 1.9140625 6.9140625 2.5390625 7.5390625 0.0390625 5.0390625 1.2890625 6.2890625 3.7890625 8.7890625 4.1015625 9.1015625 1.6015625 6.6015625 0.3515625 5.3515625 2.8515625 7.8515625 2.2265625 7.2265625 4.7265625 9.7265625 3.4765625 8.4765625 0.9765625 5.9765625 1.9921875 6.9921875 4.4921875 9.4921875 3.2421875 8.2421875 0.7421875 5.7421875 3.8671875 8.8671875 1.3671875 6.3671875 0.1171875 5.1171875 2.6171875 7.6171875 2.9296875 7.9296875 0.4296875 5.4296875 1.6796875 6.6796875 4.1796875 9.1796875 1.0546875 6.0546875 3.5546875 8.5546875 4.8046875 9.8046875 2.3046875 7.3046875 4.6484375 9.6484375 2.1484375 7.1484375 0.8984375 5.8984375 3.3984375 8.3984375 1.5234375 6.5234375 4.0234375 9.0234375 2.7734375 7.7734375 0.2734375 5.2734375 0.5859375 5.5859375 3.0859375 8.0859375 4.3359375 9.3359375 1.8359375 6.8359375 3.7109375 8.7109375 1.2109375 6.2109375 2.4609375 7.4609375 4.9609375 9.9609375 4.98046875 9.98046875 2.48046875 7.48046875 1.23046875 6.23046875 3.73046875 8.73046875 1.85546875 6.85546875 4.35546875 9.35546875 3.10546875 8.10546875 0.60546875 5.60546875 0.29296875 5.29296875 2.79296875 7.79296875 4.04296875 9.04296875 1.54296875 6.54296875 3.41796875 8.41796875 0.91796875 5.91796875 2.16796875 7.16796875 4.66796875 9.66796875 2.32421875 7.32421875 4.82421875 9.82421875 3.57421875 8.57421875 1.07421875 6.07421875 4.19921875 9.19921875 1.69921875 6.69921875 0.44921875 5.44921875 2.94921875 7.94921875 2.63671875 7.63671875 0.13671875 5.13671875 1.38671875 6.38671875 3.88671875 8.88671875 0.76171875 5.76171875 3.26171875 8.26171875 4.51171875 9.51171875 2.01171875 7.01171875 0.99609375 5.99609375 3.49609375 8.49609375 4.74609375 9.74609375 2.24609375 7.24609375 2.87109375 7.87109375 0.37109375 5.37109375 1.62109375 6.62109375 4.12109375 9.12109375 3.80859375 8.80859375 1.30859375 6.30859375 0.05859375 5.05859375 2.55859375 7.55859375 1.93359375 6.93359375 4.43359375 9.43359375 3.18359375 8.18359375 0.68359375 5.68359375 3.65234375 8.65234375 1.15234375 6.15234375 2.40234375 7.40234375 4.90234375 9.90234375 0.52734375 5.52734375 3.02734375 8.02734375 4.27734375 9.27734375 1.77734375 6.77734375 1.46484375 6.46484375 3.96484375 8.96484375 2.71484375 7.71484375 0.21484375 5.21484375 4.58984375 9.58984375 2.08984375 7.08984375 0.83984375 5.83984375 3.33984375 8.33984375 1.66015625 6.66015625 4.16015625 9.16015625 2.91015625 7.91015625 0.41015625 5.41015625 4.78515625 9.78515625 2.28515625 7.28515625 1.03515625 6.03515625 3.53515625 8.53515625 3.22265625 8.22265625 0.72265625 5.72265625 1.97265625 6.97265625 4.47265625 9.47265625 0.09765625 5.09765625 2.59765625 7.59765625 3.84765625 8.84765625 1.34765625 6.34765625 4.31640625 9.31640625 1.81640625 6.81640625 0.56640625 5.56640625 3.06640625 8.06640625 2.44140625 7.44140625 4.94140625 9.94140625 3.69140625 8.69140625 1.19140625 6.19140625 0.87890625 5.87890625 3.37890625 8.37890625 4.62890625 9.62890625 2.12890625 7.12890625 2.75390625 7.75390625 0.25390625 5.25390625 1.50390625 6.50390625 4.00390625 9.00390625 2.98828125 7.98828125 0.48828125 5.48828125 1.73828125 6.73828125 4.23828125 9.23828125 1.11328125 6.11328125 3.61328125 8.61328125 4.86328125 9.86328125 2.36328125 7.36328125 2.05078125 7.05078125 4.55078125 9.55078125 3.30078125 8.30078125 0.80078125 5.80078125 3.92578125 8.92578125 1.42578125 6.42578125 0.17578125 5.17578125 2.67578125 7.67578125 0.33203125 5.33203125 2.83203125 7.83203125 4.08203125 9.08203125 1.58203125 6.58203125 3.45703125 8.45703125 0.95703125 5.95703125 2.20703125 7.20703125 4.70703125 9.70703125 4.39453125 9.39453125 1.89453125 6.89453125 0.64453125 5.64453125 3.14453125 8.14453125 1.26953125 6.26953125 3.76953125 8.76953125 2.51953125 7.51953125 0.01953125 5.01953125)
	
	# SOM learning rate decay constant (floating point) (0.0:inf] (Default: 1000)
	learningRateDecays=(0.000000001 750.000000001 375.000000001 1125.000000000 937.500000000 187.500000001 1312.500000000 562.500000001 1406.250000000 656.250000001 1031.250000000 281.250000001 468.750000001 1218.750000000 93.750000001 843.750000000 703.125000001 1453.125000000 328.125000001 1078.125000000 1265.625000000 515.625000001 890.625000000 140.625000001 796.875000000 46.875000001 1171.875000000 421.875000001 234.375000001 984.375000000 609.375000001 1359.375000000 1054.687500000 304.687500001 1429.687500000 679.687500001 117.187500001 867.187500000 492.187500001 1242.187500000 398.437500001 1148.437500000 23.437500001 773.437500000 1335.937500000 585.937500001 960.937500000 210.937500001 1195.312500000 445.312500001 820.312500000 70.312500001 632.812500001 1382.812500000 257.812500001 1007.812500000 351.562500001 1101.562500000 726.562500001 1476.562500000 914.062500000 164.062500001 1289.062500000 539.062500001 1230.468750000 480.468750001 855.468750000 105.468750001 667.968750001 1417.968750000 292.968750001 1042.968750000 199.218750001 949.218750000 574.218750001 1324.218750000 761.718750000 11.718750001 1136.718750000 386.718750001 996.093750000 246.093750001 1371.093750000 621.093750001 58.593750001 808.593750000 433.593750001 1183.593750000 527.343750001 1277.343750000 152.343750001 902.343750000 1464.843750000 714.843750001 1089.843750000 339.843750001 597.656250001 1347.656250000 222.656250001 972.656250000 1160.156250000 410.156250001 785.156250000 35.156250001 878.906250000 128.906250001 1253.906250000 503.906250001 316.406250001 1066.406250000 691.406250001 1441.406250000 175.781250001 925.781250000 550.781250001 1300.781250000 1113.281250000 363.281250001 1488.281250000 738.281250001 1394.531250000 644.531250001 1019.531250000 269.531250001 457.031250001 1207.031250000 82.031250001 832.031250000 439.453125001 1189.453125000 64.453125001 814.453125000 1376.953125000 626.953125001 1001.953125000 251.953125001 1095.703125000 345.703125001 1470.703125000 720.703125001 158.203125001 908.203125000 533.203125001 1283.203125000 298.828125001 1048.828125000 673.828125001 1423.828125000 861.328125000 111.328125001 1236.328125000 486.328125001 1142.578125000 392.578125001 767.578125000 17.578125001 580.078125001 1330.078125000 205.078125001 955.078125000 1494.140625000 744.140625001 1119.140625000 369.140625001 556.640625001 1306.640625000 181.640625001 931.640625000 87.890625001 837.890625000 462.890625001 1212.890625000 1025.390625000 275.390625001 1400.390625000 650.390625001 791.015625000 41.015625001 1166.015625000 416.015625001 228.515625001 978.515625000 603.515625001 1353.515625000 697.265625001 1447.265625000 322.265625001 1072.265625000 1259.765625000 509.765625001 884.765625000 134.765625001 896.484375000 146.484375001 1271.484375000 521.484375001 333.984375001 1083.984375000 708.984375001 1458.984375000 615.234375001 1365.234375000 240.234375001 990.234375000 1177.734375000 427.734375001 802.734375000 52.734375001 1318.359375000 568.359375001 943.359375000 193.359375001 380.859375001 1130.859375000 5.859375001 755.859375000 99.609375001 849.609375000 474.609375001 1224.609375000 1037.109375000 287.109375001 1412.109375000 662.109375001 263.671875001 1013.671875000 638.671875001 1388.671875000 826.171875000 76.171875001 1201.171875000 451.171875001 1294.921875000 544.921875001 919.921875000 169.921875001 732.421875001 1482.421875000 357.421875001 1107.421875000 498.046875001 1248.046875000 123.046875001 873.046875000 1435.546875000 685.546875001 1060.546875000 310.546875001 966.796875000 216.796875001 1341.796875000 591.796875001 29.296875001 779.296875000 404.296875001 1154.296875000 1016.601562500 266.601562501 1391.601562500 641.601562501 79.101562501 829.101562500 454.101562501 1204.101562500 547.851562501 1297.851562500 172.851562501 922.851562500 1485.351562500 735.351562501 1110.351562500 360.351562501 1250.976562500 500.976562501 875.976562500 125.976562501 688.476562501 1438.476562500 313.476562501 1063.476562500 219.726562501 969.726562500 594.726562501 1344.726562500 782.226562500 32.226562501 1157.226562500 407.226562501 149.414062501 899.414062500 524.414062501 1274.414062500 1086.914062500 336.914062501 1461.914062500 711.914062501 1368.164062500 618.164062501 993.164062500 243.164062501 430.664062501 1180.664062500 55.664062501 805.664062500 571.289062501 1321.289062500 196.289062501 946.289062500 1133.789062500 383.789062501 758.789062500 8.789062501 852.539062500 102.539062501 1227.539062500 477.539062501 290.039062501 1040.039062500 665.039062501 1415.039062500 747.070312501 1497.070312500 372.070312501 1122.070312500 1309.570312500 559.570312501 934.570312500 184.570312501 840.820312500 90.820312501 1215.820312500 465.820312501 278.320312501 1028.320312500 653.320312501 1403.320312500 43.945312501 793.945312500 418.945312501 1168.945312500 981.445312500 231.445312501 1356.445312500 606.445312501 1450.195312500 700.195312501 1075.195312500 325.195312501 512.695312501 1262.695312500 137.695312501 887.695312500 1192.382812500 442.382812501 817.382812500 67.382812501 629.882812501 1379.882812500 254.882812501 1004.882812500 348.632812501 1098.632812500 723.632812501 1473.632812500 911.132812500 161.132812501 1286.132812500 536.132812501 1051.757812500 301.757812501 1426.757812500 676.757812501 114.257812501 864.257812500 489.257812501 1239.257812500 395.507812501 1145.507812500 20.507812501 770.507812500 1333.007812500 583.007812501 958.007812500 208.007812501 1350.585937500 600.585937501 975.585937500 225.585937501 413.085937501 1163.085937500 38.085937501 788.085937500 131.835937501 881.835937500 506.835937501 1256.835937500 1069.335937500 319.335937501 1444.335937500 694.335937501 928.710937500 178.710937501 1303.710937500 553.710937501 366.210937501 1116.210937500 741.210937501 1491.210937500 647.460937501 1397.460937500 272.460937501 1022.460937500 1209.960937500 459.960937501 834.960937500 84.960937501 483.398437501 1233.398437500 108.398437501 858.398437500 1420.898437500 670.898437501 1045.898437500 295.898437501 952.148437500 202.148437501 1327.148437500 577.148437501 14.648437501 764.648437500 389.648437501 1139.648437500 249.023437501 999.023437500 624.023437501 1374.023437500 811.523437500 61.523437501 1186.523437500 436.523437501 1280.273437500 530.273437501 905.273437500 155.273437501 717.773437501 1467.773437500 342.773437501 1092.773437500 307.617187501 1057.617187500 682.617187501 1432.617187500 870.117187500 120.117187501 1245.117187500 495.117187501 1151.367187500 401.367187501 776.367187500 26.367187501 588.867187501 1338.867187500 213.867187501 963.867187500 448.242187501 1198.242187500 73.242187501 823.242187500 1385.742187500 635.742187501 1010.742187500 260.742187501 1104.492187500 354.492187501 1479.492187500 729.492187501 166.992187501 916.992187500 541.992187501 1291.992187500 752.929687500 2.929687501 1127.929687500 377.929687501 190.429687501 940.429687500 565.429687501 1315.429687500 659.179687501 1409.179687500 284.179687501 1034.179687500 1221.679687500 471.679687501 846.679687500 96.679687501 1456.054687500 706.054687501 1081.054687500 331.054687501 518.554687501 1268.554687500 143.554687501 893.554687500 49.804687501 799.804687500 424.804687501 1174.804687500 987.304687500 237.304687501 1362.304687500 612.304687501)
	
	# SOM initial kernel width (floating point) [1.0:inf] (Default: 10)
	kernelWidths=(0.000000002 7.5000000075 5.2500000158 6.000000002 9.6250000014 9.000000015 11.2500000068 0.6250000044 3.0625000039 17.8125000012 4.6875000203 8.9375000041 5.6250000044 1.3750000206 13.000000003 1.2500000028 2.6250000014 2.6562500143 20.8437500022 4.4687500065 3.9375000101 20.3125000057 0.6250000194 3.7187500033 5.0625000009 6.1875000118 14.8437500102 1.1250000109 1.968750007 15.8125000062 7.031250008 2.9062500001 1.6406250014 0.7500000153 17.5312500045 2.6718750063 5.4843750075 23.046875002 3.2656250157 4.031250002 7.8750000001 9.6875000103 19.8281250072 3.2812500107 1.2031250098 14.015625009 6.1093750109 4.2968750007 0.5625000034 10.2500000058 8.984375014 8.9062500011 9.953125003 6.9062500191 10.3125000097 0.1093750069 1.968750004 14.9062500031 1.8750000221 6.9375000051 6.3281250027 4.2656250167 14.2968750007 0.9062500011 2.5078125005 5.03906251 12.3046875087 0.7734375082 2.5312500095 17.0625000069 8.2968750097 5.7656250002 4.5390625025 2.968750017 23.3593750026 5.5781250084 2.7343750073 17.7890625052 0.3984375166 2.0937500019 2.4609375025 16.8671875001 5.8125000182 8.1640625028 8.6406250054 3.1640625238 18.2109375028 2.9375000051 0.3281250057 10.5390625085 7.6171875174 10.4609375025 9.2968750007 9.4531250125 10.8750000051 0.5390625025 1.0546875019 12.7734375022 2.2343750198 5.4140625036 8.7187500033 5.6640625193 18.5546875004 2.8593750031 1.3125000067 13.2812500067 10.7656250152 12.7968750012 8.6796875023 6.6484375164 9.1640625078 0.1953125048 3.7812500002 7.1250000089 15.992187507 1.953125008 0.9140625121 14.8281250112 6.0859375129 5.7421875013 2.5390625025 0.1406250179 18.1875000058 3.0937500089 3.0625000049 18.5390625025 1.992187513 1.2656250007 0.3828125016 10.3710937546 9.2695312617 8.4726562505 9.7968750022 7.5937500164 10.1953125078 0.3320312547 1.7773437552 14.3242187547 0.1015625259 6.5507812564 6.2890625037 2.96484377 14.0625000019 1.5156250025 2.988281252 1.6601562653 19.4960937535 3.8242187572 6.6171875074 26.2617187507 4.4531250155 5.7812500022 5.4609375005 7.7929687612 16.5039062585 1.9218750101 0.3164062587 11.7734375102 4.5625000114 2.3554687506 2.2148437508 3.8125000122 21.7421875003 4.8828125051 4.7226562583 21.5820312534 2.1523437668 4.2929687527 6.4062500016 6.3164062647 14.8710937621 0.7109375133 1.9335937591 16.2187500078 7.6640625103 4.6289062504 0.3281250037 9.8945312571 7.6367187654 8.3203125017 13.3984375006 11.8828125141 14.1406250059 1.4492187556 2.3671875036 16.1015625019 3.6132812714 7.7343750043 4.6757812543 0.4101562706 11.5429687535 0.8085937522 1.8046875002 6.035156259 13.6992187573 1.3710937576 0.3281250117 12.6562500113 4.992187513 4.6640625013 4.1289062529 1.7968750182 21.8359375042 4.4179687586 4.6484375054 22.1914062508 3.6523437633 2.8593750011 1.5429687535 13.7460937533 1.4062500226 6.1445312549 9.5703125044 4.957031272 18.6718750013 3.4687500045 1.4765625045 14.1757812548 12.4023437626 12.9492187501 8.7109375013 8.1640625138 9.9375000061 0.3632812526 1.2539062517 13.7695312512 3.6953125183 6.011718753 6.5156250055 1.0742187739 15.0664062539 1.7578125042 0.8437500072 12.1093750079 9.2421875168 11.976562502 10.7851562502 11.0507812619 12.4179687546 0.9218750031 3.046875001 4.1875000118 11.2578125107 0.1171875099 1.7773437612 16.5546875094 7.3476562617 6.2070312508 3.4960937515 3.5859375144 22.7812500012 4.9414062561 2.5937500054 17.3085937537 1.1132812639 1.1484375009 0.5898437514 11.9238281281 0.9433593951 4.3593750036 8.039062504 4.0781250199 16.5585937514 2.0996093779 1.6269531304 13.9160156301 12.5429687635 12.7714843752 8.5742187514 7.8632812641 9.7187500063 0.4296875036 3.5546875004 6.6074218854 14.6894531333 1.5253906345 0.1914062638 13.3554687626 5.2734375147 6.1093750019 3.4570312525 1.4472656426 20.6542968793 3.9140625081 4.0605468799 20.9257812511 3.017578137 2.1035156259 2.3378906257 4.4687500115 11.6445312604 0.2929687597 2.005859386 16.3574218836 7.6816406363 5.4257812506 5.7343750023 4.5527343914 26.1035156259 6.5351562575 3.7597656322 20.2031250038 1.5605468904 2.958984377 1.7421875023 15.9042968761 4.2675781437 6.8554687531 7.2871093807 1.5742187744 16.2109375038 2.1738281298 0.7382812553 11.2148437568 8.953125015 10.4765625015 8.982421875 10.4589843855 11.2207031288 0.7441406273 1.8457031262 1.7285156383 18.1699218778 3.2871093807 5.8828125061 24.7558593752 4.3242187637 4.4414062516 6.4941406255 8.5546875114 17.6210937584 2.4882812615 0.5800781354 12.7128906353 5.1464843869 3.2109375008 1.044921879 12.7617187552 11.015625013 10.5488281255 11.6757812523 9.017578143 12.2636718837 0.6718750073 1.9003906301 14.6582031293 0.5371093995 6.7792968812 6.4648437535 3.2226562688 14.3437500017 1.5859375024 0.2050781278 9.0937500069 7.003906265 7.3652343766 11.3203125007 11.0839843889 13.1738281308 1.1601562548 3.046875005 17.6171875024 3.5332031485 8.8320312552 5.5644531304 0.1347656479 12.8496093792 1.2792968787 2.8984375011 3.5937500124 22.4160156256 4.7460937553 4.5449218835 22.0898437539 1.992187518 4.1972656278 3.9355468761 5.1679687628 12.8906250111 0.4453125116 1.4589843825 13.9042968821 6.1816406338 1.8242187502 0.957031251 14.6777343753 4.7988281412 5.8281250022 7.2421875048 2.4843750215 15.3632812526 1.7675781282 0.2871093817 10.2792968837 7.5664062684 10.2832031277 9.1601562508 9.5683593884 10.6562500053 0.6640625033 4.1113281259 5.4785156365 13.1621093848 0.7949218852 2.7617187612 18.1289062579 8.9453125111 7.5781250004 3.8085937522 2.5605468914 22.1191406279 4.6171875074 2.3378906317 16.7148437553 0.1562500158 1.5292968765 2.8886718751 7.4062500086 15.6835937563 2.1289062579 1.1425781369 14.6972656353 6.4199218876 5.8652343761 4.2031250038 0.5332031455 20.9355468811 3.8554687601 4.4042968816 21.6093750024 2.5566406394 3.2519531267 1.4765625025 14.7753906272 2.7402343953 6.1914062538 10.4179687536 6.3476562697 19.8828125001 3.4589843785 1.0898437549 12.2695312557 10.7910156392 11.1796875008 7.2597656267 6.4394531396 8.3496093817 0.1699218778 1.3476562507 2.6074218874 19.4003906266 3.8144531302 3.5859375084 19.1718750048 0.8789062671 3.2929687527 6.029296876 7.2265625128 15.8945312601 1.4472656366 2.3632812576 16.9355468811 8.2675781337 3.9453125001 0.0878906299 8.7988281332 6.4218750176 8.4433593776 12.4960937515 10.5996093914 12.8515625071 1.1406250069 2.7304687533 18.1464843759 5.1269531449 9.1660156288 5.2207031288 1.7617187702 13.2812500027 0.990234377 0.3808593776 9.4042968806 8.2929687637 7.8925781261 9.023437503 6.2988281437 9.035156259 0.011718756 2.5156250055 16.2890625037 1.6757812743 7.9023437561 7.5839843784 4.3574218936 15.970703126 1.7578125022 2.1328125019 0.5312500155 17.2304687548 2.8320312572 5.3066406327 22.7050781273 3.005859391 4.6074218774 4.8535156251 8.4726562595 17.2968750067 2.4277343836 0.7656250072 12.5097656335 5.1855468848 1.6914062503)
	
	# SOM radius decay constant (floating point) (0.0:inf] (Default: 1000)
	kernelWidthDecays=(0.000000001 50.000000001 75.000000000 25.000000001 37.500000001 87.500000000 62.500000000 12.500000001 56.250000000 6.250000001 31.250000001 81.250000000 93.750000000 43.750000001 18.750000001 68.750000000 28.125000001 78.125000000 53.125000000 3.125000001 15.625000001 65.625000000 90.625000000 40.625000001 84.375000000 34.375000001 9.375000001 59.375000000 71.875000000 21.875000001 46.875000001 96.875000000 14.062500001 64.062500000 89.062500000 39.062500001 26.562500001 76.562500000 51.562500000 1.562500001 70.312500000 20.312500001 45.312500001 95.312500000 82.812500000 32.812500001 7.812500001 57.812500000 42.187500001 92.187500000 67.187500000 17.187500001 4.687500001 54.687500000 79.687500000 29.687500001 98.437500000 48.437500001 23.437500001 73.437500000 60.937500000 10.937500001 35.937500001 85.937500000 64.843750000 14.843750001 39.843750001 89.843750000 77.343750000 27.343750001 2.343750001 52.343750000 21.093750001 71.093750000 96.093750000 46.093750001 33.593750001 83.593750000 58.593750000 8.593750001 92.968750000 42.968750001 17.968750001 67.968750000 55.468750000 5.468750001 30.468750001 80.468750000 49.218750001 99.218750000 74.218750000 24.218750001 11.718750001 61.718750000 86.718750000 36.718750001 50.781250000 0.781250001 25.781250001 75.781250000 88.281250000 38.281250001 13.281250001 63.281250000 7.031250001 57.031250000 82.031250000 32.031250001 44.531250001 94.531250000 69.531250000 19.531250001 78.906250000 28.906250001 3.906250001 53.906250000 66.406250000 16.406250001 41.406250001 91.406250000 35.156250001 85.156250000 60.156250000 10.156250001 22.656250001 72.656250000 97.656250000 47.656250001 90.234375000 40.234375001 15.234375001 65.234375000 52.734375000 2.734375001 27.734375001 77.734375000 46.484375001 96.484375000 71.484375000 21.484375001 8.984375001 58.984375000 83.984375000 33.984375001 68.359375000 18.359375001 43.359375001 93.359375000 80.859375000 30.859375001 5.859375001 55.859375000 24.609375001 74.609375000 99.609375000 49.609375001 37.109375001 87.109375000 62.109375000 12.109375001 76.171875000 26.171875001 1.171875001 51.171875000 63.671875000 13.671875001 38.671875001 88.671875000 32.421875001 82.421875000 57.421875000 7.421875001 19.921875001 69.921875000 94.921875000 44.921875001 54.296875000 4.296875001 29.296875001 79.296875000 91.796875000 41.796875001 16.796875001 66.796875000 10.546875001 60.546875000 85.546875000 35.546875001 48.046875001 98.046875000 73.046875000 23.046875001 25.390625001 75.390625000 50.390625000 0.390625001 12.890625001 62.890625000 87.890625000 37.890625001 81.640625000 31.640625001 6.640625001 56.640625000 69.140625000 19.140625001 44.140625001 94.140625000 3.515625001 53.515625000 78.515625000 28.515625001 41.015625001 91.015625000 66.015625000 16.015625001 59.765625000 9.765625001 34.765625001 84.765625000 97.265625000 47.265625001 22.265625001 72.265625000 39.453125001 89.453125000 64.453125000 14.453125001 1.953125001 51.953125000 76.953125000 26.953125001 95.703125000 45.703125001 20.703125001 70.703125000 58.203125000 8.203125001 33.203125001 83.203125000 17.578125001 67.578125000 92.578125000 42.578125001 30.078125001 80.078125000 55.078125000 5.078125001 73.828125000 23.828125001 48.828125001 98.828125000 86.328125000 36.328125001 11.328125001 61.328125000 77.929687500 27.929687501 2.929687501 52.929687500 65.429687500 15.429687501 40.429687501 90.429687500 34.179687501 84.179687500 59.179687500 9.179687501 21.679687501 71.679687500 96.679687500 46.679687501 56.054687500 6.054687501 31.054687501 81.054687500 93.554687500 43.554687501 18.554687501 68.554687500 12.304687501 62.304687500 87.304687500 37.304687501 49.804687501 99.804687500 74.804687500 24.804687501 88.867187500 38.867187501 13.867187501 63.867187500 51.367187500 1.367187501 26.367187501 76.367187500 45.117187501 95.117187500 70.117187500 20.117187501 7.617187501 57.617187500 82.617187500 32.617187501 66.992187500 16.992187501 41.992187501 91.992187500 79.492187500 29.492187501 4.492187501 54.492187500 23.242187501 73.242187500 98.242187500 48.242187501 35.742187501 85.742187500 60.742187500 10.742187501 38.085937501 88.085937500 63.085937500 13.085937501 0.585937501 50.585937500 75.585937500 25.585937501 94.335937500 44.335937501 19.335937501 69.335937500 56.835937500 6.835937501 31.835937501 81.835937500 16.210937501 66.210937500 91.210937500 41.210937501 28.710937501 78.710937500 53.710937500 3.710937501 72.460937500 22.460937501 47.460937501 97.460937500 84.960937500 34.960937501 9.960937501 59.960937500 27.148437501 77.148437500 52.148437500 2.148437501 14.648437501 64.648437500 89.648437500 39.648437501 83.398437500 33.398437501 8.398437501 58.398437500 70.898437500 20.898437501 45.898437501 95.898437500 5.273437501 55.273437500 80.273437500 30.273437501 42.773437501 92.773437500 67.773437500 17.773437501 61.523437500 11.523437501 36.523437501 86.523437500 99.023437500 49.023437501 24.023437501 74.023437500 12.695312501 62.695312500 87.695312500 37.695312501 25.195312501 75.195312500 50.195312500 0.195312501 68.945312500 18.945312501 43.945312501 93.945312500 81.445312500 31.445312501 6.445312501 56.445312500 40.820312501 90.820312500 65.820312500 15.820312501 3.320312501 53.320312500 78.320312500 28.320312501 97.070312500 47.070312501 22.070312501 72.070312500 59.570312500 9.570312501 34.570312501 84.570312500 1.757812501 51.757812500 76.757812500 26.757812501 39.257812501 89.257812500 64.257812500 14.257812501 58.007812500 8.007812501 33.007812501 83.007812500 95.507812500 45.507812501 20.507812501 70.507812500 29.882812501 79.882812500 54.882812500 4.882812501 17.382812501 67.382812500 92.382812500 42.382812501 86.132812500 36.132812501 11.132812501 61.132812500 73.632812500 23.632812501 48.632812501 98.632812500 52.539062500 2.539062501 27.539062501 77.539062500 90.039062500 40.039062501 15.039062501 65.039062500 8.789062501 58.789062500 83.789062500 33.789062501 46.289062501 96.289062500 71.289062500 21.289062501 80.664062500 30.664062501 5.664062501 55.664062500 68.164062500 18.164062501 43.164062501 93.164062500 36.914062501 86.914062500 61.914062500 11.914062501 24.414062501 74.414062500 99.414062500 49.414062501 63.476562500 13.476562501 38.476562501 88.476562500 75.976562500 25.976562501 0.976562501 50.976562500 19.726562501 69.726562500 94.726562500 44.726562501 32.226562501 82.226562500 57.226562500 7.226562501 91.601562500 41.601562501 16.601562501 66.601562500 54.101562500 4.101562501 29.101562501 79.101562500 47.851562501 97.851562500 72.851562500 22.851562501 10.351562501 60.351562500 85.351562500 35.351562501)
	
	# minimum examples per tree test outcome: (integer) [1:inf] (Default: 2)
	minOutcomes=(1 113 331 16 15 360 284 9 15 293 352 11 44 454 176 3 16 136 116 87 165 233 38 29 24 51 254 131 43 16 63 7 8 108 84 54 135 186 17 20 47 94 353 193 74 58 104 21 1 148 438 33 34 476 381 22 10 248 297 2 32 393 144 1 4 213 307 16 46 473 185 3 7 253 597 75 1 269 219 4 13 12 167 96 130 120 183 59 31 127 64 102 98 231 58 7 6 27 178 70 107 152 178 36 52 122 38 109 113 228 52 17 6 230 343 15 46 523 189 1 5 230 554 66 6 259 188 1 3 40 188 75 79 30 98 20 48 176 162 125 86 193 29 10 8 241 308 10 90 698 283 13 1 188 481 39 12 312 229 4 2 193 244 1 64 549 227 6 4 250 595 62 23 398 305 11 12 65 250 97 117 67 139 42 33 133 101 95 64 126 8 5 3 84 54 50 143 286 80 27 27 24 209 137 68 98 125 15 4 189 520 49 6 385 311 18 17 348 447 36 34 407 151 1 2 157 459 36 11 359 298 12 25 355 431 27 32 403 148 1 13 75 21 54 155 283 61 33 15 34 205 104 47 102 108 4 1 137 378 23 34 422 318 12 14 287 369 8 42 445 172 3 14 113 74 77 150 179 6 33 25 73 282 137 47 37 74 7 9 120 105 72 142 214 33 21 42 68 295 177 64 17 81 19 1 162 429 31 31 464 374 21 13 283 359 18 40 440 168 2 4 205 292 13 41 492 174 1 11 290 659 93 12 317 246 6 14 22 184 99 136 142 196 60 37 93 4 86 88 185 34 10 5 6 132 63 93 92 143 32 53 134 62 115 116 243 61 18 8 254 392 24 62 585 246 6 4 220 534 62 4 244 181 1 3 48 204 62 85 51 110 21 44 145 102 110 78 146 7 8 8 233 295 7 85 630 273 12 4 224 543 53 20 360 255 4 3 219 292 10 81 612 263 11 3 239 577 57 20 384 265 10 10 39 204 88 100 7 104 37 34 145 124 100 67 142 16 5 3 60 8 42 129 226 46 23 28 32 224 140 71 109 132 15 6 213 568 59 22 446 345 23 15 334 421 30 24 387 141 1 1 148 440 33 5 334 254 10 30 388 487 43 42 447 172 2 13 81 32 56 159 275 69 34 13 1 146 91 40 56 85 4)
	
	# tree test heuristic: 0 = gain ratio; 1 = gain (Default: 0)
	heuristics=(0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1)
	
	# pessimistic rule pruning confidence level: (float) [0:100] (default: 25)
	pruningConfidences=(0.000000000 50.000000000 75.000000000 25.000000000 87.500000000 37.500000000 12.500000000 62.500000000 93.750000000 43.750000000 18.750000000 68.750000000 6.250000000 56.250000000 81.250000000 31.250000000 84.375000000 34.375000000 9.375000000 59.375000000 21.875000000 71.875000000 96.875000000 46.875000000 15.625000000 65.625000000 90.625000000 40.625000000 78.125000000 28.125000000 3.125000000 53.125000000 67.187500000 17.187500000 42.187500000 92.187500000 29.687500000 79.687500000 54.687500000 4.687500000 35.937500000 85.937500000 60.937500000 10.937500000 73.437500000 23.437500000 48.437500000 98.437500000 45.312500000 95.312500000 70.312500000 20.312500000 57.812500000 7.812500000 32.812500000 82.812500000 51.562500000 1.562500000 26.562500000 76.562500000 39.062500000 89.062500000 64.062500000 14.062500000 21.093750000 71.093750000 96.093750000 46.093750000 83.593750000 33.593750000 8.593750000 58.593750000 77.343750000 27.343750000 2.343750000 52.343750000 14.843750000 64.843750000 89.843750000 39.843750000 92.968750000 42.968750000 17.968750000 67.968750000 5.468750000 55.468750000 80.468750000 30.468750000 11.718750000 61.718750000 86.718750000 36.718750000 99.218750000 49.218750000 24.218750000 74.218750000 60.156250000 10.156250000 35.156250000 85.156250000 47.656250000 97.656250000 72.656250000 22.656250000 41.406250000 91.406250000 66.406250000 16.406250000 53.906250000 3.906250000 28.906250000 78.906250000 25.781250000 75.781250000 50.781250000 0.781250000 63.281250000 13.281250000 38.281250000 88.281250000 69.531250000 19.531250000 44.531250000 94.531250000 32.031250000 82.031250000 57.031250000 7.031250000 24.609375000 74.609375000 99.609375000 49.609375000 87.109375000 37.109375000 12.109375000 62.109375000 80.859375000 30.859375000 5.859375000 55.859375000 18.359375000 68.359375000 93.359375000 43.359375000 90.234375000 40.234375000 15.234375000 65.234375000 2.734375000 52.734375000 77.734375000 27.734375000 8.984375000 58.984375000 83.984375000 33.984375000 96.484375000 46.484375000 21.484375000 71.484375000 57.421875000 7.421875000 32.421875000 82.421875000 44.921875000 94.921875000 69.921875000 19.921875000 38.671875000 88.671875000 63.671875000 13.671875000 51.171875000 1.171875000 26.171875000 76.171875000 29.296875000 79.296875000 54.296875000 4.296875000 66.796875000 16.796875000 41.796875000 91.796875000 73.046875000 23.046875000 48.046875000 98.046875000 35.546875000 85.546875000 60.546875000 10.546875000 3.515625000 53.515625000 78.515625000 28.515625000 91.015625000 41.015625000 16.015625000 66.015625000 97.265625000 47.265625000 22.265625000 72.265625000 9.765625000 59.765625000 84.765625000 34.765625000 81.640625000 31.640625000 6.640625000 56.640625000 19.140625000 69.140625000 94.140625000 44.140625000 12.890625000 62.890625000 87.890625000 37.890625000 75.390625000 25.390625000 0.390625000 50.390625000 64.453125000 14.453125000 39.453125000 89.453125000 26.953125000 76.953125000 51.953125000 1.953125000 33.203125000 83.203125000 58.203125000 8.203125000 70.703125000 20.703125000 45.703125000 95.703125000 48.828125000 98.828125000 73.828125000 23.828125000 61.328125000 11.328125000 36.328125000 86.328125000 55.078125000 5.078125000 30.078125000 80.078125000 42.578125000 92.578125000 67.578125000 17.578125000 35.742187500 85.742187500 60.742187500 10.742187500 73.242187500 23.242187500 48.242187500 98.242187500 66.992187500 16.992187500 41.992187500 91.992187500 29.492187500 79.492187500 54.492187500 4.492187500 51.367187500 1.367187500 26.367187500 76.367187500 38.867187500 88.867187500 63.867187500 13.867187500 45.117187500 95.117187500 70.117187500 20.117187500 57.617187500 7.617187500 32.617187500 82.617187500 96.679687500 46.679687500 21.679687500 71.679687500 9.179687500 59.179687500 84.179687500 34.179687500 2.929687500 52.929687500 77.929687500 27.929687500 90.429687500 40.429687500 15.429687500 65.429687500 18.554687500 68.554687500 93.554687500 43.554687500 81.054687500 31.054687500 6.054687500 56.054687500 87.304687500 37.304687500 12.304687500 62.304687500 24.804687500 74.804687500 99.804687500 49.804687500 42.773437500 92.773437500 67.773437500 17.773437500 55.273437500 5.273437500 30.273437500 80.273437500 61.523437500 11.523437500 36.523437500 86.523437500 49.023437500 99.023437500 74.023437500 24.023437500 70.898437500 20.898437500 45.898437500 95.898437500 33.398437500 83.398437500 58.398437500 8.398437500 27.148437500 77.148437500 52.148437500 2.148437500 64.648437500 14.648437500 39.648437500 89.648437500 75.585937500 25.585937500 0.585937500 50.585937500 13.085937500 63.085937500 88.085937500 38.085937500 19.335937500 69.335937500 94.335937500 44.335937500 81.835937500 31.835937500 6.835937500 56.835937500 9.960937500 59.960937500 84.960937500 34.960937500 97.460937500 47.460937500 22.460937500 72.460937500 91.210937500 41.210937500 16.210937500 66.210937500 3.710937500 53.710937500 78.710937500 28.710937500 39.257812500 89.257812500 64.257812500 14.257812500 51.757812500 1.757812500 26.757812500 76.757812500 58.007812500 8.007812500 33.007812500 83.007812500 45.507812500 95.507812500 70.507812500 20.507812500 73.632812500 23.632812500 48.632812500 98.632812500 36.132812500 86.132812500 61.132812500 11.132812500 29.882812500 79.882812500 54.882812500 4.882812500 67.382812500 17.382812500 42.382812500 92.382812500 78.320312500 28.320312500 3.320312500 53.320312500 15.820312500 65.820312500 90.820312500 40.820312500 22.070312500 72.070312500 97.070312500 47.070312500 84.570312500 34.570312500 9.570312500 59.570312500 6.445312500 56.445312500 81.445312500 31.445312500 93.945312500 43.945312500 18.945312500 68.945312500 87.695312500 37.695312500 12.695312500 62.695312500 0.195312500 50.195312500 75.195312500 25.195312500 32.226562500 82.226562500 57.226562500 7.226562500 69.726562500 19.726562500 44.726562500 94.726562500 63.476562500 13.476562500 38.476562500 88.476562500 25.976562500 75.976562500 50.976562500 0.976562500 54.101562500 4.101562500 29.101562500 79.101562500 41.601562500 91.601562500 66.601562500 16.601562500 47.851562500 97.851562500 72.851562500 22.851562500 60.351562500 10.351562500 35.351562500 85.351562500 99.414062500 49.414062500 24.414062500 74.414062500 11.914062500 61.914062500 86.914062500 36.914062500 5.664062500 55.664062500 80.664062500 30.664062500 93.164062500 43.164062500 18.164062500 68.164062500 15.039062500 65.039062500 90.039062500 40.039062500 77.539062500 27.539062500 2.539062500 52.539062500 83.789062500 33.789062500 8.789062500 58.789062500 21.289062500 71.289062500 96.289062500 46.289062500)
	
	# Fisher's exact rule pruning confidence level: (float) [0:100] (default: off [negative], otherwise 25)
	fisherConfidences=(-100.000000000 0.000000000 50.000000000 -50.000000000 75.000000000 -25.000000000 -75.000000000 25.000000000 87.500000000 -12.500000000 -62.500000000 37.500000000 -87.500000000 12.500000000 62.500000000 -37.500000000 -6.250000000 93.750000000 43.750000000 -56.250000000 18.750000000 -81.250000000 -31.250000000 68.750000000 6.250000000 -93.750000000 -43.750000000 56.250000000 -18.750000000 81.250000000 31.250000000 -68.750000000 96.875000000 -3.125000000 -53.125000000 46.875000000 -78.125000000 21.875000000 71.875000000 -28.125000000 -90.625000000 9.375000000 59.375000000 -40.625000000 84.375000000 -15.625000000 -65.625000000 34.375000000 3.125000000 -96.875000000 -46.875000000 53.125000000 -21.875000000 78.125000000 28.125000000 -71.875000000 -9.375000000 90.625000000 40.625000000 -59.375000000 15.625000000 -84.375000000 -34.375000000 65.625000000 48.437500000 -51.562500000 -1.562500000 98.437500000 -26.562500000 73.437500000 23.437500000 -76.562500000 -39.062500000 60.937500000 10.937500000 -89.062500000 35.937500000 -64.062500000 -14.062500000 85.937500000 54.687500000 -45.312500000 -95.312500000 4.687500000 -70.312500000 29.687500000 79.687500000 -20.312500000 -57.812500000 42.187500000 92.187500000 -7.812500000 67.187500000 -32.812500000 -82.812500000 17.187500000 -48.437500000 51.562500000 1.562500000 -98.437500000 26.562500000 -73.437500000 -23.437500000 76.562500000 39.062500000 -60.937500000 -10.937500000 89.062500000 -35.937500000 64.062500000 14.062500000 -85.937500000 -54.687500000 45.312500000 95.312500000 -4.687500000 70.312500000 -29.687500000 -79.687500000 20.312500000 57.812500000 -42.187500000 -92.187500000 7.812500000 -67.187500000 32.812500000 82.812500000 -17.187500000 -78.906250000 21.093750000 71.093750000 -28.906250000 96.093750000 -3.906250000 -53.906250000 46.093750000 83.593750000 -16.406250000 -66.406250000 33.593750000 -91.406250000 8.593750000 58.593750000 -41.406250000 -22.656250000 77.343750000 27.343750000 -72.656250000 2.343750000 -97.656250000 -47.656250000 52.343750000 14.843750000 -85.156250000 -35.156250000 64.843750000 -10.156250000 89.843750000 39.843750000 -60.156250000 80.468750000 -19.531250000 -69.531250000 30.468750000 -94.531250000 5.468750000 55.468750000 -44.531250000 -82.031250000 17.968750000 67.968750000 -32.031250000 92.968750000 -7.031250000 -57.031250000 42.968750000 24.218750000 -75.781250000 -25.781250000 74.218750000 -0.781250000 99.218750000 49.218750000 -50.781250000 -13.281250000 86.718750000 36.718750000 -63.281250000 11.718750000 -88.281250000 -38.281250000 61.718750000 28.906250000 -71.093750000 -21.093750000 78.906250000 -46.093750000 53.906250000 3.906250000 -96.093750000 -33.593750000 66.406250000 16.406250000 -83.593750000 41.406250000 -58.593750000 -8.593750000 91.406250000 72.656250000 -27.343750000 -77.343750000 22.656250000 -52.343750000 47.656250000 97.656250000 -2.343750000 -64.843750000 35.156250000 85.156250000 -14.843750000 60.156250000 -39.843750000 -89.843750000 10.156250000 -30.468750000 69.531250000 19.531250000 -80.468750000 44.531250000 -55.468750000 -5.468750000 94.531250000 32.031250000 -67.968750000 -17.968750000 82.031250000 -42.968750000 57.031250000 7.031250000 -92.968750000 -74.218750000 25.781250000 75.781250000 -24.218750000 50.781250000 -49.218750000 -99.218750000 0.781250000 63.281250000 -36.718750000 -86.718750000 13.281250000 -61.718750000 38.281250000 88.281250000 -11.718750000 -42.578125000 57.421875000 7.421875000 -92.578125000 32.421875000 -67.578125000 -17.578125000 82.421875000 44.921875000 -55.078125000 -5.078125000 94.921875000 -30.078125000 69.921875000 19.921875000 -80.078125000 -61.328125000 38.671875000 88.671875000 -11.328125000 63.671875000 -36.328125000 -86.328125000 13.671875000 51.171875000 -48.828125000 -98.828125000 1.171875000 -73.828125000 26.171875000 76.171875000 -23.828125000 41.796875000 -58.203125000 -8.203125000 91.796875000 -33.203125000 66.796875000 16.796875000 -83.203125000 -45.703125000 54.296875000 4.296875000 -95.703125000 29.296875000 -70.703125000 -20.703125000 79.296875000 60.546875000 -39.453125000 -89.453125000 10.546875000 -64.453125000 35.546875000 85.546875000 -14.453125000 -51.953125000 48.046875000 98.046875000 -1.953125000 73.046875000 -26.953125000 -76.953125000 23.046875000 93.359375000 -6.640625000 -56.640625000 43.359375000 -81.640625000 18.359375000 68.359375000 -31.640625000 -94.140625000 5.859375000 55.859375000 -44.140625000 80.859375000 -19.140625000 -69.140625000 30.859375000 12.109375000 -87.890625000 -37.890625000 62.109375000 -12.890625000 87.109375000 37.109375000 -62.890625000 -0.390625000 99.609375000 49.609375000 -50.390625000 24.609375000 -75.390625000 -25.390625000 74.609375000 -91.015625000 8.984375000 58.984375000 -41.015625000 83.984375000 -16.015625000 -66.015625000 33.984375000 96.484375000 -3.515625000 -53.515625000 46.484375000 -78.515625000 21.484375000 71.484375000 -28.515625000 -9.765625000 90.234375000 40.234375000 -59.765625000 15.234375000 -84.765625000 -34.765625000 65.234375000 2.734375000 -97.265625000 -47.265625000 52.734375000 -22.265625000 77.734375000 27.734375000 -72.265625000 -35.546875000 64.453125000 14.453125000 -85.546875000 39.453125000 -60.546875000 -10.546875000 89.453125000 26.953125000 -73.046875000 -23.046875000 76.953125000 -48.046875000 51.953125000 1.953125000 -98.046875000 -66.796875000 33.203125000 83.203125000 -16.796875000 58.203125000 -41.796875000 -91.796875000 8.203125000 70.703125000 -29.296875000 -79.296875000 20.703125000 -54.296875000 45.703125000 95.703125000 -4.296875000 36.328125000 -63.671875000 -13.671875000 86.328125000 -38.671875000 61.328125000 11.328125000 -88.671875000 -26.171875000 73.828125000 23.828125000 -76.171875000 48.828125000 -51.171875000 -1.171875000 98.828125000 67.578125000 -32.421875000 -82.421875000 17.578125000 -57.421875000 42.578125000 92.578125000 -7.421875000 -69.921875000 30.078125000 80.078125000 -19.921875000 55.078125000 -44.921875000 -94.921875000 5.078125000 84.765625000 -15.234375000 -65.234375000 34.765625000 -90.234375000 9.765625000 59.765625000 -40.234375000 -77.734375000 22.265625000 72.265625000 -27.734375000 97.265625000 -2.734375000 -52.734375000 47.265625000 16.015625000 -83.984375000 -33.984375000 66.015625000 -8.984375000 91.015625000 41.015625000 -58.984375000 -21.484375000 78.515625000 28.515625000 -71.484375000 3.515625000 -96.484375000 -46.484375000 53.515625000 -87.109375000 12.890625000 62.890625000 -37.109375000 87.890625000 -12.109375000 -62.109375000 37.890625000 75.390625000 -24.609375000 -74.609375000 25.390625000 -99.609375000 0.390625000 50.390625000 -49.609375000 -18.359375000 81.640625000 31.640625000 -68.359375000 6.640625000 -93.359375000 -43.359375000 56.640625000 19.140625000 -80.859375000 -30.859375000 69.140625000 -5.859375000 94.140625000 44.140625000 -55.859375000)
	
	# rule pruning redundancy factor: (float) [0:10000] (default 1.0)
	redundancies=(0.000000000 5000.000000000 7500.000000000 2500.000000000 6250.000000000 1250.000000000 3750.000000000 8750.000000000 3125.000000000 8125.000000000 5625.000000000 625.000000000 9375.000000000 4375.000000000 1875.000000000 6875.000000000 1562.500000000 6562.500000000 9062.500000000 4062.500000000 5312.500000000 312.500000000 2812.500000000 7812.500000000 4687.500000000 9687.500000000 7187.500000000 2187.500000000 8437.500000000 3437.500000000 937.500000000 5937.500000000 468.750000000 5468.750000000 7968.750000000 2968.750000000 6718.750000000 1718.750000000 4218.750000000 9218.750000000 3593.750000000 8593.750000000 6093.750000000 1093.750000000 9843.750000000 4843.750000000 2343.750000000 7343.750000000 1406.250000000 6406.250000000 8906.250000000 3906.250000000 5156.250000000 156.250000000 2656.250000000 7656.250000000 4531.250000000 9531.250000000 7031.250000000 2031.250000000 8281.250000000 3281.250000000 781.250000000 5781.250000000 1171.875000000 6171.875000000 8671.875000000 3671.875000000 7421.875000000 2421.875000000 4921.875000000 9921.875000000 3046.875000000 8046.875000000 5546.875000000 546.875000000 9296.875000000 4296.875000000 1796.875000000 6796.875000000 2109.375000000 7109.375000000 9609.375000000 4609.375000000 5859.375000000 859.375000000 3359.375000000 8359.375000000 3984.375000000 8984.375000000 6484.375000000 1484.375000000 7734.375000000 2734.375000000 234.375000000 5234.375000000 703.125000000 5703.125000000 8203.125000000 3203.125000000 6953.125000000 1953.125000000 4453.125000000 9453.125000000 2578.125000000 7578.125000000 5078.125000000 78.125000000 8828.125000000 3828.125000000 1328.125000000 6328.125000000 2265.625000000 7265.625000000 9765.625000000 4765.625000000 6015.625000000 1015.625000000 3515.625000000 8515.625000000 4140.625000000 9140.625000000 6640.625000000 1640.625000000 7890.625000000 2890.625000000 390.625000000 5390.625000000 8164.062500000 3164.062500000 664.062500000 5664.062500000 4414.062500000 9414.062500000 6914.062500000 1914.062500000 5039.062500000 39.062500000 2539.062500000 7539.062500000 1289.062500000 6289.062500000 8789.062500000 3789.062500000 9726.562500000 4726.562500000 2226.562500000 7226.562500000 3476.562500000 8476.562500000 5976.562500000 976.562500000 6601.562500000 1601.562500000 4101.562500000 9101.562500000 351.562500000 5351.562500000 7851.562500000 2851.562500000 8632.812500000 3632.812500000 1132.812500000 6132.812500000 4882.812500000 9882.812500000 7382.812500000 2382.812500000 5507.812500000 507.812500000 3007.812500000 8007.812500000 1757.812500000 6757.812500000 9257.812500000 4257.812500000 9570.312500000 4570.312500000 2070.312500000 7070.312500000 3320.312500000 8320.312500000 5820.312500000 820.312500000 6445.312500000 1445.312500000 3945.312500000 8945.312500000 195.312500000 5195.312500000 7695.312500000 2695.312500000 8085.937500000 3085.937500000 585.937500000 5585.937500000 4335.937500000 9335.937500000 6835.937500000 1835.937500000 6210.937500000 1210.937500000 3710.937500000 8710.937500000 2460.937500000 7460.937500000 9960.937500000 4960.937500000 9023.437500000 4023.437500000 1523.437500000 6523.437500000 2773.437500000 7773.437500000 5273.437500000 273.437500000 7148.437500000 2148.437500000 4648.437500000 9648.437500000 898.437500000 5898.437500000 8398.437500000 3398.437500000 7617.187500000 2617.187500000 117.187500000 5117.187500000 3867.187500000 8867.187500000 6367.187500000 1367.187500000 5742.187500000 742.187500000 3242.187500000 8242.187500000 1992.187500000 6992.187500000 9492.187500000 4492.187500000 9179.687500000 4179.687500000 1679.687500000 6679.687500000 2929.687500000 7929.687500000 5429.687500000 429.687500000 7304.687500000 2304.687500000 4804.687500000 9804.687500000 1054.687500000 6054.687500000 8554.687500000 3554.687500000 4082.031250000 9082.031250000 6582.031250000 1582.031250000 7832.031250000 2832.031250000 332.031250000 5332.031250000 2207.031250000 7207.031250000 9707.031250000 4707.031250000 5957.031250000 957.031250000 3457.031250000 8457.031250000 2519.531250000 7519.531250000 5019.531250000 19.531250000 8769.531250000 3769.531250000 1269.531250000 6269.531250000 644.531250000 5644.531250000 8144.531250000 3144.531250000 6894.531250000 1894.531250000 4394.531250000 9394.531250000 3925.781250000 8925.781250000 6425.781250000 1425.781250000 7675.781250000 2675.781250000 175.781250000 5175.781250000 2050.781250000 7050.781250000 9550.781250000 4550.781250000 5800.781250000 800.781250000 3300.781250000 8300.781250000 2988.281250000 7988.281250000 5488.281250000 488.281250000 9238.281250000 4238.281250000 1738.281250000 6738.281250000 1113.281250000 6113.281250000 8613.281250000 3613.281250000 7363.281250000 2363.281250000 4863.281250000 9863.281250000 4628.906250000 9628.906250000 7128.906250000 2128.906250000 8378.906250000 3378.906250000 878.906250000 5878.906250000 1503.906250000 6503.906250000 9003.906250000 4003.906250000 5253.906250000 253.906250000 2753.906250000 7753.906250000 3691.406250000 8691.406250000 6191.406250000 1191.406250000 9941.406250000 4941.406250000 2441.406250000 7441.406250000 566.406250000 5566.406250000 8066.406250000 3066.406250000 6816.406250000 1816.406250000 4316.406250000 9316.406250000 4785.156250000 9785.156250000 7285.156250000 2285.156250000 8535.156250000 3535.156250000 1035.156250000 6035.156250000 1660.156250000 6660.156250000 9160.156250000 4160.156250000 5410.156250000 410.156250000 2910.156250000 7910.156250000 3222.656250000 8222.656250000 5722.656250000 722.656250000 9472.656250000 4472.656250000 1972.656250000 6972.656250000 97.656250000 5097.656250000 7597.656250000 2597.656250000 6347.656250000 1347.656250000 3847.656250000 8847.656250000 7246.093750000 2246.093750000 4746.093750000 9746.093750000 996.093750000 5996.093750000 8496.093750000 3496.093750000 9121.093750000 4121.093750000 1621.093750000 6621.093750000 2871.093750000 7871.093750000 5371.093750000 371.093750000 5683.593750000 683.593750000 3183.593750000 8183.593750000 1933.593750000 6933.593750000 9433.593750000 4433.593750000 7558.593750000 2558.593750000 58.593750000 5058.593750000 3808.593750000 8808.593750000 6308.593750000 1308.593750000 7089.843750000 2089.843750000 4589.843750000 9589.843750000 839.843750000 5839.843750000 8339.843750000 3339.843750000 8964.843750000 3964.843750000 1464.843750000 6464.843750000 2714.843750000 7714.843750000 5214.843750000 214.843750000 6152.343750000 1152.343750000 3652.343750000 8652.343750000 2402.343750000 7402.343750000 9902.343750000 4902.343750000 8027.343750000 3027.343750000 527.343750000 5527.343750000 4277.343750000 9277.343750000 6777.343750000 1777.343750000 6542.968750000 1542.968750000 4042.968750000 9042.968750000 292.968750000 5292.968750000 7792.968750000 2792.968750000 9667.968750000 4667.968750000 2167.968750000 7167.968750000 3417.968750000 8417.968750000 5917.968750000 917.968750000 5605.468750000 605.468750000 3105.468750000 8105.468750000 1855.468750000 6855.468750000 9355.468750000 4355.468750000 8730.468750000 3730.468750000 1230.468750000 6230.468750000 4980.468750000 9980.468750000 7480.468750000 2480.468750000 6699.218750000 1699.218750000 4199.218750000 9199.218750000 449.218750000 5449.218750000 7949.218750000 2949.218750000 9824.218750000 4824.218750000 2324.218750000 7324.218750000 3574.218750000 8574.218750000 6074.218750000 1074.218750000 5136.718750000 136.718750000 2636.718750000 7636.718750000 1386.718750000 6386.718750000 8886.718750000 3886.718750000 8261.718750000 3261.718750000 761.718750000 5761.718750000 4511.718750000 9511.718750000 7011.718750000 2011.718750000)
	
	# check that all arrays are the same length (otherwise we can't run through all parameter settings)
	if [ ${#mapDimensions[*]} -ne ${#learningRates[*]} ] || [ ${#mapDimensions[*]} -ne ${#learningRateDecays[*]} ] || [ ${#mapDimensions[*]} -ne ${#kernelWidths[*]} ] || [ ${#mapDimensions[*]} -ne ${#kernelWidthDecays[*]} ] || [ ${#mapDimensions[*]} -ne ${#minOutcomes[*]} ] || [ ${#mapDimensions[*]} -ne ${#heuristics[*]} ] || [ ${#mapDimensions[*]} -ne ${#pruningConfidences[*]} ] || [ ${#mapDimensions[*]} -ne ${#fisherConfidences[*]} ] || [ ${#mapDimensions[*]} -ne ${#redundancies[*]} ]; then
		echo "Error: parameter array sizes do not match"
		rm -f *.train *.test
		exit
	fi
	
	# check for valid labeling method
	if [ ${neuronLabelingMethod} -ne 0 ] && [ ${neuronLabelingMethod} -ne 1 ] && [ ${neuronLabelingMethod} -ne 2 ] && [ ${neuronLabelingMethod} -ne 3 ]; then
		echo "Error: Invalid neuron labeling method"
		rm -f *.train *.test *.names
		exit
	fi
	
	# pre-generate initialized maps for each of the specified map dimensions (since this is a time-consuming task)
	echo "Generating maps..."
	
	for ((position = 0; position < ${#mapDimensions[*]}; ++position))
	do
		
		if [ ! -f ${1}.${mapDimensions[position]}.0.map ]; then
			echo -n "Map dimension ${mapDimensions[position]} x ${mapDimensions[position]}: "
			
			for ((simNum = 0; simNum < 30; ++simNum))
			do
				echo -n "$simNum "
				./../../algorithms/SOM_PAK/lininit -din ${1}.data.${simNum}.som.train -cout ${1}.${mapDimensions[position]}.${simNum}.map -topol hexa -neigh gaussian -xdim ${mapDimensions[position]} -ydim ${mapDimensions[position]} > /dev/null
			done
			
			echo
		fi
		
	done
	
	echo "=============================================="
	
	for ((position = 0; position < ${#mapDimensions[*]}; ++position))
	do
		echo "Simulation ${currentSimulation}"
		echo "=============================================="
		
		echo "Map dimensions: ${mapDimensions[position]} x ${mapDimensions[position]}"
		echo "Initial learning rate: ${learningRates[position]}"
		echo "Learning rate decay constant: ${learningRateDecays[position]}"
		echo "Kernel width: ${kernelWidths[position]}"
		echo "Radius decay constant: ${kernelWidthDecays[position]}"
		
		if [ ${neuronLabelingMethod} -eq 0 ]; then
			echo "Labeling method: example-centric neuron labeling"
		elif [ ${neuronLabelingMethod} -eq 1 ]; then
			echo "Labeling method: example-centric cluster labeling (K-Means)"
		elif [ ${neuronLabelingMethod} -eq 2 ]; then
			echo "Labeling method: example-centric cluster labeling (Ward)"
		elif [ ${neuronLabelingMethod} -eq 3 ]; then
			echo "Labeling method: weight-centric neuron labeling"
		fi
		
		echo "Minimum examples per outcome: ${minOutcomes[position]}"
		
		if [ ${heuristics[position]} -eq 0 ]; then
			echo "Tree test heuristic: Gain ratio"
		else
			echo "Tree test heuristic: Gain"
		fi
		
		echo "Rule pruning confidence: ${pruningConfidences[position]}%"
		
		compareResult=$(echo "${fisherConfidences[position]} < 0.0" | bc)
		
		if [ $compareResult = 1 ]; then
			echo "Fisher pruning confidence: Not used"
		else
			echo "Fisher pruning confidence: ${fisherConfidences[position]}%"
		fi
		
		echo "Rule pruning redundancy: ${redundancies[position]}"
		
		# run 30 cross validated simulations
		runCrossValidation ${1} ${neuronLabelingMethod} ${mapDimensions[position]} ${learningRates[position]} ${learningRateDecays[position]} ${kernelWidths[position]} ${kernelWidthDecays[position]} ${minOutcomes[position]} ${heuristics[position]} ${pruningConfidences[position]} ${fisherConfidences[position]} ${redundancies[position]}
		
		echo "=============================================="
		let currentSimulation++
	done
	
	rm -f *.map
	
	echo "Status: Simulations completed"
	
}

# ===================================================================================================
# Function : cleanUp()
# Purpose  : Cleans up files created during simulation run
# Return   : None
# ===================================================================================================

cleanUp() {
	
	echo -n "Status: Cleaning up...  "
	
	# clean up created files
	rm *.names *.train *.test
	
	echo "DONE"
	
}

# ===================================================================================================
# Main script
# ===================================================================================================

export CLASSPATH=/home/wvheerden/Dropbox/Documents/Simulations/algorithms/BuildSets:/home/wvheerden/Dropbox/Documents/Simulations/algorithms/AverageRunResults:/home/wvheerden/Dropbox/Documents/Simulations/algorithms/GetRuleSetConditionCountC4_5:.

validateSystem ${1}
buildSets ${1}
runSims ${1}
cleanUp ${1}
