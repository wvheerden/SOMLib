# ===================================================================================================
# Script        : crossValidateHybridSOM_CN2.sh
# Usage         : ./crossValidateHybridSOM_CN2.sh [simDirectory]
# Purpose       : Performs a cross-validated paired test on parameter data set using HybridSOM
#                 framework configured with CN2
#
# Preconditions : - All required simulation-related programs are present
#                 - Data set as directory name in dataset directory must exist and be in correct form
#                   (i.e. no header, one record per line, comma delimited, last value is class label)
# ===================================================================================================

#!/bin/bash

# ===================================================================================================
# Function : validateSystem(simDirectory)
# Purpose  : Validates components required for cross validation run (based on simDirectory)
# Return   : None
# ===================================================================================================

validateSystem() {
	
	# check for correct number of parameters
	if [ -z ${1} ]; then
		echo "Usage: ./crossValidate.sh [simDirectory]"
		exit
	fi
	
	echo "Status: Validating system..."
	echo "=============================================="
	
	# check for data directory
	echo -n "Simulation directory \"${1}\"...  "
	if [ ! -d ../../datasets/${1} ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for original data file in simulation directory
	echo -n "Data file \"${1}/original/${1}.data\"...  "
	if [ ! -f ../../datasets/${1}/original/${1}.data ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for cross validation set building script
	echo -n "Cross validation set building script...  "
	if [ ! -f ../../algorithms/BuildSets/BuildSets.class ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK data conversion script
	echo -n "Conversion script \"${1}/convert_som.awk\"...  "
	if [ ! -f ./../../datasets/${1}/convert_som.awk ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK names script
	echo -n "Names script \"${1}/names_som.sh\"...  "
	if [ ! -f ./../../datasets/${1}/names_som.sh ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK initialisation program
	echo -n "SOM initialisation program...  "
	if [ ! -f ../../algorithms/SOM_PAK/lininit ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for SOM_PAK training program
	echo -n "SOM training program...  "
	if [ ! -f ../../algorithms/SOM_PAK/vsom ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for example-centric neuron labeling program
	echo -n "Example-centric neuron labeling program...  "
	if [ ! -f./../../algorithms/ExampleCentricNeuron/outputlabels ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for example-centric K-means cluster labeling program
	echo -n "Example-centric K-means cluster labeling program...  "
	if [ ! -f./../../algorithms/ExampleCentricClusterKMeans/outputLabels ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for example-centric Ward cluster labeling program
	echo -n "Example-centric Ward cluster labeling program...  "
	if [ ! -f./../../algorithms/ExampleCentricClusterWard/outputLabels ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for weight-centric neuron labeling program
	echo -n "Weight-centric neuron labeling program...  "
	if [ ! -f./../../algorithms/WeightCentricNeuron/outputLabels ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for CN2 data conversion script
	echo -n "Data conversion script \"${1}/convert_cn2.awk\"...  "
	if [ ! -f ./../../datasets/${1}/convert_cn2.awk ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	# check for CN2 program
	echo -n "CN2 program...  "
	if [ ! -f ../../algorithms/CN2/cn ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	#check for results averaging program
	echo -n "Results averaging program...  "
	if [ ! -f ../../algorithms/AverageRunResults/AverageRuleSetResults.class ]; then
		echo "NOT FOUND"
		exit
	fi
	echo "FOUND"
	
	echo "=============================================="
	echo "Status: System OK..."
	
}

# ===================================================================================================
# Function : buildSets(simDirectory)
# Purpose  : Builds data sets required for cross validation simulations (based on simDirectory)
# Return   : None
# ===================================================================================================

buildSets() {
	
	echo "Status: Performing cross validation set builds"
	
	# build raw training and test sets (must still be converted to SOM_PAK and CN2 formats)
	if [ ${1} == "ionosphere" ]; then
		echo "Status: Building set for IONOSPHERE database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	elif [ ${1} == "iris" ]; then
		echo "Status: Building set for IRIS database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	elif [ ${1} == "monks1" ]; then
		echo "Status: Building set for MONKS1 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	elif [ ${1} == "monks2" ]; then
		echo "Status: Building set for MONKS2 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	elif [ ${1} == "monks3" ]; then
		echo "Status: Building set for MONKS3 database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 5
	elif [ ${1} == "pima" ]; then
		echo "Status: Building set for PIMA database"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30 -normalise
	else
		echo "Status: Unrecognised set"
		echo "Status: Building default"
		echo "=============================================="
		java BuildSets ../../datasets/${1}/original/${1}.data , 30
	fi
	
	echo "=============================================="
	echo "Status: Cross validation sets built"
	
	echo -n "Status: Performing data set conversions...  "
	
	# create SOM names file
	./../../datasets/${1}/names_som.sh > ${1}.names
	
	# perform conversion of data set from raw form to SOM_PAK and CN2 format, creating [simulation].data
	for ((dataset = 0; dataset < 30; ++dataset))
	do
		gawk -f ./../../datasets/${1}/convert_som.awk ${1}.data.raw.${dataset}.train > ${1}.data.${dataset}.som.train
		gawk -f ./../../datasets/${1}/convert_cn2.awk ${1}.data.raw.${dataset}.train > ${1}.data.${dataset}.cn2.eval.train
		rm -f ${1}.data.raw.${dataset}.train
		gawk -f ./../../datasets/${1}/convert_cn2.awk ${1}.data.raw.${dataset}.test > ${1}.data.${dataset}.cn2.eval.test
		rm -f ${1}.data.raw.${dataset}.test
	done
	
	echo "DONE"
	
}

# ===================================================================================================
# Function : buildScript(simDirectory, errorEstimate, starSize, threshold, simNum)
# Purpose  : Builds simulation script for CN2 based on provided parameters [outputs to simscript.tmp]
# Return   : None (generates simscript.tmp)
# ===================================================================================================

buildScript () {
	
	# simulation parameters
	echo "display none quit" > simscript.tmp
	echo "algorithm ordered" >> simscript.tmp
	if [ ${2} -eq 0 ]; then
		echo "error laplacian" >> simscript.tmp
	else
		echo "error naive" >> simscript.tmp
	fi
	echo "star ${3}" >> simscript.tmp
	echo "threshold ${4}" >> simscript.tmp
	
	# execute training step 
	echo "read both ${1}.data.${5}.cn2.train" >> simscript.tmp
	echo "induce" >> simscript.tmp	
	
	# execute training data and evaluate training accuracy
	echo "read both ${1}.data.${5}.cn2.eval.train" >> simscript.tmp
	echo "xecute all quit" >> simscript.tmp
	
	# execute validation step and evaluate validation accuracy
	echo "read both ${1}.data.${5}.cn2.eval.test" >> simscript.tmp
	echo "xecute all quit" >> simscript.tmp
	
	echo "quit" >> simscript.tmp
	
}

# ===================================================================================================
# Function : runCrossValidation(simDirectory, neuronLabelingMethod, mapDim, learningRate, learningRateDecay, kernelWidth,
#            radiusDecay, errorEstimate, starSize, threshold)
# Purpose  : Performs a single cross validation using provided parameters
# Return   : None
# ===================================================================================================

runCrossValidation () {
	
	# get description string for neuron labeling method (0 = neuron; 1 = K-means cluster; 2 = Ward cluster; 3 = weight-centric)
	if [ ${2} -eq 0 ]; then
		neuronLabelingMethodDescription="neuron"
	elif [ ${2} -eq 1 ]; then
		neuronLabelingMethodDescription="k-means"
	elif [ ${2} -eq 2 ]; then
		neuronLabelingMethodDescription="ward"
	elif [ ${2} -eq 3 ]; then
		neuronLabelingMethodDescription="weight-centric"
	fi
	
	# get description string for error estimate (0 = Laplacian; 1 = Naive)
	if [ ${8} -eq 0 ]; then
		errorEstimateDescription="laplacian"
	elif [ ${8} -eq 1 ]; then
		errorEstimateDescription="naive"
	fi
	
	if [ -f hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.accuracy ]; then
		rm -f hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.accuracy
	fi
	
	if [ -f hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.error ]; then
		rm -f hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.error
	fi
	
	for ((simNum = 0; simNum < 30; ++simNum))
	do
		echo -n "${simNum} "
		
		# execute SOM_PAK
		./../../algorithms/SOM_PAK/vsom -din ${1}.data.${simNum}.som.train -vin ${1}.data.${simNum}.som.train -cin ${1}.${3}.${simNum}.map -cout ${1}.${3}.${simNum}.map.out -lrate ${4} -lratedecay ${5} -radius ${6} -radiusdecay ${7} -rand 0 >> /dev/null 2> /dev/null
		
		# execute appropriate neuron labeling algorithm on SOM_PAK output
		if [ ${2} -eq 0 ]; then
			./../../algorithms/ExampleCentricNeuron/outputLabels ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.names -cn2 ${1}.data.${simNum}.cn2.train > /dev/null
		elif [ ${2} -eq 1 ]; then
			./../../algorithms/ExampleCentricClusterKMeans/outputLabels ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.names -cn2 ${1}.data.${simNum}.cn2.train > /dev/null
		elif [ ${2} -eq 2 ]; then
			./../../algorithms/ExampleCentricClusterWard/outputLabels ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.names -cn2 ${1}.data.${simNum}.cn2.train > /dev/null
		elif [ ${2} -eq 3 ]; then
			./../../algorithms/WeightCentricNeuron/outputLabels ${1}.${3}.${simNum}.map.out ${1}.data.${simNum}.som.train ${1}.names -cn2 ${1}.data.${simNum}.cn2.train > /dev/null
		fi
		
		rm -f *.map.out
		
		# execute CN2 using built script, output results to out.tmp
		buildScript ${1} ${8} ${9} ${10} ${simNum}
		./../../algorithms/CN2/cn < simscript.tmp > out.tmp
		
		rm -f ${1}.data.${simNum}.cn2.train
		
		# extract training and generalization accuracy, misclassification accuracy (which is simply 0, because it isn't defined), and unclassified accuracy (which is simply 0, because it isn't defined)
		grep "Overall accuracy:" out.tmp | gawk '{ printf "%s\t0.0\t0.0\t", $3 }' >> hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.accuracy
		
		# extract training and generalization error, misclassification error (same as overall error), and unclassified error (which is simply 0, because C4.5 classifies every example)
		grep "Overall accuracy:" out.tmp | gawk '{ printf "%.15f\t%.15f\t0.0\t", 100.0-$3, 100.0-$3 }' >> hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.error
		
		# extract condition count (including default rule)
		conditionCount=$(grep "Default-inclusive condition count:" out.tmp | gawk '{ if (FNR == 1) printf "%s", $4 }')
		# extract rule count (including default rule)
		ruleCount=$(grep "Rule count (including default):" out.tmp | gawk '{ if (FNR == 1) printf "%s", $5 }')
		# extract average conditions per rule (including default rule, which is considereda single rule with 1 condition)
		aveRuleLength=$(grep "Average overall rule length:" out.tmp | gawk '{ if (FNR == 1) printf "%s", $5 }')
		
		rm -f out.tmp
		
		# output total condition count (+1 for default rule), number of rules (including default rule), and average conditions per rule (considering default rule to be a single rule with 1 condition)
		echo -n "$conditionCount" $'\t' >> hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.accuracy
		echo -n "$ruleCount" $'\t' >> hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.accuracy
		echo -n "$aveRuleLength" >> hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.accuracy
		
		echo -n "$conditionCount" $'\t' >> hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.error
		echo -n "$ruleCount" $'\t' >> hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.error
		echo -n "$aveRuleLength" >> hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.error
		
		if [ ${simNum} -ne 29 ]; then
			echo "" >> hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.accuracy
			echo "" >> hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.error
		fi
		
		# clean up
		rm -f simscript.tmp
	done
	
	# calculate confidence intervals
	java AverageRuleSetResults -accuracy hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.accuracy hybridsom-cn2_${1}_${neuronLabelingMethodDescription}.accuracy.summary
	java AverageRuleSetResults -error hybridsom-cn2_${1}_${neuronLabelingMethodDescription}_dim_${3}_lr_${4}_lrd_${5}_kw_${6}_kwd_${7}_${errorEstimateDescription}_star_${9}_thr_${10}.error hybridsom-cn2_${1}_${neuronLabelingMethodDescription}.error.summary
	
	echo ""
	
}

# ===================================================================================================
# Function : runSims(simDirectory)
# Purpose  : Runs simulations for specified simDirectory [assumes built data sets]
# Return   : None
# ===================================================================================================

runSims () {
	
	echo "Status: Running simulations"
	echo "=============================================="
	
	# number of current simulation
	currentSimulation=1
	
	# neuron labeling method (0 = neuron; 1 = K-means cluster; 2 = Ward cluster; 3 = weight-centric)
	neuronLabelingMethod=0
	
	# SOM map dimension: (integer) [2:inf] (No default)
	mapDimensions=(2 15 21 8 11 24 18 5 7 19 25 13 10 22 16 4 4 17 23 11 14 26 20 7 6 18 25 12 9 22 15 3 3 16 22 9 13 25 19 6 8 20 27 14 11 23 17 5 4 16 23 10 13 26 20 7 6 18 24 12 9 21 15 2 3 15 21 9 12 24 18 6 7 20 26 14 10 23 17 4 5 17 24 11 14 27 21 8 6 19 25 13 10 22 16 3 3 15 22 9 12 25 19 6 8 20 26 14 11 23 17 5 4 16 23 10 13 26 19 7 5 18 24 12 8 21 15 2 2 15 21 9 12 24 18 5 7 19 26 13 10 23 16 4 5 17 23 11 14 27 20 8 6 19 25 12 9 22 16 3 3 16 22 10 13 25 19 7 8 21 27 14 11 24 18 5 4 17 23 10 14 26 20 7 6 18 25 12 9 21 15 3 2 15 21 9 12 24 18 6 7 20 26 13 10 23 17 4 5 17 24 11 14 27 20 8 6 19 25 13 10 22 16 3 3 15 22 9 12 25 19 6 8 20 26 14 11 23 17 4 4 16 22 10 13 26 19 7 5 18 24 11 8 21 15 2 2 15 21 8 12 24 18 5 7 19 26 13 10 22 16 4 4 17 23 11 14 26 20 8 6 19 25 12 9 22 15 3 3 16 22 10 13 25 19 6 8 21 27 14 11 24 17 5 4 17 23 10 13 26 20 7 6 18 24 12 9 21 15 3 3 15 21 9 12 25 18 6 7 20 26 14 11 23 17 4 5 18 24 11 14 27 21 8 7 19 25 13 10 22 16 4 3 16 22 9 12 25 19 6 8 20 27 14 11 23 17 5 4 16 23 10 13 26 20 7 5 18 24 12 9 21 15 2 2 15 21 8 12 24 18 5 7 19 26 13 10 23 16 4 5 17 23 11 14 26 20 8 6 19 25 12 9 22 16 3 3 16 22 10 13 25 19 7 8 21 27 14 11 24 17 5 4 17 23 10 14 26 20 7 6 18 25 12 9 21 15 3 2 15 21 9 12 24 18 6 7 20 26 13 10 23 17 4 5 17 24 11 14 27 20 8 6 19 25 13 9 22 16 3 3 15 22 9 12 25 18 6 8 20 26 14 11 23 17 4 4 16 22 10 13 25 19 7 5 18 24 11 8 21 15 2)
	
	# SOM initial learning rate (floating point) [0.0:inf] (Default: 1)
	learningRates=(0 5 2.5 7.5 3.75 8.75 1.25 6.25 3.125 8.125 0.625 5.625 1.875 6.875 4.375 9.375 4.6875 9.6875 2.1875 7.1875 0.9375 5.9375 3.4375 8.4375 1.5625 6.5625 4.0625 9.0625 2.8125 7.8125 0.3125 5.3125 2.65625 7.65625 0.15625 5.15625 1.40625 6.40625 3.90625 8.90625 0.78125 5.78125 3.28125 8.28125 4.53125 9.53125 2.03125 7.03125 2.34375 7.34375 4.84375 9.84375 3.59375 8.59375 1.09375 6.09375 4.21875 9.21875 1.71875 6.71875 0.46875 5.46875 2.96875 7.96875 3.984375 8.984375 1.484375 6.484375 0.234375 5.234375 2.734375 7.734375 2.109375 7.109375 4.609375 9.609375 3.359375 8.359375 0.859375 5.859375 1.171875 6.171875 3.671875 8.671875 4.921875 9.921875 2.421875 7.421875 3.046875 8.046875 0.546875 5.546875 1.796875 6.796875 4.296875 9.296875 1.328125 6.328125 3.828125 8.828125 2.578125 7.578125 0.078125 5.078125 4.453125 9.453125 1.953125 6.953125 0.703125 5.703125 3.203125 8.203125 3.515625 8.515625 1.015625 6.015625 2.265625 7.265625 4.765625 9.765625 0.390625 5.390625 2.890625 7.890625 4.140625 9.140625 1.640625 6.640625 3.3203125 8.3203125 0.8203125 5.8203125 2.0703125 7.0703125 4.5703125 9.5703125 0.1953125 5.1953125 2.6953125 7.6953125 3.9453125 8.9453125 1.4453125 6.4453125 1.7578125 6.7578125 4.2578125 9.2578125 3.0078125 8.0078125 0.5078125 5.5078125 4.8828125 9.8828125 2.3828125 7.3828125 1.1328125 6.1328125 3.6328125 8.6328125 0.6640625 5.6640625 3.1640625 8.1640625 4.4140625 9.4140625 1.9140625 6.9140625 2.5390625 7.5390625 0.0390625 5.0390625 1.2890625 6.2890625 3.7890625 8.7890625 4.1015625 9.1015625 1.6015625 6.6015625 0.3515625 5.3515625 2.8515625 7.8515625 2.2265625 7.2265625 4.7265625 9.7265625 3.4765625 8.4765625 0.9765625 5.9765625 1.9921875 6.9921875 4.4921875 9.4921875 3.2421875 8.2421875 0.7421875 5.7421875 3.8671875 8.8671875 1.3671875 6.3671875 0.1171875 5.1171875 2.6171875 7.6171875 2.9296875 7.9296875 0.4296875 5.4296875 1.6796875 6.6796875 4.1796875 9.1796875 1.0546875 6.0546875 3.5546875 8.5546875 4.8046875 9.8046875 2.3046875 7.3046875 4.6484375 9.6484375 2.1484375 7.1484375 0.8984375 5.8984375 3.3984375 8.3984375 1.5234375 6.5234375 4.0234375 9.0234375 2.7734375 7.7734375 0.2734375 5.2734375 0.5859375 5.5859375 3.0859375 8.0859375 4.3359375 9.3359375 1.8359375 6.8359375 3.7109375 8.7109375 1.2109375 6.2109375 2.4609375 7.4609375 4.9609375 9.9609375 4.98046875 9.98046875 2.48046875 7.48046875 1.23046875 6.23046875 3.73046875 8.73046875 1.85546875 6.85546875 4.35546875 9.35546875 3.10546875 8.10546875 0.60546875 5.60546875 0.29296875 5.29296875 2.79296875 7.79296875 4.04296875 9.04296875 1.54296875 6.54296875 3.41796875 8.41796875 0.91796875 5.91796875 2.16796875 7.16796875 4.66796875 9.66796875 2.32421875 7.32421875 4.82421875 9.82421875 3.57421875 8.57421875 1.07421875 6.07421875 4.19921875 9.19921875 1.69921875 6.69921875 0.44921875 5.44921875 2.94921875 7.94921875 2.63671875 7.63671875 0.13671875 5.13671875 1.38671875 6.38671875 3.88671875 8.88671875 0.76171875 5.76171875 3.26171875 8.26171875 4.51171875 9.51171875 2.01171875 7.01171875 0.99609375 5.99609375 3.49609375 8.49609375 4.74609375 9.74609375 2.24609375 7.24609375 2.87109375 7.87109375 0.37109375 5.37109375 1.62109375 6.62109375 4.12109375 9.12109375 3.80859375 8.80859375 1.30859375 6.30859375 0.05859375 5.05859375 2.55859375 7.55859375 1.93359375 6.93359375 4.43359375 9.43359375 3.18359375 8.18359375 0.68359375 5.68359375 3.65234375 8.65234375 1.15234375 6.15234375 2.40234375 7.40234375 4.90234375 9.90234375 0.52734375 5.52734375 3.02734375 8.02734375 4.27734375 9.27734375 1.77734375 6.77734375 1.46484375 6.46484375 3.96484375 8.96484375 2.71484375 7.71484375 0.21484375 5.21484375 4.58984375 9.58984375 2.08984375 7.08984375 0.83984375 5.83984375 3.33984375 8.33984375 1.66015625 6.66015625 4.16015625 9.16015625 2.91015625 7.91015625 0.41015625 5.41015625 4.78515625 9.78515625 2.28515625 7.28515625 1.03515625 6.03515625 3.53515625 8.53515625 3.22265625 8.22265625 0.72265625 5.72265625 1.97265625 6.97265625 4.47265625 9.47265625 0.09765625 5.09765625 2.59765625 7.59765625 3.84765625 8.84765625 1.34765625 6.34765625 4.31640625 9.31640625 1.81640625 6.81640625 0.56640625 5.56640625 3.06640625 8.06640625 2.44140625 7.44140625 4.94140625 9.94140625 3.69140625 8.69140625 1.19140625 6.19140625 0.87890625 5.87890625 3.37890625 8.37890625 4.62890625 9.62890625 2.12890625 7.12890625 2.75390625 7.75390625 0.25390625 5.25390625 1.50390625 6.50390625 4.00390625 9.00390625 2.98828125 7.98828125 0.48828125 5.48828125 1.73828125 6.73828125 4.23828125 9.23828125 1.11328125 6.11328125 3.61328125 8.61328125 4.86328125 9.86328125 2.36328125 7.36328125 2.05078125 7.05078125 4.55078125 9.55078125 3.30078125 8.30078125 0.80078125 5.80078125 3.92578125 8.92578125 1.42578125 6.42578125 0.17578125 5.17578125 2.67578125 7.67578125 0.33203125 5.33203125 2.83203125 7.83203125 4.08203125 9.08203125 1.58203125 6.58203125 3.45703125 8.45703125 0.95703125 5.95703125 2.20703125 7.20703125 4.70703125 9.70703125 4.39453125 9.39453125 1.89453125 6.89453125 0.64453125 5.64453125 3.14453125 8.14453125 1.26953125 6.26953125 3.76953125 8.76953125 2.51953125 7.51953125 0.01953125 5.01953125)
	
	# SOM learning rate decay constant (floating point) (0.0:inf] (Default: 1000)
	learningRateDecays=(0.000000001 750.000000001 375.000000001 1125.000000000 937.500000000 187.500000001 1312.500000000 562.500000001 1406.250000000 656.250000001 1031.250000000 281.250000001 468.750000001 1218.750000000 93.750000001 843.750000000 703.125000001 1453.125000000 328.125000001 1078.125000000 1265.625000000 515.625000001 890.625000000 140.625000001 796.875000000 46.875000001 1171.875000000 421.875000001 234.375000001 984.375000000 609.375000001 1359.375000000 1054.687500000 304.687500001 1429.687500000 679.687500001 117.187500001 867.187500000 492.187500001 1242.187500000 398.437500001 1148.437500000 23.437500001 773.437500000 1335.937500000 585.937500001 960.937500000 210.937500001 1195.312500000 445.312500001 820.312500000 70.312500001 632.812500001 1382.812500000 257.812500001 1007.812500000 351.562500001 1101.562500000 726.562500001 1476.562500000 914.062500000 164.062500001 1289.062500000 539.062500001 1230.468750000 480.468750001 855.468750000 105.468750001 667.968750001 1417.968750000 292.968750001 1042.968750000 199.218750001 949.218750000 574.218750001 1324.218750000 761.718750000 11.718750001 1136.718750000 386.718750001 996.093750000 246.093750001 1371.093750000 621.093750001 58.593750001 808.593750000 433.593750001 1183.593750000 527.343750001 1277.343750000 152.343750001 902.343750000 1464.843750000 714.843750001 1089.843750000 339.843750001 597.656250001 1347.656250000 222.656250001 972.656250000 1160.156250000 410.156250001 785.156250000 35.156250001 878.906250000 128.906250001 1253.906250000 503.906250001 316.406250001 1066.406250000 691.406250001 1441.406250000 175.781250001 925.781250000 550.781250001 1300.781250000 1113.281250000 363.281250001 1488.281250000 738.281250001 1394.531250000 644.531250001 1019.531250000 269.531250001 457.031250001 1207.031250000 82.031250001 832.031250000 439.453125001 1189.453125000 64.453125001 814.453125000 1376.953125000 626.953125001 1001.953125000 251.953125001 1095.703125000 345.703125001 1470.703125000 720.703125001 158.203125001 908.203125000 533.203125001 1283.203125000 298.828125001 1048.828125000 673.828125001 1423.828125000 861.328125000 111.328125001 1236.328125000 486.328125001 1142.578125000 392.578125001 767.578125000 17.578125001 580.078125001 1330.078125000 205.078125001 955.078125000 1494.140625000 744.140625001 1119.140625000 369.140625001 556.640625001 1306.640625000 181.640625001 931.640625000 87.890625001 837.890625000 462.890625001 1212.890625000 1025.390625000 275.390625001 1400.390625000 650.390625001 791.015625000 41.015625001 1166.015625000 416.015625001 228.515625001 978.515625000 603.515625001 1353.515625000 697.265625001 1447.265625000 322.265625001 1072.265625000 1259.765625000 509.765625001 884.765625000 134.765625001 896.484375000 146.484375001 1271.484375000 521.484375001 333.984375001 1083.984375000 708.984375001 1458.984375000 615.234375001 1365.234375000 240.234375001 990.234375000 1177.734375000 427.734375001 802.734375000 52.734375001 1318.359375000 568.359375001 943.359375000 193.359375001 380.859375001 1130.859375000 5.859375001 755.859375000 99.609375001 849.609375000 474.609375001 1224.609375000 1037.109375000 287.109375001 1412.109375000 662.109375001 263.671875001 1013.671875000 638.671875001 1388.671875000 826.171875000 76.171875001 1201.171875000 451.171875001 1294.921875000 544.921875001 919.921875000 169.921875001 732.421875001 1482.421875000 357.421875001 1107.421875000 498.046875001 1248.046875000 123.046875001 873.046875000 1435.546875000 685.546875001 1060.546875000 310.546875001 966.796875000 216.796875001 1341.796875000 591.796875001 29.296875001 779.296875000 404.296875001 1154.296875000 1016.601562500 266.601562501 1391.601562500 641.601562501 79.101562501 829.101562500 454.101562501 1204.101562500 547.851562501 1297.851562500 172.851562501 922.851562500 1485.351562500 735.351562501 1110.351562500 360.351562501 1250.976562500 500.976562501 875.976562500 125.976562501 688.476562501 1438.476562500 313.476562501 1063.476562500 219.726562501 969.726562500 594.726562501 1344.726562500 782.226562500 32.226562501 1157.226562500 407.226562501 149.414062501 899.414062500 524.414062501 1274.414062500 1086.914062500 336.914062501 1461.914062500 711.914062501 1368.164062500 618.164062501 993.164062500 243.164062501 430.664062501 1180.664062500 55.664062501 805.664062500 571.289062501 1321.289062500 196.289062501 946.289062500 1133.789062500 383.789062501 758.789062500 8.789062501 852.539062500 102.539062501 1227.539062500 477.539062501 290.039062501 1040.039062500 665.039062501 1415.039062500 747.070312501 1497.070312500 372.070312501 1122.070312500 1309.570312500 559.570312501 934.570312500 184.570312501 840.820312500 90.820312501 1215.820312500 465.820312501 278.320312501 1028.320312500 653.320312501 1403.320312500 43.945312501 793.945312500 418.945312501 1168.945312500 981.445312500 231.445312501 1356.445312500 606.445312501 1450.195312500 700.195312501 1075.195312500 325.195312501 512.695312501 1262.695312500 137.695312501 887.695312500 1192.382812500 442.382812501 817.382812500 67.382812501 629.882812501 1379.882812500 254.882812501 1004.882812500 348.632812501 1098.632812500 723.632812501 1473.632812500 911.132812500 161.132812501 1286.132812500 536.132812501 1051.757812500 301.757812501 1426.757812500 676.757812501 114.257812501 864.257812500 489.257812501 1239.257812500 395.507812501 1145.507812500 20.507812501 770.507812500 1333.007812500 583.007812501 958.007812500 208.007812501 1350.585937500 600.585937501 975.585937500 225.585937501 413.085937501 1163.085937500 38.085937501 788.085937500 131.835937501 881.835937500 506.835937501 1256.835937500 1069.335937500 319.335937501 1444.335937500 694.335937501 928.710937500 178.710937501 1303.710937500 553.710937501 366.210937501 1116.210937500 741.210937501 1491.210937500 647.460937501 1397.460937500 272.460937501 1022.460937500 1209.960937500 459.960937501 834.960937500 84.960937501 483.398437501 1233.398437500 108.398437501 858.398437500 1420.898437500 670.898437501 1045.898437500 295.898437501 952.148437500 202.148437501 1327.148437500 577.148437501 14.648437501 764.648437500 389.648437501 1139.648437500 249.023437501 999.023437500 624.023437501 1374.023437500 811.523437500 61.523437501 1186.523437500 436.523437501 1280.273437500 530.273437501 905.273437500 155.273437501 717.773437501 1467.773437500 342.773437501 1092.773437500 307.617187501 1057.617187500 682.617187501 1432.617187500 870.117187500 120.117187501 1245.117187500 495.117187501 1151.367187500 401.367187501 776.367187500 26.367187501 588.867187501 1338.867187500 213.867187501 963.867187500 448.242187501 1198.242187500 73.242187501 823.242187500 1385.742187500 635.742187501 1010.742187500 260.742187501 1104.492187500 354.492187501 1479.492187500 729.492187501 166.992187501 916.992187500 541.992187501 1291.992187500 752.929687500 2.929687501 1127.929687500 377.929687501 190.429687501 940.429687500 565.429687501 1315.429687500 659.179687501 1409.179687500 284.179687501 1034.179687500 1221.679687500 471.679687501 846.679687500 96.679687501 1456.054687500 706.054687501 1081.054687500 331.054687501 518.554687501 1268.554687500 143.554687501 893.554687500 49.804687501 799.804687500 424.804687501 1174.804687500 987.304687500 237.304687501 1362.304687500 612.304687501)
	
	# SOM initial kernel width (floating point) [1.0:inf] (Default: 10)
	kernelWidths=(0.000000002 7.5000000075 5.25000001575 6.000000002 9.625000001375 9.000000015 11.25000000675 0.625000004375 3.0625000039375 17.8125000011875 4.6875000203125 8.9375000040625 5.625000004375 1.375000020625 13.000000003 1.25000000275 2.625000001375 2.65625001434375 20.8437500021563 4.46875000653125 3.9375000100625 20.3125000056875 0.625000019375 3.71875000328125 5.0625000009375 6.1875000118125 14.8437500101563 1.125000010875 1.96875000703125 15.8125000061875 7.03125000796875 2.90625000009375 1.64062500135937 0.75000001525 17.5312500044687 2.67187500632813 5.48437500751563 23.0468750019531 3.26562501573438 4.03125000196875 7.875000000125 9.6875000103125 19.8281250071719 3.28125001071875 1.20312500979688 14.0156250089844 6.10937501089063 4.29687500070312 0.5625000034375 10.25000000575 8.98437501401563 8.90625000109375 9.95312500304688 6.90625001909375 10.3125000096875 0.109375006890625 1.96875000403125 14.9062500030937 1.875000022125 6.9375000050625 6.32812500267188 4.26562501673438 14.2968750007031 0.90625000109375 2.50781250049219 5.03906250996094 12.3046875086953 0.773437508226563 2.53125000946875 17.0625000069375 8.29687500970313 5.76562500023438 4.53906250246094 2.96875001703125 23.3593750026406 5.57812500842188 2.73437500726563 17.7890625052109 0.398437516601562 2.09375000190625 2.46093750253906 16.8671875001328 5.8125000181875 8.16406250283594 8.64062500535938 3.16406252383594 18.2109375027891 2.9375000050625 0.328125005671875 10.5390625084609 7.61718751738281 10.4609375025391 9.29687500070312 9.45312501254688 10.875000005125 0.539062502460938 1.05468750194531 12.7734375022266 2.23437501976563 5.41406250358594 8.71875000328125 5.66406251933594 18.5546875004453 2.85937500314062 1.3125000066875 13.2812500067188 10.7656250152344 12.7968750012031 8.67968750232031 6.64843751635156 9.16406250783594 0.195312504804688 3.78125000021875 7.125000008875 15.9921875070078 1.95312500804688 0.914062512085938 14.8281250111719 6.08593751291406 5.74218750125781 2.53906250246094 0.140625017859375 18.1875000058125 3.09375000890625 3.0625000049375 18.5390625024609 1.99218751300781 1.26562500073438 0.382812501617187 10.3710937546289 9.26953126173047 8.47265625052734 9.79687500220313 7.59375001640625 10.1953125078047 0.332031254667969 1.77734375522266 14.3242187546758 0.101562525898438 6.55078125644922 6.28906250371094 2.96484377003516 14.0625000019375 1.51562500248438 2.98828125201172 1.66015626533984 19.4960937535039 3.82421875717578 6.61718750738281 26.2617187507383 4.45312501554688 5.78125000221875 5.46093750053906 7.79296876120703 16.5039062584961 1.92187501007813 0.316406258683594 11.7734375102266 4.5625000114375 2.35546875064453 2.21484375078516 3.8125000121875 21.7421875002578 4.88281250511719 4.72265625827734 21.582031253418 2.15234376684766 4.29296875270703 6.40625000159375 6.3164062646836 14.8710937621289 0.710937513289063 1.93359375906641 16.2187500077812 7.66406251033594 4.62890625037109 0.328125003671875 9.89453125710547 7.63671876536328 8.32031250167969 13.3984375006016 11.8828125141172 14.1406250058594 1.44921875555078 2.36718750363281 16.1015625018984 3.61328127138672 7.73437500426563 4.67578125432422 0.410156270589844 11.542968753457 0.808593752191406 1.80468750019531 6.03515625896485 13.6992187573008 1.37109375762891 0.328125011671875 12.6562500113438 4.99218751300781 4.66406250133594 4.12890625287109 1.79687501820313 21.8359375041641 4.41796875858203 4.64843750535156 22.1914062508086 3.65234376334766 2.85937500114062 1.54296875345703 13.7460937532539 1.40625002259375 6.14453125485547 9.57031250442969 4.95703127204297 18.6718750013281 3.46875000453125 1.47656250452344 14.1757812548242 12.4023437625977 12.9492187500508 8.71093750128906 8.16406251383594 9.9375000060625 0.363281252636719 1.25390625174609 13.7695312512305 3.69531251830469 6.01171875298828 6.51562500548437 1.07421877392578 15.0664062539336 1.75781250424219 0.84375000715625 12.1093750078906 9.24218751675781 11.9765625020234 10.7851562502148 11.0507812619492 12.417968754582 0.921875003078125 3.04687500095313 4.1875000118125 11.2578125107422 0.117187509882813 1.77734376122266 16.5546875094453 7.34765626165235 6.20703125079297 3.49609375150391 3.58593751441406 22.7812500012188 4.94140625605859 2.59375000540625 17.3085937536914 1.11328126388672 1.14843750085156 0.589843751410156 11.9238281280762 0.943359395056641 4.35937500364063 8.03906250396094 4.07812501992188 16.5585937514414 2.09960937790039 1.62695313037305 13.916015630084 12.542968763457 12.7714843752285 8.57421875142578 7.86328126413672 9.71875000628125 0.429687503570313 3.55468750044531 6.60742188539258 14.6894531333105 1.52539063447461 0.191406263808594 13.3554687626445 5.27343751472656 6.10937500189062 3.45703125254297 1.44726564255273 20.6542968793457 3.91406250808594 4.06054687993945 20.9257812510742 3.01757813698242 2.10351562589648 2.33789062566211 4.46875001153125 11.6445312603555 0.292968759707031 2.00585938599414 16.3574218836426 7.68164063631836 5.42578125057422 5.73437500226563 4.55273439144727 26.1035156258965 6.53515625746485 3.75976563224023 20.2031250037969 1.56054689043945 2.95898437704102 1.74218750225781 15.9042968760957 4.26757814373242 6.85546875314453 7.28710938071289 1.57421877442578 16.2109375037891 2.17382812982617 0.738281255261719 11.2148437567852 8.95312501504688 10.4765625015234 8.98242187501758 10.458984385541 11.2207031287793 0.74414062725586 1.8457031261543 1.72851563827148 18.1699218778301 3.28710938071289 5.88281250611719 24.7558593752441 4.32421876367578 4.44140625155859 6.49414062550586 8.55468751144531 17.6210937583789 2.48828126151172 0.580078135419922 12.7128906352871 5.14648438685352 3.21093750078906 1.04492187895508 12.7617187552383 11.0156250129844 10.5488281254512 11.6757812523242 9.01757814298242 12.2636718837363 0.671875007328125 1.90039063009961 14.6582031293418 0.537109399462891 6.7792968812207 6.46484375353516 3.22265626877734 14.3437500016563 1.58593750241406 0.205078127794922 9.09375000690625 7.0039062649961 7.36523437663477 11.3203125006797 11.083984388916 13.1738281308262 1.16015625483984 3.04687500495313 17.6171875023828 3.5332031484668 8.83203125516797 5.56445313043555 0.134765647865234 12.8496093791504 1.2792968787207 2.89843750110156 3.59375001240625 22.416015625584 4.74609375525391 4.54492188345508 22.0898437539102 1.99218751800781 4.19726562780273 3.93554687606445 5.16796876283203 12.8906250111094 0.445312511554688 1.45898438254102 13.9042968820957 6.18164063381836 1.82421875017578 0.957031251042969 14.6777343753223 4.79882814120117 5.82812500217188 7.24218750475781 2.48437502151562 15.3632812526367 1.76757812823242 0.287109381712891 10.2792968837207 7.5664062684336 10.2832031277168 9.16015625083985 9.56835938843164 10.6562500053438 0.664062503335938 4.11132812588867 5.47851563652149 13.1621093848379 0.794921885205078 2.76171876123828 18.1289062578711 8.94531251105469 7.57812500042188 3.80859375219141 2.56054689143945 22.1191406278809 4.61718750738281 2.33789063166211 16.7148437552852 0.15625001584375 1.5292968764707 2.88867187511133 7.40625000859375 15.6835937563164 2.12890625787109 1.14257813685742 14.6972656353027 6.41992188758008 5.86523437613477 4.20312500379688 0.533203145466797 20.9355468810644 3.85546876014453 4.4042968815957 21.6093750023906 2.55664063944336 3.25195312674805 1.47656250252344 14.7753906272246 2.74023439525977 6.19140625380859 10.417968753582 6.34765626965234 19.8828125001172 3.45898437854102 1.08984375491016 12.2695312557305 10.791015639209 11.1796875008203 7.25976562674023 6.43945313956055 8.34960938165039 0.169921877830078 1.34765625065234 2.60742188739258 19.4003906265996 3.81445313018555 3.58593750841406 19.1718750048281 0.878906267121094 3.29296875270703 6.0292968759707 7.22656251277344 15.8945312601055 1.44726563655273 2.36328125763672 16.9355468810645 8.26757813373242 3.94531250005469 0.0878906299121094 8.79882813320117 6.42187501757813 8.44335937755664 12.4960937515039 10.5996093914004 12.8515625071484 1.14062500685938 2.73046875326953 18.1464843758535 5.12695314487305 9.16601562883398 5.2207031287793 1.76171877023828 13.2812500027188 0.990234377009766 0.380859377619141 9.4042968805957 8.29296876370703 7.89257812610742 9.02343750297656 6.29882814370117 9.03515625896484 0.0117187559882813 2.51562500548438 16.2890625037109 1.67578127432422 7.90234375609766 7.58398437841602 4.35742189364258 15.9707031260293 1.75781250224219 2.13281250186719 0.53125001546875 17.2304687547695 2.83203125716797 5.30664063269336 22.7050781272949 3.00585939099414 4.60742187739258 4.85351562514649 8.47265625952735 17.2968750067031 2.42773438357227 0.765625007234375 12.5097656334902 5.18554688481445 1.69140625030859)
	
	# SOM radius decay constant (floating point) (0.0:inf] (Default: 1000)
	kernelWidthDecays=(0.000000001 50.000000001 75.000000000 25.000000001 37.500000001 87.500000000 62.500000000 12.500000001 56.250000000 6.250000001 31.250000001 81.250000000 93.750000000 43.750000001 18.750000001 68.750000000 28.125000001 78.125000000 53.125000000 3.125000001 15.625000001 65.625000000 90.625000000 40.625000001 84.375000000 34.375000001 9.375000001 59.375000000 71.875000000 21.875000001 46.875000001 96.875000000 14.062500001 64.062500000 89.062500000 39.062500001 26.562500001 76.562500000 51.562500000 1.562500001 70.312500000 20.312500001 45.312500001 95.312500000 82.812500000 32.812500001 7.812500001 57.812500000 42.187500001 92.187500000 67.187500000 17.187500001 4.687500001 54.687500000 79.687500000 29.687500001 98.437500000 48.437500001 23.437500001 73.437500000 60.937500000 10.937500001 35.937500001 85.937500000 64.843750000 14.843750001 39.843750001 89.843750000 77.343750000 27.343750001 2.343750001 52.343750000 21.093750001 71.093750000 96.093750000 46.093750001 33.593750001 83.593750000 58.593750000 8.593750001 92.968750000 42.968750001 17.968750001 67.968750000 55.468750000 5.468750001 30.468750001 80.468750000 49.218750001 99.218750000 74.218750000 24.218750001 11.718750001 61.718750000 86.718750000 36.718750001 50.781250000 0.781250001 25.781250001 75.781250000 88.281250000 38.281250001 13.281250001 63.281250000 7.031250001 57.031250000 82.031250000 32.031250001 44.531250001 94.531250000 69.531250000 19.531250001 78.906250000 28.906250001 3.906250001 53.906250000 66.406250000 16.406250001 41.406250001 91.406250000 35.156250001 85.156250000 60.156250000 10.156250001 22.656250001 72.656250000 97.656250000 47.656250001 90.234375000 40.234375001 15.234375001 65.234375000 52.734375000 2.734375001 27.734375001 77.734375000 46.484375001 96.484375000 71.484375000 21.484375001 8.984375001 58.984375000 83.984375000 33.984375001 68.359375000 18.359375001 43.359375001 93.359375000 80.859375000 30.859375001 5.859375001 55.859375000 24.609375001 74.609375000 99.609375000 49.609375001 37.109375001 87.109375000 62.109375000 12.109375001 76.171875000 26.171875001 1.171875001 51.171875000 63.671875000 13.671875001 38.671875001 88.671875000 32.421875001 82.421875000 57.421875000 7.421875001 19.921875001 69.921875000 94.921875000 44.921875001 54.296875000 4.296875001 29.296875001 79.296875000 91.796875000 41.796875001 16.796875001 66.796875000 10.546875001 60.546875000 85.546875000 35.546875001 48.046875001 98.046875000 73.046875000 23.046875001 25.390625001 75.390625000 50.390625000 0.390625001 12.890625001 62.890625000 87.890625000 37.890625001 81.640625000 31.640625001 6.640625001 56.640625000 69.140625000 19.140625001 44.140625001 94.140625000 3.515625001 53.515625000 78.515625000 28.515625001 41.015625001 91.015625000 66.015625000 16.015625001 59.765625000 9.765625001 34.765625001 84.765625000 97.265625000 47.265625001 22.265625001 72.265625000 39.453125001 89.453125000 64.453125000 14.453125001 1.953125001 51.953125000 76.953125000 26.953125001 95.703125000 45.703125001 20.703125001 70.703125000 58.203125000 8.203125001 33.203125001 83.203125000 17.578125001 67.578125000 92.578125000 42.578125001 30.078125001 80.078125000 55.078125000 5.078125001 73.828125000 23.828125001 48.828125001 98.828125000 86.328125000 36.328125001 11.328125001 61.328125000 77.929687500 27.929687501 2.929687501 52.929687500 65.429687500 15.429687501 40.429687501 90.429687500 34.179687501 84.179687500 59.179687500 9.179687501 21.679687501 71.679687500 96.679687500 46.679687501 56.054687500 6.054687501 31.054687501 81.054687500 93.554687500 43.554687501 18.554687501 68.554687500 12.304687501 62.304687500 87.304687500 37.304687501 49.804687501 99.804687500 74.804687500 24.804687501 88.867187500 38.867187501 13.867187501 63.867187500 51.367187500 1.367187501 26.367187501 76.367187500 45.117187501 95.117187500 70.117187500 20.117187501 7.617187501 57.617187500 82.617187500 32.617187501 66.992187500 16.992187501 41.992187501 91.992187500 79.492187500 29.492187501 4.492187501 54.492187500 23.242187501 73.242187500 98.242187500 48.242187501 35.742187501 85.742187500 60.742187500 10.742187501 38.085937501 88.085937500 63.085937500 13.085937501 0.585937501 50.585937500 75.585937500 25.585937501 94.335937500 44.335937501 19.335937501 69.335937500 56.835937500 6.835937501 31.835937501 81.835937500 16.210937501 66.210937500 91.210937500 41.210937501 28.710937501 78.710937500 53.710937500 3.710937501 72.460937500 22.460937501 47.460937501 97.460937500 84.960937500 34.960937501 9.960937501 59.960937500 27.148437501 77.148437500 52.148437500 2.148437501 14.648437501 64.648437500 89.648437500 39.648437501 83.398437500 33.398437501 8.398437501 58.398437500 70.898437500 20.898437501 45.898437501 95.898437500 5.273437501 55.273437500 80.273437500 30.273437501 42.773437501 92.773437500 67.773437500 17.773437501 61.523437500 11.523437501 36.523437501 86.523437500 99.023437500 49.023437501 24.023437501 74.023437500 12.695312501 62.695312500 87.695312500 37.695312501 25.195312501 75.195312500 50.195312500 0.195312501 68.945312500 18.945312501 43.945312501 93.945312500 81.445312500 31.445312501 6.445312501 56.445312500 40.820312501 90.820312500 65.820312500 15.820312501 3.320312501 53.320312500 78.320312500 28.320312501 97.070312500 47.070312501 22.070312501 72.070312500 59.570312500 9.570312501 34.570312501 84.570312500 1.757812501 51.757812500 76.757812500 26.757812501 39.257812501 89.257812500 64.257812500 14.257812501 58.007812500 8.007812501 33.007812501 83.007812500 95.507812500 45.507812501 20.507812501 70.507812500 29.882812501 79.882812500 54.882812500 4.882812501 17.382812501 67.382812500 92.382812500 42.382812501 86.132812500 36.132812501 11.132812501 61.132812500 73.632812500 23.632812501 48.632812501 98.632812500 52.539062500 2.539062501 27.539062501 77.539062500 90.039062500 40.039062501 15.039062501 65.039062500 8.789062501 58.789062500 83.789062500 33.789062501 46.289062501 96.289062500 71.289062500 21.289062501 80.664062500 30.664062501 5.664062501 55.664062500 68.164062500 18.164062501 43.164062501 93.164062500 36.914062501 86.914062500 61.914062500 11.914062501 24.414062501 74.414062500 99.414062500 49.414062501 63.476562500 13.476562501 38.476562501 88.476562500 75.976562500 25.976562501 0.976562501 50.976562500 19.726562501 69.726562500 94.726562500 44.726562501 32.226562501 82.226562500 57.226562500 7.226562501 91.601562500 41.601562501 16.601562501 66.601562500 54.101562500 4.101562501 29.101562501 79.101562500 47.851562501 97.851562500 72.851562500 22.851562501 10.351562501 60.351562500 85.351562500 35.351562501)
	
	# star size (integer) [1:200] (Default: 5)
	starSizes=(1 101 150 51 26 125 175 76 63 163 113 13 88 188 138 38 194 94 45 144 169 69 20 119 132 32 82 181 107 7 57 156 184 85 35 135 160 60 10 110 147 48 97 197 122 23 73 172 17 116 166 66 41 141 191 91 54 153 104 4 79 178 128 29 90 189 139 40 65 164 114 15 27 127 177 77 3 102 152 52 108 9 59 158 133 34 83 183 170 71 21 121 195 96 46 146 124 24 74 174 149 49 99 198 161 62 12 111 186 87 37 136 80 180 130 31 55 155 105 6 43 142 192 93 18 118 167 68 135 36 86 185 111 11 61 160 198 98 48 148 173 73 24 123 67 167 117 17 92 191 142 42 5 104 154 55 30 129 179 80 52 151 101 2 76 176 126 27 14 114 163 64 39 139 188 89 145 45 95 195 120 20 70 170 182 83 33 132 157 58 8 107 174 75 25 125 199 100 50 149 112 13 62 162 137 38 87 187 31 131 181 81 6 106 156 56 94 193 143 44 69 168 118 19 41 140 190 90 16 115 165 66 78 177 128 28 53 153 103 3 159 59 10 109 184 84 34 134 121 22 72 171 146 47 97 196 22 122 172 72 47 147 197 97 60 159 109 10 85 184 134 35 178 78 29 128 153 53 4 103 141 41 91 190 116 16 66 165 193 94 44 144 169 69 19 119 131 32 81 181 106 7 57 156 13 113 162 63 38 137 187 88 75 175 125 25 100 200 150 50 83 183 133 33 58 158 108 8 46 145 195 95 21 120 170 71 114 15 64 164 139 39 89 189 151 52 2 102 176 77 27 127 105 5 55 155 130 30 80 179 167 67 18 117 192 92 43 142 99 198 148 49 74 173 123 24 36 136 186 86 11 111 161 61 143 43 93 193 118 18 68 168 180 81 31 130 155 56 6 106 62 162 112 12 87 186 137 37 25 124 174 74 50 149 199 99 71 171 121 22 96 196 146 46 9 109 158 59 34 134 183 84 127 28 78 177 102 3 53 152 190 90 40 140 165 65 15 115 154 54 4 104 179 79 29 129 116 17 67 166 141 42 92 191 48 148 197 98 23 123 172 73 85 185 135 36 60 160 110 11 32 132 182 82 8 107 157 57 95 194 144 45 70 169 120 20 163 64 14 113 188 88 39 138 101 1 51 151 126 26 76 176)
	
	# threshold (floating point) [0.0:inf] (Default: 0.0)
	thresholds=(0.000000000 100.000000000 50.000000000 150.000000000 75.000000000 175.000000000 25.000000000 125.000000000 87.500000000 187.500000000 37.500000000 137.500000000 12.500000000 112.500000000 62.500000000 162.500000000 106.250000000 6.250000000 156.250000000 56.250000000 181.250000000 81.250000000 131.250000000 31.250000000 193.750000000 93.750000000 143.750000000 43.750000000 118.750000000 18.750000000 168.750000000 68.750000000 159.375000000 59.375000000 109.375000000 9.375000000 134.375000000 34.375000000 184.375000000 84.375000000 146.875000000 46.875000000 196.875000000 96.875000000 171.875000000 71.875000000 121.875000000 21.875000000 53.125000000 153.125000000 3.125000000 103.125000000 28.125000000 128.125000000 78.125000000 178.125000000 40.625000000 140.625000000 90.625000000 190.625000000 65.625000000 165.625000000 15.625000000 115.625000000 132.812500000 32.812500000 182.812500000 82.812500000 157.812500000 57.812500000 107.812500000 7.812500000 170.312500000 70.312500000 120.312500000 20.312500000 145.312500000 45.312500000 195.312500000 95.312500000 26.562500000 126.562500000 76.562500000 176.562500000 51.562500000 151.562500000 1.562500000 101.562500000 64.062500000 164.062500000 14.062500000 114.062500000 39.062500000 139.062500000 89.062500000 189.062500000 79.687500000 179.687500000 29.687500000 129.687500000 4.687500000 104.687500000 54.687500000 154.687500000 17.187500000 117.187500000 67.187500000 167.187500000 92.187500000 192.187500000 42.187500000 142.187500000 185.937500000 85.937500000 135.937500000 35.937500000 110.937500000 10.937500000 160.937500000 60.937500000 123.437500000 23.437500000 173.437500000 73.437500000 198.437500000 98.437500000 148.437500000 48.437500000 172.656250000 72.656250000 122.656250000 22.656250000 147.656250000 47.656250000 197.656250000 97.656250000 135.156250000 35.156250000 185.156250000 85.156250000 160.156250000 60.156250000 110.156250000 10.156250000 66.406250000 166.406250000 16.406250000 116.406250000 41.406250000 141.406250000 91.406250000 191.406250000 28.906250000 128.906250000 78.906250000 178.906250000 53.906250000 153.906250000 3.906250000 103.906250000 13.281250000 113.281250000 63.281250000 163.281250000 88.281250000 188.281250000 38.281250000 138.281250000 75.781250000 175.781250000 25.781250000 125.781250000 0.781250000 100.781250000 50.781250000 150.781250000 119.531250000 19.531250000 169.531250000 69.531250000 194.531250000 94.531250000 144.531250000 44.531250000 182.031250000 82.031250000 132.031250000 32.031250000 107.031250000 7.031250000 157.031250000 57.031250000 92.968750000 192.968750000 42.968750000 142.968750000 17.968750000 117.968750000 67.968750000 167.968750000 5.468750000 105.468750000 55.468750000 155.468750000 80.468750000 180.468750000 30.468750000 130.468750000 199.218750000 99.218750000 149.218750000 49.218750000 124.218750000 24.218750000 174.218750000 74.218750000 111.718750000 11.718750000 161.718750000 61.718750000 186.718750000 86.718750000 136.718750000 36.718750000 146.093750000 46.093750000 196.093750000 96.093750000 171.093750000 71.093750000 121.093750000 21.093750000 158.593750000 58.593750000 108.593750000 8.593750000 133.593750000 33.593750000 183.593750000 83.593750000 39.843750000 139.843750000 89.843750000 189.843750000 64.843750000 164.843750000 14.843750000 114.843750000 52.343750000 152.343750000 2.343750000 102.343750000 27.343750000 127.343750000 77.343750000 177.343750000 73.046875000 173.046875000 23.046875000 123.046875000 48.046875000 148.046875000 98.046875000 198.046875000 35.546875000 135.546875000 85.546875000 185.546875000 60.546875000 160.546875000 10.546875000 110.546875000 166.796875000 66.796875000 116.796875000 16.796875000 141.796875000 41.796875000 191.796875000 91.796875000 129.296875000 29.296875000 179.296875000 79.296875000 154.296875000 54.296875000 104.296875000 4.296875000 113.671875000 13.671875000 163.671875000 63.671875000 188.671875000 88.671875000 138.671875000 38.671875000 176.171875000 76.171875000 126.171875000 26.171875000 101.171875000 1.171875000 151.171875000 51.171875000 19.921875000 119.921875000 69.921875000 169.921875000 94.921875000 194.921875000 44.921875000 144.921875000 82.421875000 182.421875000 32.421875000 132.421875000 7.421875000 107.421875000 57.421875000 157.421875000 193.359375000 93.359375000 143.359375000 43.359375000 118.359375000 18.359375000 168.359375000 68.359375000 105.859375000 5.859375000 155.859375000 55.859375000 180.859375000 80.859375000 130.859375000 30.859375000 99.609375000 199.609375000 49.609375000 149.609375000 24.609375000 124.609375000 74.609375000 174.609375000 12.109375000 112.109375000 62.109375000 162.109375000 87.109375000 187.109375000 37.109375000 137.109375000 46.484375000 146.484375000 96.484375000 196.484375000 71.484375000 171.484375000 21.484375000 121.484375000 58.984375000 158.984375000 8.984375000 108.984375000 33.984375000 133.984375000 83.984375000 183.984375000 140.234375000 40.234375000 190.234375000 90.234375000 165.234375000 65.234375000 115.234375000 15.234375000 152.734375000 52.734375000 102.734375000 2.734375000 127.734375000 27.734375000 177.734375000 77.734375000 100.390625000 0.390625000 150.390625000 50.390625000 175.390625000 75.390625000 125.390625000 25.390625000 187.890625000 87.890625000 137.890625000 37.890625000 112.890625000 12.890625000 162.890625000 62.890625000 6.640625000 106.640625000 56.640625000 156.640625000 81.640625000 181.640625000 31.640625000 131.640625000 94.140625000 194.140625000 44.140625000 144.140625000 19.140625000 119.140625000 69.140625000 169.140625000 59.765625000 159.765625000 9.765625000 109.765625000 34.765625000 134.765625000 84.765625000 184.765625000 47.265625000 147.265625000 97.265625000 197.265625000 72.265625000 172.265625000 22.265625000 122.265625000 153.515625000 53.515625000 103.515625000 3.515625000 128.515625000 28.515625000 178.515625000 78.515625000 141.015625000 41.015625000 191.015625000 91.015625000 166.015625000 66.015625000 116.015625000 16.015625000 33.203125000 133.203125000 83.203125000 183.203125000 58.203125000 158.203125000 8.203125000 108.203125000 70.703125000 170.703125000 20.703125000 120.703125000 45.703125000 145.703125000 95.703125000 195.703125000 126.953125000 26.953125000 176.953125000 76.953125000 151.953125000 51.953125000 101.953125000 1.953125000 164.453125000 64.453125000 114.453125000 14.453125000 139.453125000 39.453125000 189.453125000 89.453125000 180.078125000 80.078125000 130.078125000 30.078125000 105.078125000 5.078125000 155.078125000 55.078125000 117.578125000 17.578125000 167.578125000 67.578125000 192.578125000 92.578125000 142.578125000 42.578125000 86.328125000 186.328125000 36.328125000 136.328125000 11.328125000 111.328125000 61.328125000 161.328125000 23.828125000 123.828125000 73.828125000 173.828125000 98.828125000 198.828125000 48.828125000 148.828125000)
	
	# error estimate: 0 = Laplacian; 1 = Naive (Default: 0)
	errorEstimates=(0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0)
	
	# check that all arrays are the same length (otherwise we can't run through all parameter settings)
	if [ ${#mapDimensions[*]} -ne ${#learningRates[*]} ] || [ ${#mapDimensions[*]} -ne ${#learningRateDecays[*]} ] || [ ${#mapDimensions[*]} -ne ${#kernelWidths[*]} ] || [ ${#mapDimensions[*]} -ne ${#kernelWidthDecays[*]} ] || [ ${#mapDimensions[*]} -ne ${#starSizes[*]} ] || [ ${#mapDimensions[*]} -ne ${#thresholds[*]} ] || [ ${#mapDimensions[*]} -ne ${#errorEstimates[*]} ]; then
		echo "Error: parameter array sizes do not match"
		rm -f *.train *.test
		exit
	fi
	
	# check for valid labeling method
	if [ ${neuronLabelingMethod} -ne 0 ] && [ ${neuronLabelingMethod} -ne 1 ] && [ ${neuronLabelingMethod} -ne 2 ] && [ ${neuronLabelingMethod} -ne 3 ]; then
		echo "Error: Invalid neuron labeling method"
		rm -f *.train *.test *.names
		exit
	fi
	
	# pre-generate initialized maps for each of the specified map dimensions (since this is a time-consuming task)
	echo "Generating maps..."
	
	for ((position = 0; position < ${#mapDimensions[*]}; ++position))
	do
		
		if [ ! -f ${1}.${mapDimensions[position]}.0.map ]; then
			echo -n "Map dimension ${mapDimensions[position]} x ${mapDimensions[position]}: "
			
			for ((simNum = 0; simNum < 30; ++simNum))
			do
				echo -n "$simNum "
				./../../algorithms/SOM_PAK/lininit -din ${1}.data.${simNum}.som.train -cout ${1}.${mapDimensions[position]}.${simNum}.map -topol hexa -neigh gaussian -xdim ${mapDimensions[position]} -ydim ${mapDimensions[position]} > /dev/null
			done
			
			echo
		fi
		
	done
	
	echo "=============================================="
	
	for ((position = 0; position < ${#mapDimensions[*]}; ++position))
	do
		echo "Simulation ${currentSimulation}"
		echo "=============================================="
		
		echo "Map dimensions: ${mapDimensions[position]} x ${mapDimensions[position]}"
		echo "Initial learning rate: ${learningRates[position]}"
		echo "Learning rate decay constant: ${learningRateDecays[position]}"
		echo "Kernel width: ${kernelWidths[position]}"
		echo "Radius decay constant: ${kernelWidthDecays[position]}"
		
		if [ ${neuronLabelingMethod} -eq 0 ]; then
			echo "Labeling method: example-centric neuron labeling"
		elif [ ${neuronLabelingMethod} -eq 1 ]; then
			echo "Labeling method: example-centric cluster labeling (K-Means)"
		elif [ ${neuronLabelingMethod} -eq 2 ]; then
			echo "Labeling method: example-centric cluster labeling (Ward)"
		elif [ ${neuronLabelingMethod} -eq 3 ]; then
			echo "Labeling method: weight-centric neuron labeling"
		fi
		
		if [ ${errorEstimates[position]} -eq 0 ]; then
			echo "Error estimate: Laplacian"
		else
			echo "Error estimate: Naive"
		fi
		
		echo "Star size: ${starSizes[position]}"
		echo "Threshold: ${thresholds[position]}"
		
		# run 30 cross validated simulations
		runCrossValidation ${1} ${neuronLabelingMethod} ${mapDimensions[position]} ${learningRates[position]} ${learningRateDecays[position]} ${kernelWidths[position]} ${kernelWidthDecays[position]} ${errorEstimates[position]} ${starSizes[position]} ${thresholds[position]}
		
		echo "=============================================="
		let currentSimulation++
	done
	
	echo "Status: Simulations completed"
	
}

# ===================================================================================================
# Function : cleanUp()
# Purpose  : Cleans up files created during simulation run
# Return   : None
# ===================================================================================================

cleanUp() {
	
	echo -n "Status: Cleaning up...  "
	
	# clean up created files
	rm -f *.names *.som.train *.cn2.eval.train *cn2.eval.test *.map
	
	echo "DONE"
	
}

# ===================================================================================================
# Main script
# ===================================================================================================

export CLASSPATH=/home/wvheerden/Dropbox/Documents/Simulations/algorithms/BuildSets:/home/wvheerden/Dropbox/Documents/Simulations/algorithms/AverageRunResults:.

validateSystem ${1}
buildSets ${1}
runSims ${1}
cleanUp ${1}
